<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Rdmp.UI</name>
    </assembly>
    <members>
        <member name="T:Rdmp.UI.AbstractControlDescriptionProvider`2">
            <summary>
            Allows visual studio designer to work with controls which have abstract base classes in the inheritance hierarchy
            </summary>
            <typeparam name="TAbstract"></typeparam>
            <typeparam name="TBase"></typeparam>
        </member>
        <member name="T:Rdmp.UI.AggregationUIs.Advanced.AggregateEditorUI">
            <summary>
            Allows you to adjust an Aggregate.  This can either be a breakdown of your dataset by columns possibly including a graph (Basic Aggregate), a list of patient identifiers (Identifier 
            List) or a patient index table (See AggregateConfiguration). The image in the top left tells you what type of AggregateConfiguration it is.
             
            <para>Clicking the 'Parameters' button will launch the ParameterCollectionUI dialogue which will let you edit which SQL Parameters @startDate etc are available for use in filters on the 
            AggregateConfiguration</para>
            
            <para>If you are editing a Basic Aggregate that does not include any patient identifier columns (IsExtractionIdentifier) then you can tick IsExtractable to make it available for use and
            extraction for researchers who use the underlying dataset and receive a data extraction (they will receive the 'master' aggregate run on the entire data repository and a 'personal'
            version which is the same query run against their project extraction only) See ExtractionAggregateGraphObjectCollection.</para>
            
            <para>You can click in the SQL and Alias columns to rename columns or change their SQL.  You can also click in the 'Join Direction' column to edit the direction (LEFT or RIGHT) of 
            any supplemental JOINs.</para>
            
            <para>If your Catalogue has multiple underlying TableInfos you can pick which ones to include in the query generated in the FROM section (any Columns included in the SELECT section
            will be automatically included)</para>
            
            <para>Typing into the HAVING block will make the Query Builder add the SQL into the HAVING section of a GROUP BY SQL statement</para>
            
            <para>You can (if it is a Basic Aggregate) choose a single column to PIVOT on.  This will turn row values into new column headers.  For example if you have a dataset with columns 'Date, Gender,
            Result' then you could pivot on Gender and the result set would have columns Date,Male,Female,Other,NumberOfResults' assuming your count SQL was called NumberOfResults.  Do not pick
            a column with thousands of unique values or you will end up with a very unwieldy result set that will probably crash the AggregateGraph when run.</para>
            
            <para>One (DATE!) column can be marked as an Axis.  See AggregateContinuousDateAxisUI for description.</para>
            
            </summary>
        </member>
        <member name="F:Rdmp.UI.AggregationUIs.Advanced.AggregateEditorUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.AggregationUIs.Advanced.AggregateEditorUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.AggregationUIs.Advanced.AggregateEditorUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.AggregationUIs.Advanced.AggregateTopXUI">
            <summary>
            Allows you to limit the graph generated to X bars (in the case of a graph without an axis) or restrict the number of Pivot values returned.  For example you can graph 'Top 10 most
            prescribed drugs'.  Top X is meaningless without an order by statement, therefore you must also configure a dimension to order by (and a direction).  In most cases you should leave 
            the Dimension at 'Count Column' this will mean that whatever your count dimension is (usually count(*)) will be used to determine the TOP X.  Setting to Ascending will give you the
            lowest number e.g. 'Top 10 LEAST prescribed drugs' instead.  If you change the dimension from the 'count column' to one of your dimensions then the TOP X will apply to that column
            instead.  e.g. the 'The first 10 prescribed drugs alphabetically' (not particularly useful).
            </summary>
        </member>
        <member name="F:Rdmp.UI.AggregationUIs.Advanced.AggregateTopXUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.AggregationUIs.Advanced.AggregateTopXUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.AggregationUIs.Advanced.AggregateTopXUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.AggregationUIs.Advanced.SelectColumnUI">
            <summary>
            Allows you to pick which columns are used to build an AggregateConfiguration.  This includes all AggregateDimensions (and the count column) as well as all available columns which could
            be included.  This UI handles column selection / editing for both regular Aggregate Graphs, Cohort Sets and Patient Index Tables (because they are all actually just AggregateConfiguration
            objects anyway). 
            
            <para>Ticking a column includes it in the configuration, unticking it deletes it.  If you have ticked an ExtractionInformation it will become an AggregateDimension which means when you change its
            SQL implementation it will not affect the main extraction implementation.  This means that if you tick a column and modify it then untick it you will loose the changes.</para>
            
            <para>The count column appears in Wheat background color and can be modified to any GROUP BY aggregate function e.g. max(dt)</para>
            </summary>
        </member>
        <member name="M:Rdmp.UI.AggregationUIs.Advanced.SelectColumnUI.Save(Rdmp.Core.QueryBuilding.IColumn)">
            <summary>
            saves changes to an IColumn made by the user and publishes that the AggregateConfiguration has changed
            </summary>
            <param name="col"></param>
        </member>
        <member name="F:Rdmp.UI.AggregationUIs.Advanced.SelectColumnUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.AggregationUIs.Advanced.SelectColumnUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.AggregationUIs.Advanced.SelectColumnUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.AggregationUIs.AggregateContinuousDateAxisUI">
            <summary>
            One Dimension (Group By Column) can be set to be a 'Continuous Date Axis'.  This must be a DateTime or Date field or a transform that yields a Date/DateTime.  Normally with SQL
            when you include a Date in a GroupBy it will group it by unique value (just like any other field), most SQL users will get around this by using a function such as Year(MyDateCol) 
            to produce Aggregate of records per year.  However this approach will not fill in years where no date exists.
            
            <para>Setting an AggregateContinuousDateAxis will generate a continuous record set for the date field specified even when there are no records.  For example you can set up an axis that
            goes from 2001-01-01 to 2016-01-01 in increments of 1 month without having to worry about gaps in the axis or outlier dates (e.g. freaky dates like 1900-01-01).</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.AggregationUIs.AggregateContinuousDateAxisUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.AggregationUIs.AggregateContinuousDateAxisUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.AggregationUIs.AggregateContinuousDateAxisUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.AggregationUIs.AggregateGraphUI">
            <summary>
            Executes and renders an AggregateConfiguration as a graph.  An AggregateConfiguration is a GROUP BY sql statement.  You can view the statement executed through the 
            'SQL Code' tab.  In the Data tab you can view the raw data returned by the GROUP BY query (And also if applicable you can cache the results for displaying on the website).
            
            <para>The Graph will do it's best to render something appropriate to the selected Dimensions, Pivot, Axis etc but there are limits.  If the graph doesn't look the way you want
            try putting a year/month axis onto the AggregateConfiguration.  Also make sure that your PIVOT Dimension doesn't have 1000 values or the graph will be completely incomprehensible.</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.AggregationUIs.AggregateGraphUI.MAXIMUM_CELLS_BEFORE_WARNING">
            <summary>
            The maximum number of cells in a DataTable before we warn the user that rendering it is likely to hang
            up System.Windows.Forms.DataVisualization.Charting for a minutes/hours
            </summary>
        </member>
        <member name="P:Rdmp.UI.AggregationUIs.AggregateGraphUI.Silent">
            <summary>
            Set to true to suppress yes/no dialogues from showing e.g. if there is too much data 
            (see <see cref="F:Rdmp.UI.AggregationUIs.AggregateGraphUI.MAXIMUM_CELLS_BEFORE_WARNING"/>) to sensibly render.  If true then
            the sensible descision is taken e.g. to not try to render.
            
            </summary>
        </member>
        <member name="F:Rdmp.UI.AggregationUIs.AggregateGraphUI.menuInitialized">
            <summary>
            Normally you don't need to worry about double subscriptions but this graph gets recycled during MetadataReport generation with different aggregates one
            after the other which violates the 1 subscription per control rule (see base.SetDatabaseObject)
            </summary>
        </member>
        <member name="M:Rdmp.UI.AggregationUIs.AggregateGraphUI.SetAggregate(Rdmp.UI.ItemActivation.IActivateItems,Rdmp.Core.Curation.Data.Aggregation.AggregateConfiguration)">
            <summary>
            Loads the Graph without establishing a lifetime subscription to refresh events (use if you are a derived class who has it's own subscription or if you plan
            to load multiple different graphs into this control one after the other).
            </summary>
            <param name="activator"></param>
            <param name="graph"></param>
        </member>
        <member name="F:Rdmp.UI.AggregationUIs.AggregateGraphUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.AggregationUIs.AggregateGraphUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.AggregationUIs.AggregateGraphUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.ANOEngineeringUIs.ANOTableUI">
            <summary>
            Displays the live status of an ANOTable (is it pushed or not) and how many rows it has.  Also allows dropping/changing the anonymisation schema (number of
            integers / characters to use in anonymous format) when the ANOTable is not pushed to the ANOStore.Database.
            </summary>
        </member>
        <member name="F:Rdmp.UI.ANOEngineeringUIs.ANOTableUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.ANOEngineeringUIs.ANOTableUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.ANOEngineeringUIs.ANOTableUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.ANOEngineeringUIs.ForwardEngineerANOCatalogueUI">
            <summary>
            Allows you to create an anonymous version of a Catalogue by selecting which columns to anonymise and which to drop etc.  This will create a new table in the
            database of your choice which will be imported as a new Catalogue and a new LoadMetadata will be created that will migrate and apply the anonymisations to the
            original Catalogue's data.
            </summary>
        </member>
        <member name="F:Rdmp.UI.ANOEngineeringUIs.ForwardEngineerANOCatalogueUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.ANOEngineeringUIs.ForwardEngineerANOCatalogueUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.ANOEngineeringUIs.ForwardEngineerANOCatalogueUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.AutoComplete.AutoCompleteProviderWin">
            <summary>
            Provides autocomplete handling and event hooking for <see cref="T:ScintillaNET.Scintilla"/> control
            </summary>
        </member>
        <member name="T:Rdmp.UI.CatalogueSummary.CatalogueDQEResultsUI">
            <summary>
            Shows a longitudinal breakdown of all Data Quality Engine runs on the dataset including the ability to 'rewind' to look at the dataset quality graphs of previous
            runs of the DQE over time (e.g. before and after a data load).
            </summary>
        </member>
        <member name="F:Rdmp.UI.CatalogueSummary.CatalogueDQEResultsUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.CatalogueSummary.CatalogueDQEResultsUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.CatalogueSummary.CatalogueDQEResultsUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.CatalogueSummary.DataQualityReporting.ColumnStatesChart">
            <summary>
            Only visible after running the data quality engine on a dataset (Catalogue).   Shows each extractable column in the dataset with a horizontal bar indicating what proportion
            of the values in the dataset that are in that column are passing validation.  By comparing this chart with the TimePeriodicityChart you can if validation problems in the 
            dataset are attributable to specific columns or whether the quality of the entire dataset is bad.  For example if the entire TimePeriodicityChart is red (failing validation)
            but only one column in the ColumnStatesChart is showing red then you know that the scope of the problem is limited only to that column.
            
            <para>Also included in each column bar (underneath the main colour) is a black/grey bar which shows what proportion of the values in the column were null.</para>
            </summary>
        </member>
        <member name="M:Rdmp.UI.CatalogueSummary.DataQualityReporting.ColumnStatesChart.ClearGraph">
            <inheritdoc/>
        </member>
        <member name="M:Rdmp.UI.CatalogueSummary.DataQualityReporting.ColumnStatesChart.SelectEvaluation(Rdmp.Core.DataQualityEngine.Data.Evaluation,System.String)">
            <inheritdoc/>
        </member>
        <member name="F:Rdmp.UI.CatalogueSummary.DataQualityReporting.ColumnStatesChart.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.CatalogueSummary.DataQualityReporting.ColumnStatesChart.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.CatalogueSummary.DataQualityReporting.ColumnStatesChart.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.CatalogueSummary.DataQualityReporting.IDataQualityReportingChart">
            <summary>
            Interface for all UI charts that depict DQE results in <see cref="T:Rdmp.UI.CatalogueSummary.CatalogueDQEResultsUI"/>
            </summary>
        </member>
        <member name="M:Rdmp.UI.CatalogueSummary.DataQualityReporting.IDataQualityReportingChart.ClearGraph">
            <summary>
            Clears the currently shown results in the UI
            </summary>
        </member>
        <member name="M:Rdmp.UI.CatalogueSummary.DataQualityReporting.IDataQualityReportingChart.SelectEvaluation(Rdmp.Core.DataQualityEngine.Data.Evaluation,System.String)">
            <summary>
            Updates the currently shown results to depict those gathered during the <paramref name="evaluation"/>
            </summary>
            <param name="evaluation"></param>
            <param name="pivotCategoryValue">The pivot value within the results to show or "ALL" for all records gathered</param>
        </member>
        <member name="T:Rdmp.UI.CatalogueSummary.DataQualityReporting.SubComponents.ConsequenceBar">
            <summary>
            Part of ColumnStatesChart, shows what proportion of a given column in the dataset is passing/failing validation.  See ColumnStatesChart for a description of the use case.
            </summary>
        </member>
        <member name="F:Rdmp.UI.CatalogueSummary.DataQualityReporting.SubComponents.ConsequenceBar.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.CatalogueSummary.DataQualityReporting.SubComponents.ConsequenceBar.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.CatalogueSummary.DataQualityReporting.SubComponents.ConsequenceBar.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.CatalogueSummary.DataQualityReporting.SubComponents.ConsequenceKey">
            <summary>
            All validation rules configured in the RDMP have an associated 'Consequence', this is like a severity level.  The lowest is 'Missing' and indicates that the failure of the 
            validation rule means that an expected value is not present.  The worst is 'Invalidates Row' which indicates that the validation failure is so serious that the entire row
            is useless (e.g. a hospital admissions record with no patient identifier making it unlinkable).  See SecondaryConstraintUI for more information on how validation rules are 
            interpreted.
            
            <para>This control documents which colours are used to render each of these consequences in ColumnStatesChart. </para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.CatalogueSummary.DataQualityReporting.SubComponents.ConsequenceKey.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.CatalogueSummary.DataQualityReporting.SubComponents.ConsequenceKey.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.CatalogueSummary.DataQualityReporting.SubComponents.ConsequenceKey.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.CatalogueSummary.DataQualityReporting.SubComponents.DQEPivotCategorySelector">
            <summary>
            Data Quality Engine records all validation results in a relational database, this includes recording with each result the Pivot column value found when evaluating the row.  A Pivot
            column is a single categorical field in the dataset that is the most useful way of slicing the dataset e.g. Healthboard.  If your dataset has a pivot column
            then this control will let you change which results are displayed in any IDataQualityReportingCharts from either All rows in the dataset or only 
            those where the pivot column has a specific value.  If your pivot column contains nulls then these records will only be audited under the ALL category.
            </summary>
        </member>
        <member name="F:Rdmp.UI.CatalogueSummary.DataQualityReporting.SubComponents.DQEPivotCategorySelector.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.CatalogueSummary.DataQualityReporting.SubComponents.DQEPivotCategorySelector.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.CatalogueSummary.DataQualityReporting.SubComponents.DQEPivotCategorySelector.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.CatalogueSummary.DataQualityReporting.SubComponents.EvaluationTrackBar">
            <summary>
            The Data Quality Engine stores all validation results in a relational database.  This includes the time the DQE was run.  This allows us to 'rewind' and look at previous results
            e.g. to compare the quality of the dataset before and after a data load.
            
            <para>If this control is not enabled then it means you have only ever done one DQE evaluation or have never evaluated the dataset by using the DQE.</para>
            
            <para>Dragging the slider will adjust a IDataQualityReportingChart to show the results of the DQE on that day.</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.CatalogueSummary.DataQualityReporting.SubComponents.EvaluationTrackBar.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.CatalogueSummary.DataQualityReporting.SubComponents.EvaluationTrackBar.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.CatalogueSummary.DataQualityReporting.SubComponents.EvaluationTrackBar.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.CatalogueSummary.DataQualityReporting.TimePeriodicityChart">
            <summary>
            Only visible after running the Data Quality Engine at least once on a given dataset (Catalogue).  Shows the number of records each month in the dataset that are passing/failing
            validation as a stack chart.  The Data tab will show you the raw counts that power the graph.  See SecondaryConstraintUI for validation configuration and ConsequenceKey for the
            meanings of each consequence classification.
            </summary>
        </member>
        <member name="M:Rdmp.UI.CatalogueSummary.DataQualityReporting.TimePeriodicityChart.ClearGraph">
            <inheritdoc/>
        </member>
        <member name="M:Rdmp.UI.CatalogueSummary.DataQualityReporting.TimePeriodicityChart.SelectEvaluation(Rdmp.Core.DataQualityEngine.Data.Evaluation,System.String)">
            <inheritdoc/>
        </member>
        <member name="F:Rdmp.UI.CatalogueSummary.DataQualityReporting.TimePeriodicityChart.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.CatalogueSummary.DataQualityReporting.TimePeriodicityChart.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.CatalogueSummary.DataQualityReporting.TimePeriodicityChart.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.CatalogueSummary.LoadEvents.DiffDataTables">
            <summary>
            Part of ViewInsertsAndUpdatesDialog (in the Updates tab), this control shows a sample of the updates that occurred as part of a data load.  The data load engine operates a 'newer
            data is better' policy when loading data such that if a record with the same primary key comes in the old values for the record are moved into the archive table and the new
            values are used to update the dataset (See 'Archive Tables' in UserManual.md.  This control lets you see the before and after values side by side.
            </summary>
        </member>
        <member name="F:Rdmp.UI.CatalogueSummary.LoadEvents.DiffDataTables.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.CatalogueSummary.LoadEvents.DiffDataTables.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.CatalogueSummary.LoadEvents.DiffDataTables.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.CatalogueSummary.LoadEvents.LoadEventsTreeView">
            <summary>
            Shows the longitudinal history of all data loads of a given object (e.g. data load).  This is an expandable tree including all progress messages, errors, table load notifications
            etc.
            
            <para>Right clicking on red error messages will allow you to resolve them into yellow state (error has been investigated and did not result in any serious problems / data integrity loss etc).
            This launches the ResolveFatalErrors dialog.  You can resolve multiple errors at the same time by selecting all the errors at once and then right clicking one of them.</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.CatalogueSummary.LoadEvents.LoadEventsTreeView.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.CatalogueSummary.LoadEvents.LoadEventsTreeView.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.CatalogueSummary.LoadEvents.LoadEventsTreeView.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.CatalogueSummary.LoadEvents.LoadEventsTreeViewObjectCollection">
            <summary>
            Collection for a <see cref="T:Rdmp.UI.CatalogueSummary.LoadEvents.LoadEventsTreeView"/>, captures the root object being logged about
            </summary>
        </member>
        <member name="T:Rdmp.UI.CatalogueSummary.LoadEvents.ResolveFatalErrors">
            <summary>
            Fatal errors are crashes of the data load engine when it is attempting to load data.  If you use the RAW / STAGING / LIVE model this should almost never result in contaminating your
            live dataset (See 'RAW, STAGING, LIVE' in UserManual.md).  If however you have lots of post load tasks or other custom functionality with knock on consequences it is possible
            that a crash will result unforeseen consequences.  For this reason all failure messages are stored in an 'unresolved' state.  Through LoadEventsTreeView you can launch this dialog.
            
            <para>This dialog lets you mark errors as 'resolved' and provide a message as to why the error happened and the steps you have taken to resolve it e.g. "Data load failed because data provider
            has started sending 'Male' instead of 'M' for column 'Gender', I have adjusted the column width to varchar(10) to compensate and have created an issue to standardise the column values".</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.CatalogueSummary.LoadEvents.ResolveFatalErrors.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.CatalogueSummary.LoadEvents.ResolveFatalErrors.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.CatalogueSummary.LoadEvents.ResolveFatalErrors.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.CatalogueSummary.LoadEvents.ViewInsertsAndUpdatesDialog">
            <summary>
            Allows you to view a sample of the data in your dataset before and after a data load.  This includes a sample of the new records added and a side by side comparison of the 
            changes (See DiffDataTables).  Depending on your indexes and the volume of your data it might take some time to execute the sample fetching query.
            
            <para>Generate the preview by entering an appropriate timeout (e.g. 120 seconds) and selecting 'Try To Fetch Appropriate Data'.  This will show you the SQL that the system is about
            to run so that you can (if you want/need to) run the code in Sql Management Studio with the query analyser on which might suggest indexes to help with performance problems.</para>
            
            <para>Once the queries have finished executing (you will see progress messages appearing in the 'Fetch Data' tab), INSERTS that were part of the data load will appear in 'View Inserts' 
            tab and side by side views of UPDATES (old vs new) will appear in the 'View Updates' tab (see DiffDataTables).</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.CatalogueSummary.LoadEvents.ViewInsertsAndUpdatesDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.CatalogueSummary.LoadEvents.ViewInsertsAndUpdatesDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.CatalogueSummary.LoadEvents.ViewInsertsAndUpdatesDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.ChartLookAndFeelSetter">
            <summary>
            Formats X and Y axis of <see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart"/> objects in a consistent way (including axis increments etc).
            </summary>
        </member>
        <member name="M:Rdmp.UI.ChartLookAndFeelSetter.PopulateYearMonthChart(System.Windows.Forms.DataVisualization.Charting.Chart,System.Data.DataTable,System.String)">
            <summary>
            Formats the X and Y axis of a <paramref name="chart"/> with sensible axis increments for the DataTable <paramref name="dt"/>. The 
            table must have a first column called YearMonth in the format YYYY-MM
            </summary>
            <param name="chart"></param>
            <param name="dt"></param>
            <param name="yAxisTitle"></param>
        </member>
        <member name="M:Rdmp.UI.ChartLookAndFeelSetter.GetOffset(System.String)">
            <summary>
            calculates how far offset the month is 
            </summary>
            <param name="yearMonth"></param>
            <returns></returns>
        </member>
        <member name="T:Rdmp.UI.ChecksUI.AllChecksCompleteHandlerArgs">
            <summary>
            Event arguments for when a <see cref="T:Rdmp.Core.ReusableLibraryCode.Checks.ICheckable"/> UI finishes checking an object.
            </summary>
        </member>
        <member name="T:Rdmp.UI.ChecksUI.ChecksUI">
            <summary>
            There are two main event systems in play in the RDMP.  There is Checking and Progress.  Checking activities are tasks that should be supervised and can block asking the user
            whether or not a proposed fix to a problem should be applied (See ChecksUI).  Progress activities are messages only and can also include numerical update messages indicating 
            that progress is made towards a fixed number e.g. you could get 1000 messages over the course of an hour reporting how close towards a goal of 1,000,000 records a given task is.
            
            <para>This control covers the checking event system. For information about the progress system see ProgressUI.</para>
            
            <para>Used throughout the RDMP software to inform the user about the progress or checking of an activity.  Messages will appear along with a result (Success,Fail,Warning) and optionally
            an Exception if one was generated.  Double clicking a message lets you view a StackTrace and even view the source code (See ViewSourceCodeDialog) where the message was generated 
            (even if it wasn't an Exception).</para>
            
            <para>You can copy and paste values out of the listbox using Ctrl+C and Ctrl+V to paste.</para>
            
            <para>Typing into the Filter lets you filter by message text.</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.ChecksUI.ChecksUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.ChecksUI.ChecksUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.ChecksUI.ChecksUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.ChecksUI.IRAGSmiley">
            <summary>
            Reusable component that indicates the success / warning / failure of a task in a nice user friendly way.  Green indicates success, yellow
            indicates a warning and red indicates failure.  If there is an exception associated with a failure then clicking on the red face will show
            the Exception.
            </summary>
        </member>
        <member name="T:Rdmp.UI.ChecksUI.MakeChangePopup">
            <summary>
            Yes/No dialog for handling <see cref="P:Rdmp.Core.ReusableLibraryCode.Checks.CheckEventArgs.ProposedFix"/>.  Describes the fix and prompts the user for a response.  Includes
            support for Yes to All.
            </summary>
        </member>
        <member name="T:Rdmp.UI.ChecksUI.PopupChecksUI">
            <summary>
            Popup dialog version of ChecksUI, See ChecksUI for description of functionality.
            </summary>
        </member>
        <member name="F:Rdmp.UI.ChecksUI.PopupChecksUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.ChecksUI.PopupChecksUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.ChecksUI.PopupChecksUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.ChecksUI.RAGSmiley">
            <inheritdoc cref="T:Rdmp.UI.ChecksUI.IRAGSmiley"/>
        </member>
        <member name="F:Rdmp.UI.ChecksUI.RAGSmiley.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.ChecksUI.RAGSmiley.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.ChecksUI.RAGSmiley.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.ChecksUI.RAGSmileyToolStrip">
            <inheritdoc cref="T:Rdmp.UI.ChecksUI.IRAGSmiley" />
        </member>
        <member name="T:Rdmp.UI.CohortUI.CohortSourceManagement.CreateNewCohortDatabaseWizardUI">
            <summary>
            <para>Allows you to specify the private and release identifier column name/datatypes for the cohort database you are creating.  It is anticipated that you will have some datasets already
            configured in the Data Catalogue Database and have marked your patient identifier columns as IsExtractionIdentifier (See ExtractionInformationUI, ImportSQLTable and 
            ForwardEngineerCatalogue).</para>
            
            <para>Once you have understood and configured your cohort database schema including private / release identifier datatypes you can now choose which database/server to 
            create the database on (Sql Server).  Enter the server details.  If you omit username and password then Windows Authentication (Integrated Security) is used, if you enter a
            username/password then these will be stored in the Data Export Manager database in encrypted form (See PasswordEncryptionKeyLocationUI) and used to do Sql Authentication when
            doing data extractions.</para> 
             
            <para>You can use <see cref="T:Rdmp.Core.CohortCommitting.CreateNewCohortDatabaseWizard"/> to create a suitable database based on the private identifiers you
            hold in your existing datasets.</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.CohortUI.CohortSourceManagement.CreateNewCohortDatabaseWizardUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.CohortUI.CohortSourceManagement.CreateNewCohortDatabaseWizardUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.CohortUI.CohortSourceManagement.CreateNewCohortDatabaseWizardUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.CohortUI.CohortSourceManagement.ExternalCohortTableUI">
            <summary>
            Allows you to edit an external cohort reference.  This is the location of a cohort database and includes the names of the Cohort table and the names of 
            private/release identifiers in the database
            </summary>
        </member>
        <member name="F:Rdmp.UI.CohortUI.CohortSourceManagement.ExternalCohortTableUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.CohortUI.CohortSourceManagement.ExternalCohortTableUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.CohortUI.CohortSourceManagement.ExternalCohortTableUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.CohortUI.ExtractableCohortCollectionUI">
            <summary>
            Shows a collection of cohorts that are ready for data extraction (typically all the cohorts associated with a project or a global list of all cohorts).  These are identifier lists
            and release identifier substitutions stored in the external cohort database(s).  The control provides a readonly summary of the number of unique patient identifiers in each cohort.
            If a project/global list includes more than one Cohort Source (e.g. you link NHS numbers to ReleaseIdentifiers but also link CHI numbers to ReleaseIdentifiers or if you have the same
            private identifier but different release identifier formats) then each seperate cohort source table will be listed along with the associated cohorts found by RDMP.
            </summary>
        </member>
        <member name="F:Rdmp.UI.CohortUI.ExtractableCohortCollectionUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.CohortUI.ExtractableCohortCollectionUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.CohortUI.ExtractableCohortCollectionUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.CohortUI.ExtractableCohortUI">
            <summary>
            Describes a named cohort in one of your Cohort Databases (you might only have 1 cohort database - See ExternalCohortTable).  Each cohort is associated with a specific
            Project.  Cohorts can have 'custom data', these are researcher datasets or datasets specific to the project extraction that are not needed for any other project (for example 
            questionnaire data which relates to the cohort).  
            
            <para>The SQL window will show what SQL the QueryBuilder has produced to view the cohort and any accompanying custom data tables.  You can use this SQL to check that cohorts have the 
            correct identifiers in them etc.</para>
             
            <para>You can upload new files as custom data for the selected cohort by clicking 'Import New Custom Data File For Cohort...'  This will let you select a file and run it through a 
            Pipeline to create a new data table in the cohort database that is like a project specific dataset.</para>
            
            <para>A cohort is implemented as a private and release identifier column set and joined at data extraction time to your data repository datasets (the private identifiers are striped out
            and replaced with the corresponding patients project specific release identifier).  You can specify a 'OverrideReleaseIdentifierSQL', this will hijack what it says in the cohort
            database and do the release identifier substitution with the specific SQL you type instead (this is not recommended).  The use case for overriding would be if you have added some
            additional release identifier columns into your cohort table and want to use that column instead of the listed release identifier column (again this is a really bad idea).</para>
            
            </summary>
        </member>
        <member name="F:Rdmp.UI.CohortUI.ExtractableCohortUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.CohortUI.ExtractableCohortUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.CohortUI.ExtractableCohortUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.CohortUI.ImportCustomData.CohortCreationRequestUI">
            <summary>
            Once you have created a cohort database, this dialog lets you upload a new cohort into it.  You will already have selected a file which contains the private patient identifiers of
            those you wish to be in the cohort.  Next you must create or choose an existing Project for which the cohort belongs.  
            
            <para>Once you have chosen the project you can choose to either create a new cohort for use with the project (use this if you have multiple cohorts in the project e.g. 'Cases' and 
            'Controls').  Or 'Revised version of existing cohort' for if you made a mistake with your first version of a cohort or if you are doing a refresh of the cohort (e.g. after 5 years
            it is likely there will be different patients that match the research study criteria so a new version of the cohort is appropriate).</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.CohortUI.ImportCustomData.CohortCreationRequestUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.CohortUI.ImportCustomData.CohortCreationRequestUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.CohortUI.ImportCustomData.CohortCreationRequestUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.Collections.AlwaysShowListOnlyFilter">
            <summary>
            Filter which always shows a given list of objects (the allowList).  This class is an <see cref="T:BrightIdeasSoftware.IModelFilter"/>
            for use with ObjectListView
            </summary>
        </member>
        <member name="M:Rdmp.UI.Collections.CatalogueCollectionFilterUI.CheckForChanges">
            <summary>
            Checks the current values in <see cref="T:Rdmp.Core.ReusableLibraryCode.Settings.UserSettings"/> and updates the UI state to match.
            This will trigger checked change events if any are out of sync
            </summary>
        </member>
        <member name="F:Rdmp.UI.Collections.CatalogueCollectionFilterUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.Collections.CatalogueCollectionFilterUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.Collections.CatalogueCollectionFilterUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.Collections.CatalogueCollectionUI">
            <summary>
            Main window for Data Management, this Control lets you view all your datasets, curate descriptive metadata, configure extractable columns, generate reports etc
            
            <para>The tree shows you all the datasets you have configured for use with the RDMP.  Double clicking on a dataset (called a Catalogue) will show you the descriptive data you 
            have recorded. Right clicking a Catalogue will give you access to operations relevant to Catalogues (e.g. viewing dataset extraction logic if any).  Right clicking a
            CatalogueItem will give you access to operations relevant to CatalogueItems (e.g. adding an Issue).  And so on.</para>
            
            <para>Each Catalogue has 1 or more CatalogueItems (visible through the CatalogueItems tab), these are the columns in the dataset that are maintained by RDMP. If you have very 
            wide data tables with hundreds of columns you might only configure a subset of those columns (the ones most useful  to researchers) for extraction.</para>
            
            <para>You can also drag Catalogues between folders or into other Controls (e.g. dragging a Catalogue into a CohortIdentificationCollectionUI container to add the dataset to the identification
            criteria).</para>
            
            <para>Pressing the Del key will prompt you to delete the selected item.</para>
            
            <para>By default Deprecated, Internal and ColdStorage Catalogues do not appear, you can turn visibility of these on by selecting the relevant tick boxes.</para>
            
            <para>Finally you can launch 'Checking' for every dataset, this will attempt to verify the extraction SQL you
            have configured for each dataset and to ensure that it runs and that at least 1 row of data is returned.  Checking all the datasets can take a while so runs asynchronously.</para>
            </summary>
        </member>
        <member name="M:Rdmp.UI.Collections.CatalogueCollectionUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="F:Rdmp.UI.Collections.CatalogueCollectionUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.Collections.CatalogueCollectionUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.Collections.CherryPickingTailFilter">
            <summary>
            Tail filter that returns up to a maximum number of objects but priorities search matches
            </summary>
        </member>
        <member name="M:Rdmp.UI.Collections.CherryPickingTailFilter.#ctor(System.Int32,Rdmp.UI.Collections.TextMatchFilterWithAlwaysShowList)">
            <summary>
            Creates a new whole list filter that prioritizes items in the <paramref name="modelFilter"/> if any
            </summary>
            <param name="numberOfObjects">The maximum number of objects to return (can be exceeded if there are <see cref="F:Rdmp.UI.Collections.TextMatchFilterWithAlwaysShowList.AlwaysShow"/> objects)</param>
            <param name="modelFilter">The optional search/alwaysShowList filter from which objects should be returned from first</param>
        </member>
        <member name="M:Rdmp.UI.Collections.CherryPickingTailFilter.Filter(System.Collections.IEnumerable)">
            <summary>
            Returns objects that survive filtering
            </summary>
            <param name="modelObjects">Model objects in the tree</param>
            <returns>Objects that should survive filtering</returns>
        </member>
        <member name="T:Rdmp.UI.Collections.CohortIdentificationCollectionUI">
            <summary>
            Displays all the cohort identification configurations you have configured in RDMP. Cohort Identification Configurations (CIC) are created to identify specific patients e.g. 'all patients 
            with 3 or more prescriptions for a diabetes drug or who have been hospitalised for an amputation'.  Each CIC achieves its goal by combining Cohort Sets with Set operations (UNION,
            INTERSECT, EXCEPT) for example Cohort Set 1 '3+ diabetes drug prescriptions' UNION 'hospital admissions for amputations'.  Cohort sets can be from the same or different data sets (as
            long as they have a common identifier).
            </summary>
        </member>
        <member name="F:Rdmp.UI.Collections.CohortIdentificationCollectionUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.Collections.CohortIdentificationCollectionUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.Collections.CohortIdentificationCollectionUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.Collections.DataExportCollectionUI">
            <summary>
            Contains a list of all the currently configured data export projects you have.  A data export Project is a collection of one or more datasets combined with a cohort (or multiple
            if you have sub ExtractionConfigurations within the same Project e.g. cases/controls).
            
            <para>Data in these datasets will be linked against the cohort and anonymised on extraction (to flat files / database etc).</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.Collections.DataExportCollectionUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.Collections.DataExportCollectionUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.Collections.DataExportCollectionUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.Collections.FavouritesCollectionUI">
            <summary>
            Collection that shows all of a users favourited objects.  Only root objects will be displayed (this means that if you favourite a Catalogue and 3 
            CatalogueItems within that Catalogue only the root Catalogue will be a top level node in the collection UI)
            </summary>
        </member>
        <member name="M:Rdmp.UI.Collections.FavouritesCollectionUI.FindRootObjects(Rdmp.UI.ItemActivation.IActivateItems,System.Func{Rdmp.Core.MapsDirectlyToDatabaseTable.IMapsDirectlyToDatabaseTable,System.Boolean})">
            <summary>
            Returns all root objects in RDMP that match the <paramref name="condition"/>.  Handles unpicking tree collisions e.g. where <paramref name="condition"/> matches 2 objects with one being the child of the other
            </summary>
            <param name="activator"></param>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:Rdmp.UI.Collections.FavouritesCollectionUI.IncludeObject(Rdmp.Core.MapsDirectlyToDatabaseTable.IMapsDirectlyToDatabaseTable)">
            <summary>
            Return true if the object should be displayed in this pane
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="F:Rdmp.UI.Collections.FavouritesCollectionUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.Collections.FavouritesCollectionUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.Collections.FavouritesCollectionUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.Collections.LoadMetadataCollectionUI">
             <summary>
             This collection Shows all your data load configurations.  Each load configuration (LoadMetadata) is associated with 1 or more Catalogues. But each Catalogue can only have one load configuration
             
             <para>Loads are made up of a collection Process Tasks  (See PluginProcessTaskUI, SqlProcessTaskUI and ExeProcessTaskUI). which are run in sequence at pre defined states of the data load
             (RAW => STAGING => LIVE).</para>
             
             <para>Within the tree collection you can configure each stage in a data load (LoadMetadata).  A LoadMetadata is a recipe for how to load one or more datasets.  It should have a name and 
             description which accurately describes what it does (e.g. 'Load GP/Practice data' - 'Downloads PracticeGP.zip from FTP server, unzips and loads.  Also includes duplication resolution logic for 
             dealing with null vs 0 exact record duplication').</para>
             
             <para>A data load takes place across 3 stages (RAW, STAGING, LIVE - see UserManual.md).  Each stage can have 0 or more tasks associated with it (See PluginProcessTaskUI).  The minimum requirement
             for a data load is to have an Attacher (class which populates RAW) e.g. AnySeparatorFileAttacher for comma separated files.  This supposes that your project folder loading directory 
             already has the files you are trying to load (See <see cref="T:Rdmp.Core.Curation.ILoadDirectory"/>).  If you want to build an elegant automated solution then you may choose to use a GetFiles process such as 
             FTPDownloader to fetch new files directly off a data providers server.  After this you may need to write some bespoke SQL/Python scripts etc to deal with unclean/unloadable data or 
             just to iron out idiosyncrasies in the data.</para>
              
             <para>Each module will have 0 or more arguments, each of which (when selected) will give you a description of what it expects and an appropriate control for you to choose an option. For
             example the argument SendLoadNotRequiredIfFileNotFound on FTPDownloader explains that when ticked 'If true the entire data load process immediately stops with exit code LoadNotRequired,
             if false then the load proceeds as normal'.  This means that you can end cleanly if there are no files to download or proceed anyway on the assumption that one of the other modules will
             produce the files that the load needs.</para>
            
             <para> There are many plugins that come as standard in the RDMP distribution such as the DelimitedFlatFileAttacher which lets you load files where cells are delimited by a specific character
             (e.g. commas).  Clicking 'Description' will display the plugins instructions on how/what stage in which to use it.</para>
             
             <para>DataProvider tasks should mostly be used in GetFiles stage and are intended to be concerned with creating files in the ForLoading directory</para>
             
             <para>Attacher tasks can only be used in 'Mounting' and are concerned with taking loading records into RAW tables</para>
             
             <para>Mutilator tasks operate in the Adjust stages (usually AdjustRaw or AdjustStaging - mutilating LIVE would be a very bad idea).  These can do any task on a table(s) e.g. resolve duplication</para>
              
             <para>The above guidelines are deliberately vague because plugins can do almost anything.  For example you could have 
             a DataProvider which emailed you every time the data load began or a Mutilator which read data and sent it to a remote web service 
             (or anything!).  Always read the descriptions of plugins to make sure they do what you want. </para>
             
             <para>In addition to the plugins you can define SQL or EXE tasks that run during the load (See SqlProcessTaskUI and ExeProcessTaskUI). </para>
             </summary>
        </member>
        <member name="F:Rdmp.UI.Collections.LoadMetadataCollectionUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.Collections.LoadMetadataCollectionUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.Collections.LoadMetadataCollectionUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.Collections.MenuBuiltEventArgs">
            <summary>
            Event args for the when a context menu is finished building
            </summary>
        </member>
        <member name="P:Rdmp.UI.Collections.MenuBuiltEventArgs.Menu">
            <summary>
            The right click context menu that has just been built
            </summary>
        </member>
        <member name="P:Rdmp.UI.Collections.MenuBuiltEventArgs.Obj">
            <summary>
            The object for which the <see cref="P:Rdmp.UI.Collections.MenuBuiltEventArgs.Menu"/> was built
            </summary>
        </member>
        <member name="T:Rdmp.UI.Collections.Providers.CheckColumnProvider">
            <summary>
            Handles creating the Checks column in a tree list view where the value is populated for all models that are ICheckable and you have decided to
            run the checks.
            </summary>
        </member>
        <member name="T:Rdmp.UI.Collections.Providers.Copying.CopyPasteProvider">
            <summary>
            Enables Ctrl+C support in <see cref="T:BrightIdeasSoftware.TreeListView"/>
            </summary>
        </member>
        <member name="T:Rdmp.UI.Collections.Providers.Copying.DragDropProvider">
            <summary>
            Provides UI code for drag and drop in <see cref="T:BrightIdeasSoftware.TreeListView"/>.  The code for what is/isn't draggable onto what is determined
            by the <see cref="T:Rdmp.UI.CommandExecution.ICommandExecutionFactory"/>.
            </summary>
        </member>
        <member name="M:Rdmp.UI.Collections.Providers.Copying.DragDropProvider.GetExecutionCommandIfAnyForNonModelObjects(System.Windows.Forms.DataObject,System.Object)">
            <summary>
            Only applies to external files and other wierd types that are not Models in our tree views but that we might still want to allow drag and drop interactions for
            </summary>
            <param name="dataObject"></param>
            <param name="dropTargetModel"></param>
            <returns></returns>
        </member>
        <member name="T:Rdmp.UI.Collections.Providers.FavouriteColumnProvider">
            <summary>
            Handles creating the 'Favourite' column in <see cref="T:BrightIdeasSoftware.TreeListView"/>.  This column depicts whether a given RDMP object is a favourite
            of the user (see <see cref="T:Rdmp.Core.Curation.Data.Favourite"/>).
            </summary>
        </member>
        <member name="T:Rdmp.UI.Collections.Providers.Filtering.CatalogueCollectionFilter">
            <summary>
            Filters objects in a <see cref="T:Rdmp.UI.Collections.CatalogueCollectionUI"/> based on whether the <see cref="T:Rdmp.Core.Curation.Data.Catalogue"/> is marked
            with various flags (e.g. <see cref="P:Rdmp.Core.Curation.Data.Catalogue.IsDeprecated"/>
            </summary>
        </member>
        <member name="T:Rdmp.UI.Collections.Providers.HistoryEntry">
            <summary>
            Records and persists a users access of an <see cref="P:Rdmp.UI.Collections.Providers.HistoryEntry.Object"/> including the time (<see cref="P:Rdmp.UI.Collections.Providers.HistoryEntry.Date"/>) it was accessed
            </summary>
        </member>
        <member name="T:Rdmp.UI.Collections.Providers.HistoryProvider">
            <summary>
            Tracks user access of objects over time and stores in local persistence file <see cref="P:Rdmp.Core.ReusableLibraryCode.Settings.UserSettings.RecentHistory"/>
            </summary>
        </member>
        <member name="P:Rdmp.UI.Collections.Providers.HistoryProvider.History">
            <summary>
            Collection of objects and when they were accessed, use <see cref="M:Rdmp.UI.Collections.Providers.HistoryProvider.Add(Rdmp.Core.MapsDirectlyToDatabaseTable.IMapsDirectlyToDatabaseTable)"/> instead of modifying this list directly
            </summary>
        </member>
        <member name="P:Rdmp.UI.Collections.Providers.HistoryProvider.TrackTypes">
            <summary>
            What Types to track in <see cref="M:Rdmp.UI.Collections.Providers.HistoryProvider.Add(Rdmp.Core.MapsDirectlyToDatabaseTable.IMapsDirectlyToDatabaseTable)"/>
            </summary>
        </member>
        <member name="M:Rdmp.UI.Collections.Providers.HistoryProvider.#ctor(Rdmp.Core.Repositories.IRDMPPlatformRepositoryServiceLocator)">
            <summary>
            Creates a new history provider and loads the users history from the persistence file (<see cref="P:Rdmp.Core.ReusableLibraryCode.Settings.UserSettings.RecentHistory"/>)
            </summary>
            <param name="locator"></param>
        </member>
        <member name="M:Rdmp.UI.Collections.Providers.HistoryProvider.Save(System.Int32)">
            <summary>
            Saves into user settings the supplied number of <see cref="T:Rdmp.UI.Collections.Providers.HistoryEntry"/> (per Type)
            </summary>
            <param name="numberOfEntries">Maximum number of objects of any given <see cref="T:System.Type"/> to store</param>
        </member>
        <member name="M:Rdmp.UI.Collections.Providers.HistoryProvider.Add(Rdmp.Core.MapsDirectlyToDatabaseTable.IMapsDirectlyToDatabaseTable)">
            <summary>
            Adds the <paramref name="o"/> to the history (assuming it is one of the <see cref="P:Rdmp.UI.Collections.Providers.HistoryProvider.TrackTypes"/>).  New entry replaces any previous entries for <paramref name="o"/>.  This method causes implicit <see cref="M:Rdmp.UI.Collections.Providers.HistoryProvider.Save(System.Int32)"/>
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:Rdmp.UI.Collections.Providers.HistoryProvider.Clear">
            <summary>
            Clears the users recent history of objects accessed including in the persistence file (<see cref="P:Rdmp.Core.ReusableLibraryCode.Settings.UserSettings.RecentHistory"/>)
            </summary>
        </member>
        <member name="T:Rdmp.UI.Collections.Providers.IDColumnProvider">
            <summary>
            Handles creating the ID column in a tree list view where the ID is populated for all models of Type IMapsDirectlyToDatabaseTable and null
            for all others
            </summary>
        </member>
        <member name="T:Rdmp.UI.Collections.Providers.RenameProvider">
            <summary>
            Determines whether objects are <see cref="T:Rdmp.Core.MapsDirectlyToDatabaseTable.INamed"/> and provides UI support for changing the <see cref="P:Rdmp.Core.MapsDirectlyToDatabaseTable.INamed.Name"/>.
            </summary>
        </member>
        <member name="T:Rdmp.UI.Collections.RDMPCollectionCommonFunctionality">
            <summary>
            Provides centralised functionality for all RDMPCollectionUI classes.  This includes configuring TreeListView to use the correct icons, have the correct row 
            height, child nodes etc.
            </summary>
        </member>
        <member name="P:Rdmp.UI.Collections.RDMPCollectionCommonFunctionality.Collection">
            <summary>
            The collection if any that this <see cref="F:Rdmp.UI.Collections.RDMPCollectionCommonFunctionality.Tree"/> represents in the UI
            </summary>
        </member>
        <member name="P:Rdmp.UI.Collections.RDMPCollectionCommonFunctionality.AxeChildren">
            <summary>
            List of Types for which the children should not be returned.  By default the IActivateItems child provider knows all objects children all the way down
            You can cut off any branch with this property, just specify the Types to stop descending at and you will get that object Type (assuming you normally would)
            but no further children.
            </summary>
        </member>
        <member name="M:Rdmp.UI.Collections.RDMPCollectionCommonFunctionality.SetupColumnTracking(BrightIdeasSoftware.OLVColumn,System.Guid)">
            <summary>
            Sets up width and visibility tracking on the given <paramref name="col"/>.  Each logically different
            column should have its own unique Guid.  But it is ok for the same column (e.g. ID) in two different
            collection windows to share the same Guid in order to persist user preference of visibility of the concept.
            </summary>
            <param name="col"></param>
            <param name="g"></param>
        </member>
        <member name="M:Rdmp.UI.Collections.RDMPCollectionCommonFunctionality.SetupColumnTracking(BrightIdeasSoftware.ObjectListView,BrightIdeasSoftware.OLVColumn,System.Guid)">
            <inheritdoc cref="M:Rdmp.UI.Collections.RDMPCollectionCommonFunctionality.SetupColumnTracking(BrightIdeasSoftware.OLVColumn,System.Guid)"/>
        </member>
        <member name="M:Rdmp.UI.Collections.RDMPCollectionCommonFunctionality.SetUp(Rdmp.Core.RDMPCollection,BrightIdeasSoftware.TreeListView,Rdmp.UI.ItemActivation.IActivateItems,BrightIdeasSoftware.OLVColumn,BrightIdeasSoftware.OLVColumn)">
            <summary>
            Sets up common functionality for an RDMPCollectionUI with the default settings
            </summary>
            <param name="collection"></param>
            <param name="tree">The main tree in the collection UI</param>
            <param name="activator">The current activator, used to launch objects, register for refresh events etc </param>
            <param name="iconColumn">The column of tree view which should contain the icon for each row object</param>
            <param name="renameableColumn">Nullable field for specifying which column supports renaming on F2</param>
        </member>
        <member name="M:Rdmp.UI.Collections.RDMPCollectionCommonFunctionality.SetUp(Rdmp.Core.RDMPCollection,BrightIdeasSoftware.TreeListView,Rdmp.UI.ItemActivation.IActivateItems,BrightIdeasSoftware.OLVColumn,BrightIdeasSoftware.OLVColumn,Rdmp.UI.Collections.RDMPCollectionCommonFunctionalitySettings)">
            <summary>
            Sets up common functionality for an RDMPCollectionUI
            </summary>
            <param name="collection"></param>
            <param name="tree">The main tree in the collection UI</param>
            <param name="activator">The current activator, used to launch objects, register for refresh events etc </param>
            <param name="iconColumn">The column of tree view which should contain the icon for each row object</param>
            <param name="renameableColumn">Nullable field for specifying which column supports renaming on F2</param>
            <param name="settings">Customise which common behaviorurs are turned on</param>
        </member>
        <member name="M:Rdmp.UI.Collections.RDMPCollectionCommonFunctionality.GetToolTip(Rdmp.UI.ItemActivation.IActivateItems,System.Object,System.String@,System.String@,System.Boolean@)">
            <summary>
            Returns true if it is possible to generate tool tip style info on the given <paramref name="model"/>
            </summary>
            <param name="activator"></param>
            <param name="model"></param>
            <param name="title"></param>
            <param name="body"></param>
            <param name="isBad"></param>
            <returns></returns>
        </member>
        <member name="M:Rdmp.UI.Collections.RDMPCollectionCommonFunctionality.ExpandToDepth(System.Int32,System.Object)">
            <summary>
            Expands the current object (which must exist/be visible in the UI) to the given depth
            </summary>
            <param name="expansionDepth"></param>
            <param name="currentObject"></param>
        </member>
        <member name="M:Rdmp.UI.Collections.RDMPCollectionCommonFunctionality.GetMenuIfExists(System.Object)">
            <summary>
            Creates a menu compatible with object <paramref name="o"/>.  Returns null if no compatible menu exists.
            Errors are reported to <see cref="P:Rdmp.Core.CommandExecution.IBasicActivateItems.GlobalErrorCheckNotifier"/> (if set up).
            
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="T:Rdmp.UI.Collections.RDMPCollectionCommonFunctionalitySettings">
            <summary>
            Initialization arguments for <see cref="T:Rdmp.UI.Collections.RDMPCollectionCommonFunctionality"/>.  Use this class to control what system default behaviours
            are exhibited by a given <see cref="T:Rdmp.UI.Collections.RDMPCollectionUI"/> (tree view) e.g. whether the user can pin objects.
            </summary>
        </member>
        <member name="P:Rdmp.UI.Collections.RDMPCollectionCommonFunctionalitySettings.AddFavouriteColumn">
            <summary>
            True to add an extra column to the tree view which shows if / allows changing the favourite objects status of objects.
             <para>Defaults to true</para>
            </summary>
        </member>
        <member name="P:Rdmp.UI.Collections.RDMPCollectionCommonFunctionalitySettings.AddIDColumn">
            <summary>
            True to add an extra column (not visible by default) to the tree view which the ID property of objects that are
             <see cref="T:Rdmp.Core.MapsDirectlyToDatabaseTable.IMapsDirectlyToDatabaseTable"/>
             <para>Defaults to true</para>
            </summary>
        </member>
        <member name="P:Rdmp.UI.Collections.RDMPCollectionCommonFunctionalitySettings.SuppressChildrenAdder">
            <summary>
            False to automatically set up tree hierarchy children based on the <see cref="T:Rdmp.Core.Providers.ICoreChildProvider"/> in the
            <see cref="T:Rdmp.UI.ItemActivation.IActivateItems"/> at construction time.  True if you plan to handle object children yourself
             <para>Defaults to false</para>
            </summary>
        </member>
        <member name="P:Rdmp.UI.Collections.RDMPCollectionCommonFunctionalitySettings.SuppressActivate">
            <summary>
            False to perform the default object activation behaviour on double click.  True if you plan to handle it yourself with a custom action.
            
            <para>Defaults to false</para>
            </summary>
        </member>
        <member name="P:Rdmp.UI.Collections.RDMPCollectionCommonFunctionalitySettings.AddCheckColumn">
            <summary>
            True to add an extra column (Checks) to the tree which lets the user run checks on ICheckable things
            </summary>
        </member>
        <member name="P:Rdmp.UI.Collections.RDMPCollectionCommonFunctionalitySettings.AllowSorting">
            <summary>
            False to prevent the user sorting columns (including any new columns created by <see cref="T:Rdmp.UI.Collections.RDMPCollectionCommonFunctionality"/>)
            
            <para>Defaults to true</para>
            </summary>
        </member>
        <member name="T:Rdmp.UI.Collections.RDMPCollectionCommonFunctionalityTreeHijacker">
            <summary>
            The Tree data model that is served by TreeFactoryGetter in RDMPCollectionCommonFunctionality.  Allows overriding of default TreeListView object model
            functionality e.g. sorting.
            
            <para>This implementation involves ensuring that ordering tree nodes always respects our OrderableComparer class.  This means that even when you reorder Projects
            for example, the order of the subfolders (Cohorts, ExtractionConfigurations) doesn't change (which it would normally if only alphabetical comparing was done).</para>
            </summary>
        </member>
        <member name="T:Rdmp.UI.Collections.RDMPCollectionUI">
            <summary>
            TECHNICAL: the base class for all collections of RDMP objects in a given toolbox.
            </summary>
        </member>
        <member name="T:Rdmp.UI.Collections.SavedCohortsCollectionUI">
            <summary>
            RDMP Collection which shows all the Cohorts that have been committed to RDMP accross all Projects / Cohort Sources.
            </summary>
        </member>
        <member name="F:Rdmp.UI.Collections.SavedCohortsCollectionUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.Collections.SavedCohortsCollectionUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.Collections.SavedCohortsCollectionUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.Collections.SessionCollection">
            <summary>
            Collection of objects grouped into a session.  This is the persistence data object for <see cref="T:Rdmp.UI.Collections.SessionCollectionUI"/> which tracks which objects are included in the session e.g. between RDMP GUI restarts
            </summary>
        </member>
        <member name="M:Rdmp.UI.Collections.SessionCollection.#ctor">
            <summary>
            for persistence, do not use
            </summary>
        </member>
        <member name="T:Rdmp.UI.Collections.SessionCollectionUI">
            <summary>
            Toolbox control for storing user defined collections of objects.  Similar to <see cref="T:Rdmp.UI.Collections.FavouritesCollectionUI"/> but for limited lifetime scope.  Note that this class inherits from <see cref="T:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPUserControl"/> not <see cref="T:Rdmp.UI.Collections.RDMPCollectionUI"/>
            </summary>
        </member>
        <member name="M:Rdmp.UI.Collections.SessionCollectionUI.Add(Rdmp.Core.MapsDirectlyToDatabaseTable.IMapsDirectlyToDatabaseTable[])">
            <summary>
            Adds <paramref name="toAdd"/> to the list of objects tracked in the session
            </summary>
            <param name="toAdd"></param>
        </member>
        <member name="M:Rdmp.UI.Collections.SessionCollectionUI.Remove(Rdmp.Core.MapsDirectlyToDatabaseTable.IMapsDirectlyToDatabaseTable[])">
            <summary>
            Removes <paramref name="toRemove"/> from the list of objects tracked in the session
            </summary>
            <param name="toRemove"></param>
        </member>
        <member name="T:Rdmp.UI.Collections.TableInfoCollectionUI">
            <summary>
            Lists all the tables that are in your data repository that the RDMP knows about.  Because it is likely that you have lots of tables including many temporary tables and legacy
            tables you would rather just forget about RDMP only tracks the tables you point it at.  This is done through TableInfo objects (which each have a collection of ColumnInfos).
            These are mostly discovered and synchronised by the RDMP (e.g. through ImportSQLTable).
            
            <para>The control shows the RDMP's table reference (TableInfo), this is a pointer to the specific database/tables/credentials used to access the data in the dataset at query
            time (e.g. when doing a project extraction).</para>
            
            <para>TableInfos are not just cached schema data, they are also the launch point for configuring Lookup relationships (See LookupConfiguration), Join logic (See JoinConfiguration),
            Anonymisation etc.  </para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.Collections.TableInfoCollectionUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.Collections.TableInfoCollectionUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.Collections.TableInfoCollectionUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.Collections.TextMatchFilterWithAlwaysShowList">
            <summary>
            <see cref="T:BrightIdeasSoftware.TextMatchFilter"/> which always shows a given list of objects (the alwaysShowList).  This class is an <see cref="T:BrightIdeasSoftware.IModelFilter"/>
            for use with ObjectListView
            </summary>
        </member>
        <member name="M:Rdmp.UI.Collections.TextMatchFilterWithAlwaysShowList.Filter(System.Object)">
            <summary>
            Returns true if the object should be included in the list
            </summary>
            <param name="modelObject"></param>
            <returns></returns>
        </member>
        <member name="P:Rdmp.UI.CommandExecution.AtomicCommands.ExecuteCommandCreateNewDataExtractionProject.Folder">
            <summary>
            The folder to put the new <see cref="T:Rdmp.Core.DataExport.Data.Project"/> in.  Defaults to <see cref="F:Rdmp.Core.Curation.Data.FolderHelper.Root"/>
            </summary>
        </member>
        <member name="T:Rdmp.UI.CommandExecution.AtomicCommands.ExecuteCommandRefreshObject">
            <summary>
            Publishes the fact that changes have been made to a <see cref="T:Rdmp.Core.Curation.Data.DatabaseEntity"/> which mean that other user interfaces in the
            application may be now out of date (or no longer valid).  This will trigger the <see cref="T:Rdmp.UI.Refreshing.RefreshBus"/> to call all listeners
            </summary>
        </member>
        <member name="M:Rdmp.UI.CommandExecution.AtomicCommands.ExecuteCommandRelease.SetTarget(Rdmp.Core.Curation.Data.DatabaseEntity)">
            <summary>
            Sets the thing being released, valid targets are <see cref="T:Rdmp.Core.DataExport.Data.Project"/>, <see cref="T:Rdmp.Core.DataExport.Data.ExtractionConfiguration"/> and <see cref="T:Rdmp.Core.DataExport.Data.ISelectedDataSets"/>.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Rdmp.UI.CommandExecution.AtomicCommands.ExecuteCommandShowXmlDoc.#ctor(Rdmp.UI.ItemActivation.IActivateItems,System.String,System.String)">
            <summary>
            sets up the command to show xmldoc for the supplied <paramref name="classOrProperty"/>
            </summary>
            <param name="activator"></param>
            <param name="classOrProperty">Name of a documented class/interface/property (e.g. "CohortIdentificationConfiguration.QueryCachingServer_ID")</param>
            <param name="title"></param>
        </member>
        <member name="T:Rdmp.UI.CommandExecution.AtomicCommands.ExecuteCommandStartSession">
            <summary>
            Starts a new scoped session for one or more objects in the GUI
            </summary>
        </member>
        <member name="P:Rdmp.UI.CommandExecution.AtomicCommands.ExecuteCommandStartSession.Cancelled">
            <summary>
            True if the command was cancelled before finishing <see cref="M:Rdmp.UI.CommandExecution.AtomicCommands.ExecuteCommandStartSession.Execute"/>
            </summary>
        </member>
        <member name="T:Rdmp.UI.CommandExecution.AtomicCommands.UIFactory.AtomicCommandLinkLabel">
            <summary>
            Provides access to an IAtomicCommand including showing the command name, help text etc.  When the link label is clicked the command .Execute is run.
            </summary>
        </member>
        <member name="F:Rdmp.UI.CommandExecution.AtomicCommands.UIFactory.AtomicCommandLinkLabel.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.CommandExecution.AtomicCommands.UIFactory.AtomicCommandLinkLabel.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.CommandExecution.AtomicCommands.UIFactory.AtomicCommandLinkLabel.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.CommandExecution.ICombineableFactory">
            <summary>
            Handles the commencement of drag operations.  This involves deciding whether a given object can be dragged and parceling up the object
            into an <see cref="T:Rdmp.Core.CommandExecution.ICombineToMakeCommand"/> (which will gather relevant facts about the object).  Dropping is handled by <see cref="T:Rdmp.UI.CommandExecution.ICommandExecutionFactory"/>
            </summary>
        </member>
        <member name="M:Rdmp.UI.CommandExecution.ICombineableFactory.Create(BrightIdeasSoftware.OLVDataObject)">
            <summary>
            Creates a new packaged command initiation object from the given Object List View <paramref name="o"/> e.g. for a drag
            and drop operation.  The resulting <see cref="T:Rdmp.Core.CommandExecution.ICombineToMakeCommand"/> can be waved around over other objects to test
            for a valid command combination
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Rdmp.UI.CommandExecution.ICombineableFactory.Create(BrightIdeasSoftware.ModelDropEventArgs)">
            <summary>
            Creates a new packaged command initiation object from the given dragged object <paramref name="e"/>.  The resulting
            <see cref="T:Rdmp.Core.CommandExecution.ICombineToMakeCommand"/> can be waved around over other objects to test for a valid command combination
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Rdmp.UI.CommandExecution.ICombineableFactory.Create(System.Windows.Forms.DragEventArgs)">
            <summary>
            Creates a new packaged command initiation object from the given dragged object <paramref name="e"/>.  The resulting
            <see cref="T:Rdmp.Core.CommandExecution.ICombineToMakeCommand"/> can be waved around over other objects to test for a valid command combination
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Rdmp.UI.CommandExecution.ICombineableFactory.Create(System.IO.FileInfo[])">
            <summary>
            Creates a new packaged command initiation object from the given dragged <paramref name="files"/>.  The resulting
            <see cref="T:Rdmp.Core.CommandExecution.ICombineToMakeCommand"/> can be waved around over other objects to test for a valid command combination
            </summary>
            <param name="files"></param>
            <returns></returns>
        </member>
        <member name="M:Rdmp.UI.CommandExecution.ICombineableFactory.Create(System.Object)">
            <summary>
            Creates a new packaged command initiation object from the given dragged <paramref name="modelObject"/>.  The resulting
            <see cref="T:Rdmp.Core.CommandExecution.ICombineToMakeCommand"/> can be waved around over other objects to test for a valid command combination.
            </summary>
            <param name="modelObject">A C# object e.g. <see cref="T:Rdmp.Core.Curation.Data.Catalogue"/> that dragging has begun on</param>
            <returns></returns>
        </member>
        <member name="T:Rdmp.UI.CommandExecution.ICommandExecutionFactory">
            <summary>
            Determines whether drag and drop operations are legal or not.  The legality and action of a given drop is modeled by <see cref="T:Rdmp.Core.CommandExecution.ICommandExecution"/>
            </summary>
        </member>
        <member name="M:Rdmp.UI.CommandExecution.ICommandExecutionFactory.Create(Rdmp.Core.CommandExecution.ICombineToMakeCommand,System.Object,Rdmp.UI.CommandExecution.InsertOption)">
            <summary>
            Creates an ICommandExecution which reflects the combining of the two objects (<see cref="T:Rdmp.Core.CommandExecution.ICombineToMakeCommand"/> can even reflect a collection).  If no possible combination of the two objects is possible
            then null is returned.  If the two objects are theoretically usable with one another but the state of the one or other is illegal then an ICommandExecution will be returned by the
            IsImpossible/ReasonCommandImpossible flags will be set and it will (should!) crash if run.
            
            </summary>
            <param name="cmd"></param>
            <param name="targetModel"></param>
            <param name="insertOption"></param>
            <returns></returns>
        </member>
        <member name="M:Rdmp.UI.CommandExecution.Proposals.RDMPCommandExecutionProposal`1.ProposeExecution(Rdmp.Core.CommandExecution.ICombineToMakeCommand,`0,Rdmp.UI.CommandExecution.InsertOption)">
            <summary>
            Decides which (if any) command should be advertised/run when combining the dragged object (cmd) with the drop target
            </summary>
            <param name="cmd">Self contained class describing both the object(s) being dragged and salient facts about it e.g. if  it is a
            <see cref="T:Rdmp.Core.CommandExecution.Combining.CatalogueCombineable"/> then it will know whether the dragged <see cref="T:Rdmp.Core.Curation.Data.Catalogue"/>
            has at least one patient identifier column.</param>
            
            <param name="target"> The object the cursor is currently hovering over </param>
            <param name="insertOption">Whether the cursor is above or below or ontop of your object (if the collection the object is in supports it)</param>
            <returns></returns>
        </member>
        <member name="T:Rdmp.UI.Copying.RDMPCombineableFactory">
            <inheritdoc/>
        </member>
        <member name="T:Rdmp.UI.CredentialsUIs.DataAccessCredentialsUI">
            <summary>
            Allows you to change a stored username/password (DataAccessCredentials).  For more information about how passwords are encrypted See PasswordEncryptionKeyLocationUI
            </summary>
        </member>
        <member name="F:Rdmp.UI.CredentialsUIs.DataAccessCredentialsUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.CredentialsUIs.DataAccessCredentialsUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.CredentialsUIs.DataAccessCredentialsUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Rdmp.UI.DashboardTabs.Construction.DashboardControlFactory.Create(Rdmp.Core.Curation.Data.Dashboarding.DashboardControl)">
            <summary>
            Creates an instance of the user control described by the database record DashboardControl, including providing the control with a hydrated IPersistableObjectCollection that reflects
            the last saved state of the control.  Then mounts it on a DashboardableControlHostPanel and returns it
            </summary>
            <param name="toCreate"></param>
            <returns></returns>
        </member>
        <member name="M:Rdmp.UI.DashboardTabs.Construction.DashboardControlFactory.Create(Rdmp.Core.Curation.Data.Dashboarding.DashboardLayout,System.Type,Rdmp.UI.DashboardTabs.DashboardableControlHostPanel@)">
            <summary>
            Creates a new instance of Type t (which must be an IDashboardableControl derrived ultimately from UserControl) which is then hydrated with an empty collection and a database
            record is created which can be used to save its collection state for the lifetime of the control (allowing you to restore the state later)
            </summary>
            <param name="forLayout"></param>
            <param name="t"></param>
            <param name="theControlCreated"></param>
            <returns></returns>
        </member>
        <member name="T:Rdmp.UI.DashboardTabs.Construction.IDashboardableControl">
             <summary>
             Unlike IObjectCollectionControl (the base interface) these objects (which must have an ultimate base class UserControl) will be displayed at random locations on a DashboardLayoutUI.
             Your control will have to be able to be constructed without parameters (blank constructor) and allow the user to make meaningful changes to what is displayed (select objects etc). All
             state changes must be recorded in an IPersistableObjectCollection which will be used for persistence into the Catalogue database (do not put sensitive information into your persistence
             string).
             
             <para>The lifecycle for your control is:
             1. blank constructor called
             2. ConstructEmptyCollection called
             3. Collection hydrated out of database
             4. SetCollection called </para>
             
             <para>When the user makes important changes on your control you can use the DashboardControl.SaveCollectionState method to persist the list of objects/persistence string on your collection</para>
             
             <para> You should build your IPersistableObjectCollection to make use of the Helper for serialization.  
             You should build your IPersistableObjectCollection to handle missing/empty argument dictionaries (serialization has a null/empty persistence string)</para>
            
             <para>Since you need a blank constructor anyway this shouldn't be too hard</para>
             
             <para>Finally you should name the collection to match the UI control e.g.:</para>
             
             <para>GoodBadCataloguePieChart
             GoodBadCataloguePieChartObjectCollection</para>
             
             </summary>
        </member>
        <member name="M:Rdmp.UI.DashboardTabs.Construction.IDashboardableControl.ConstructEmptyCollection(Rdmp.Core.Curation.Data.Dashboarding.DashboardControl)">
            <summary>
            unlike regular Dashboardable controls
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rdmp.UI.DashboardTabs.DashboardableControlHostPanel">
            <summary>
            TECHNICAL: wrapper class for a hosted IDashboardableControl.  Is responsible for rendering the close box and the border of the control.
            </summary>
        </member>
        <member name="F:Rdmp.UI.DashboardTabs.DashboardableControlHostPanel.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.DashboardTabs.DashboardableControlHostPanel.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.DashboardTabs.DashboardableControlHostPanel.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Rdmp.UI.DashboardTabs.DashboardEditModeFunctionality.IsResizeLocation(System.Windows.Forms.UserControl,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Returns true if the cursor is within the bottom right 5 pixels of a control
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:Rdmp.UI.DashboardTabs.DashboardLayoutUI">
            <summary>
            Allows you to create an arrangement of IDashboardableControls on a Form that is stored in the Catalogue database and viewable by all RDMP users.  Use the task bar at the top of the 
            screen to add new controls.  Then click the spanner to drag and resize them.  Each control may also have some flexibility in how it is configured which is accessible in edit mode.
            </summary>
        </member>
        <member name="F:Rdmp.UI.DashboardTabs.DashboardLayoutUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.DashboardTabs.DashboardLayoutUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.DashboardTabs.DashboardLayoutUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.DataLoadUIs.ANOUIs.ANOTableManagement.ColumnInfoToANOTableConverterUI">
            <summary>
            Converts the contents of an existing column of your live data into anonymous identifiers.  You should only use this after backing up your database first and being very certain
            that you do not need the sensitive data being anonymised in any project extracts.
            
            <para>BACKGROUND:
            The process of anonymisation is referred to as ANO and involves moving existing identifiers into an ANOStore (separate database) and substituting in their place unique anonymous
            identifiers (there is a 1 to 1 mapping between ANO identifiers and the original values).  Each type of data (e.g. GP Code, Practice Code etc) should have its own ANOTable with
            a unique suffix such that you can more easily trace down identifiers if you ever have to deanonymise data.  </para>
            
            <para>For example if you imagine that all GP codes must be anonymised, in your data they appear as a healthboard (T - Tayside, F - Fife) followed by 3 digits.  Then your ANOTable would
            contain the (Deleted) original values e.g. 'T402' and the substituted (ANO) identifier '3622_G'.  ANO identifiers are always a sequence of random integers and letters (you can choose
            how many letters and how many characters) followed by a suffix (in this case _G to indicate that it is a GP Code).  After Finalising the configuration, your live data table would go from
            varchar(4) to varchar(6) - to accommodate the suffix and longer number of maximum digits and all codes would be replaced with ANO codes.  This lets your data users still match across
            GPs (e.g. to identify prescribing patterns in GPs) without knowing which GP is which (which would be the case with a GP Code which can be looked up on any clinical system).</para>
            
            <para>All columns that share an ANOTable (e.g. ANOGPCode) must have the same datatype (in above example this would be varchar(4)).</para>
            
            <para>USING WINDOW:
            To use this window you must be sure that you want to transform identifiable data into anonymous format.  It is advisable to never anonymise useful result data e.g. numberOfPrescriptions) and
            stick to anonymising only categorical fields that compromise patient or carer anonymity (GP Codes, Patient identifiers etc).  Also if you never intend to process or even host certain columns
            (e.g. Firstname / Surname) then you can drop the fields entirely as part of data loading through the PreLoadDiscardedColumn mechanism).</para>
            
            <para>If the data in your column already conforms to a known type that you have anonymised before (e.g. 'GP Code' in another dataset) and the datatype matches exactly (e.g. varchar(4)) then you  
            can select an existing ANOTable and push the data straight through into ANO format.</para>
            
            <para>If not then you will need to type in a name (beginning with ANO) that refers to the type (e.g. ANOPatientIdentifier) and give it a meaningful suffix (e.g. 'P' for patient) and select 
            Create ANOTable.  Adjust the Integer/Character count till the preview data looks pleasing and no errors are reported then Finalise the choice.</para>
            
            <para></para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.DataLoadUIs.ANOUIs.ANOTableManagement.ColumnInfoToANOTableConverterUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.DataLoadUIs.ANOUIs.ANOTableManagement.ColumnInfoToANOTableConverterUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.DataLoadUIs.ANOUIs.ANOTableManagement.ColumnInfoToANOTableConverterUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.DataLoadUIs.ANOUIs.PreLoadDiscarding.PreLoadDiscardedColumnUI">
            <summary>
            Lets you configure a column in a dataset as discarded during the load process (either completely - Oblivion or stored in an identifiers only area - StoreInIdentifiersDump).
             
            <para>BACKGROUND:
            PreLoadDiscardedColumn(s) are an alternative (to ANOTables) way of anonymising dataset columns.  A well implemented anonymisation protocol will include both ANOTable substitutions 
            and PreLoadDiscardedColumns.  A PreLoadDiscardedColumn is a column containing identifiable which is NOT REQUIRED by anyone to use the dataset.  For example if you have a demography
            dataset with a PatientIdentifier, Forename and Surname then you can safely configure Forename and Surname as discarded columns because you have the unique patient identifier (which
            should have an ANOTable transform on it btw) to distinguish between patients when doing linkage. </para>
            
            <para>There are 3 types of PreLoadDiscardedColumn, each is treated differently at data load time:</para>
            
            <para>DiscardedColumnDestination:
            Oblivion - This column DOES NOT exist in the live data table but is created in the RAW load bubble so that the data can be loaded from supplied files.  The data is then deleted prior
            to the migration to STAGING
            StoreInIdentifiersDump - This column DOES NOT exist in the live data table but is created in the RAW load bubble, instead of being migrated to STAGING the data is stored in an 'identifiers
            only' area (the Identifier Dump) along with the PrimaryKeys of the data, this allows you to use the identifiers in debugging or to change your mind about anonymisation later on and reintroduce
            the discarded data back into your live database. 
            Dilute - This column DOES exist in the live data table but is diluted during load e.g. date of birth 2001-05-03 might be diluted to the first of the month (I know, its insane right but hey
            governance wants it!).</para>
            
            <para>The theory is that data analysts do not need to know patient level identifiable data to do their jobs and researchers certainly don't.  This is all entirely optional and if you 
            do not want to anonymise your data repository then don't worry about this window.</para>
            
            <para>
            Before using the form, make sure you have configured at least one IdentifierDump server.  This can be done through ManageExternalServers.  Select the Identifier Dump Server. 
            Next create some PreLoadDiscardedColumn(s) that correspond to supplied fields you do not want to go through to your live database during data load.  Each column must have a
            name and SqlDataType that matches what you are trying to load.  </para>
            
            <para>If you already have a data table and you want to drop some of the columns from it then you can paste in a list of column names and any that match known columns will automatically 
            get created as the appropriate datatype/name.  After doing that you will have to manually drop the columns yourself on your server though.</para>
             
            <para> </para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.DataLoadUIs.ANOUIs.PreLoadDiscarding.PreLoadDiscardedColumnUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.DataLoadUIs.ANOUIs.PreLoadDiscarding.PreLoadDiscardedColumnUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.DataLoadUIs.ANOUIs.PreLoadDiscarding.PreLoadDiscardedColumnUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.DataLoadUIs.CreateNewLoadMetadataUI">
            <summary>
            There is a M-1 relationship between Catalogues (datasets) and LoadMetadata (data load recipes).  This window is accessed by right clicking a Catalogue and choosing
            to configure its LoadMetadata (how data is loaded).  You can either select an existing LoadMetadata (which will probably need modifying such that it correctly loads
            the new table in addition to what other datasets it already loaded.  Or you can create a new LoadMetadata and create a load from scratch.
            
            <para>Once selected you will be taken to the dataset load configuration screen (See LoadMetadataUI)</para>
            
            </summary>
        </member>
        <member name="F:Rdmp.UI.DataLoadUIs.CreateNewLoadMetadataUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.DataLoadUIs.CreateNewLoadMetadataUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.DataLoadUIs.CreateNewLoadMetadataUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.DataLoadUIs.LoadMetadataUIs.ChooseLoadDirectoryUI">
            <summary>
            Allows you to either create a new LoadDirectory or point the software to an existing one.  These folders have a special hierarchy including Cache,ForArchiving, ForLoading, 
            Executables etc.  In almost all cases you want to have a different directory for each load, this prevents simultaneous loads tripping over one another.
            
            <para>To create a new directory with all the appropriate folders and example configuration files enter the path to an empty folder.  If the folder does not exist yet it will be created
            when you click Ok.</para>
            
            <para>Alternatively if you want to reuse an existing directory (for example if you have accidentally deleted your old data load configuration and lost the reference to its folder) then
            you can select the 'use existing' checkbox and enter the path to the existing folder (this should be the root folder i.e. not the Data folder).  This will run Checks on the folder
            to confirm that it is has an intact structure and then use it for your load.</para>
            
            </summary>
        </member>
        <member name="P:Rdmp.UI.DataLoadUIs.LoadMetadataUIs.ChooseLoadDirectoryUI.Result">
            <summary>
            The users final choice of project directory, also check DialogResult for Ok / Cancel
            </summary>
        </member>
        <member name="F:Rdmp.UI.DataLoadUIs.LoadMetadataUIs.ChooseLoadDirectoryUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.DataLoadUIs.LoadMetadataUIs.ChooseLoadDirectoryUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.DataLoadUIs.LoadMetadataUIs.ChooseLoadDirectoryUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.DataLoadUIs.LoadMetadataUIs.LoadDiagram.LoadDiagramColumnNode">
            <summary>
            Depicts a column in a given DLE <see cref="T:Rdmp.Core.Curation.Data.LoadBubble"/>.  Given the Create/Destroy nature of load stages this
            node may or may not map to an existing column in the database.
            </summary>
        </member>
        <member name="T:Rdmp.UI.DataLoadUIs.LoadMetadataUIs.LoadDiagram.LoadDiagramDatabaseNode">
            <summary>
            Depicts a database in a given DLE <see cref="T:Rdmp.Core.Curation.Data.LoadBubble"/>.  Given the Create/Destroy nature of load stages this
            database may or may not map to an existing database.
            </summary>
        </member>
        <member name="T:Rdmp.UI.DataLoadUIs.LoadMetadataUIs.LoadDiagram.LoadDiagramServerNode">
            <summary>
            Depicts a server in a given DLE <see cref="T:Rdmp.Core.Curation.Data.LoadBubble"/> (e.g. the RAW server or the STAGING/LIVE server).
            </summary>
        </member>
        <member name="T:Rdmp.UI.DataLoadUIs.LoadMetadataUIs.LoadDiagram.LoadDiagramTableNode">
            <summary>
            Depicts a table in a given DLE <see cref="T:Rdmp.Core.Curation.Data.LoadBubble"/>.  Given the Create/Destroy nature of load stages this
            node may or may not map to an existing table in the database.
            </summary>
        </member>
        <member name="T:Rdmp.UI.DataLoadUIs.LoadMetadataUIs.LoadDiagram.LoadDiagramUI">
            <summary>
             This control functions in two ways. 
            
            <para>Firstly it allows you to visualise both the anticipated tables that will be created during a data load (See LoadMetadataUI) including columns which vary by stage e.g. hic_validFrom which
            is computed and only in LIVE and primary keys which are unconstrained (nullable) in RAW.</para>
            
            <para>Secondly it allows you to (on demand) view the actual state of the tables as they exist now.  This is done by clicking 'Fetch State'. Note that RAW and STAGING will likely not
            exist at the time you are viewing this control (design time) as they are created during the load as part of normal execution and dropped at the end.  The diagram also shows the LIVE
            database and tables that are associated with the load.</para>
            
            <para>You can click check the state at any time even during a load or after a failed load (Where bubbles RAW and STAGING will be left for you to debug).  Double clicking a Table will allow you
            to see what is in the table and let you run diagnostic SQL you type to run on it (this lets you debug what went wrong with your load / the data you were supplied with).</para>
            
            <para>The way that tables/databases are determined is via UNIONing all the TableInfos of all the Catalogues that are associated with the load (including any linked lookup tables).  See 
            LoadMetadataCollectionUI for changing this.</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.DataLoadUIs.LoadMetadataUIs.LoadDiagram.LoadDiagramUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.DataLoadUIs.LoadMetadataUIs.LoadDiagram.LoadDiagramUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.DataLoadUIs.LoadMetadataUIs.LoadDiagram.LoadDiagramUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.DataLoadUIs.LoadMetadataUIs.LoadDiagram.StateDiscovery.LoadStateUI">
            <summary>
            Tells you what state the LoadDiagram is in.  This starts at 'Unknown' which means no database requests have been sent and the visible tables are the 'Anticipated' state of the tables
            during a load.  Checking the state when RAW/STAGING do not exist indicates that no load is underway and that the last load was succesful (or RAW/STAGING were cleaned up after a problem
            was resolved).  The final state is 'Load Underway/Crashed' this indicates that RAW and/or STAGING exist which means that either a data load is in progress (not nesessarily started by you)
            or one has completed with an error and has therefore left RAW/STAGING for debugging (See LoadDiagram).
            </summary>
        </member>
        <member name="F:Rdmp.UI.DataLoadUIs.LoadMetadataUIs.LoadDiagram.StateDiscovery.LoadStateUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.DataLoadUIs.LoadMetadataUIs.LoadDiagram.StateDiscovery.LoadStateUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.DataLoadUIs.LoadMetadataUIs.LoadDiagram.StateDiscovery.LoadStateUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.DataLoadUIs.LoadMetadataUIs.LoadDiagram.StateDiscovery.UnplannedTable">
            <summary>
            Depicts a table which was found in the loading tables of a DLE load.  These tables are unexpected (i.e. not created by RDMP).  They may be
            temporary tables created as part of load scripts or they may reflect other ongoing/crashed loads (if in STAGING).
            </summary>
        </member>
        <member name="T:Rdmp.UI.DataLoadUIs.LoadMetadataUIs.LoadMetadataUI">
            <summary>
            Allows you to record a user friendly indepth description for your LoadMetadata, how it works and how to use it/maintain it.
            </summary>
        </member>
        <member name="F:Rdmp.UI.DataLoadUIs.LoadMetadataUIs.LoadMetadataUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.DataLoadUIs.LoadMetadataUIs.LoadMetadataUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.DataLoadUIs.LoadMetadataUIs.LoadMetadataUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.DataLoadUIs.LoadMetadataUIs.LoadProgressAndCacheUIs.CacheProgressUI">
            <summary>
            Caching is method by which long term transfer tasks take place in the RDMP.  These are usually of files and are expected to run all the time (up to 24/7).  Cached data must always be 
            temporal (i.e. a given set of files must correspond to a specific time) such that cache requests for a specific date/time do not vary in real time.  The exact implementation of any
            caching task is done through a Pipeline.  Since caching is super bespoke, it is anticipated that you will have written your own caching data classes for use in your pipeline.
            
            <para>Clicking 'Configure Caching Pipeline' will let you setup what happens during the caching activity.</para>
            
            <para>Changing the 'Lag Period' to a positive number will indicate a period of time in which to NOT cache data (e.g. if you set it to 30 days then caching will always be suspended when it 
            has cached up to 1 month ago).</para>
            
            <para>Setting a 'Permission Window' will create a restriction on the times of day in which caching can take place (e.g. between midnight and 4am only).</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.DataLoadUIs.LoadMetadataUIs.LoadProgressAndCacheUIs.CacheProgressUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.DataLoadUIs.LoadMetadataUIs.LoadProgressAndCacheUIs.CacheProgressUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.DataLoadUIs.LoadMetadataUIs.LoadProgressAndCacheUIs.CacheProgressUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.DataLoadUIs.LoadMetadataUIs.LoadProgressAndCacheUIs.Diagrams.LoadProgressAnnotation">
            <summary>
            Line on a <see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart"/> indicating how much progress has been made towards various <see cref="T:Rdmp.Core.Curation.Data.LoadProgress"/> / <see cref="T:Rdmp.UI.DataLoadUIs.LoadMetadataUIs.LoadProgressAndCacheUIs.CacheProgressUI"/>
            goals.
            </summary>
        </member>
        <member name="T:Rdmp.UI.DataLoadUIs.LoadMetadataUIs.LoadProgressAndCacheUIs.Diagrams.LoadProgressDiagramUI">
            <summary>
            Allows you to visualise how much data has been loaded for a given LoadProgress based DLE job (LoadMetadata).  The top graph shows row counts over time
            according to the last DQE run on the dataset (a stack graph with a seperate track for each Catalogue in the load - for when you load multiple datasets
            from the same cached data source).  The bottom graph shows counts of cache fetch failures (periods of dataset time where no data could be fetched from 
            the origin because of data corruption or the data simply not being available for that period) and cache directory file counts (number of files sat in 
            Cache by date awaiting loading by DLE).
            </summary>
        </member>
        <member name="F:Rdmp.UI.DataLoadUIs.LoadMetadataUIs.LoadProgressAndCacheUIs.Diagrams.LoadProgressDiagramUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.DataLoadUIs.LoadMetadataUIs.LoadProgressAndCacheUIs.Diagrams.LoadProgressDiagramUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.DataLoadUIs.LoadMetadataUIs.LoadProgressAndCacheUIs.Diagrams.LoadProgressDiagramUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.DataLoadUIs.LoadMetadataUIs.LoadProgressAndCacheUIs.LoadProgressUI">
            <summary>
            Let's you configure the settings of a LoadProgress (see LoadProgress) including how many days to ideally load in each data load, what date has currently been loaded up to etc.
            
            <para>Each LoadProgress can be tied to a Cache progress.  If you are using a LoadProgress without a cache then it is up to your load implementation to respect the time period being loaded 
            (e.g. when using RemoteTableAttacher you should make use of the @startDate and @endDate parameters are in your fetch query).  See CacheProgressUI for a description of caching and 
            permission windows.</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.DataLoadUIs.LoadMetadataUIs.LoadProgressAndCacheUIs.LoadProgressUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.DataLoadUIs.LoadMetadataUIs.LoadProgressAndCacheUIs.LoadProgressUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.DataLoadUIs.LoadMetadataUIs.LoadProgressAndCacheUIs.LoadProgressUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.DataLoadUIs.LoadMetadataUIs.LoadProgressAndCacheUIs.PermissionWindowUI">
            <summary>
            Restricts the times of day in which caching can take place (e.g. from midnight-4am only).  For a description of what caching is see CacheProgressUI or the RDMP user manual.  Format is
            in standard TimeSpan.TryParse format (see https://msdn.microsoft.com/en-us/library/3z48198e(v=vs.110).aspx or search online for 'TimeSpan.TryParse c#') each TimeSpan can be followed by
            a comma and then another TimeSpan format e.g.  '10:20:00-10:40:00,11:20:00-11:40:00' would create a permission window that could download from the cache between 10:20 AM and 10:40 AM then
            caching wouldn't be allowed again until 11:20am to 11:40am.
            </summary>
        </member>
        <member name="F:Rdmp.UI.DataLoadUIs.LoadMetadataUIs.LoadProgressAndCacheUIs.PermissionWindowUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.DataLoadUIs.LoadMetadataUIs.LoadProgressAndCacheUIs.PermissionWindowUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.DataLoadUIs.LoadMetadataUIs.LoadProgressAndCacheUIs.PermissionWindowUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.DataLoadUIs.LoadMetadataUIs.LoadStageIconUI">
            <summary>
            Icon for describing something relates to a given data LoadStage (e.g. AdjustRaw, AdjustStaging etc)
            </summary>
        </member>
        <member name="F:Rdmp.UI.DataLoadUIs.LoadMetadataUIs.LoadStageIconUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.DataLoadUIs.LoadMetadataUIs.LoadStageIconUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.DataLoadUIs.LoadMetadataUIs.LoadStageIconUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.DataLoadUIs.LoadMetadataUIs.ProcessTasks.ExeProcessTaskUI">
            <summary>
            Lets you view/edit an Executable file load task.  This exe will be run at the appropriate time in the data load (with the arguments displayed in the black box).
            </summary>
        </member>
        <member name="F:Rdmp.UI.DataLoadUIs.LoadMetadataUIs.ProcessTasks.ExeProcessTaskUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.DataLoadUIs.LoadMetadataUIs.ProcessTasks.ExeProcessTaskUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.DataLoadUIs.LoadMetadataUIs.ProcessTasks.ExeProcessTaskUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.DataLoadUIs.LoadMetadataUIs.ProcessTasks.PluginProcessTaskUI">
            <summary>
            Lets you view/edit a single data load module.  This is a pre-canned class e.g. FTPDownloader or a custom plugin you have written.  You should ensure
            that the Name field accurately describes (in plenty of detail) what the module/script is intended to do.  
            
            <para>These can be either:
            Attacher - Run the named C# class (which implements the interface IAttacher).  This only works in Mounting stage.  This usually results in records being loaded into the RAW bubble (e.g. AnySeparatorFileAttacher)
            DataProvider - Run the named C# class (which implements IDataProvider).  Normally this runs in GetFiles but really it can run on any Stage.  This usually results in files being created or modified (e.g. FTPDownloader)
            MutilateDataTable - Run the named C# class (which implements IMutilateDataTables).  Runs in any Adjust/PostLoad stage.  These are dangerous operations which operate pre-canned functionality directly
            on the DataTable being loaded e.g. resolving primary key collisions (which can result in significant data loss if you have not configured the correct primary keys on your dataset).</para>
            
            <para>Each C# module based task has a collection of arguments which each have a description of how they change the behaviour of the module.  Make sure to click on each Argument in turn
            and set an appropriate value such that you understand ahead of time what the module will do when it is run.</para>
            
            <para>The data load engine design (RAW,STAGING,LIVE) makes it quite difficult to corrupt your data without realising but you should still adopt best practice: Do as much data modification
            in the RAW bubble (i.e. not as a post load operation), only use modules you understand the function of and try to restrict the scope of your adjustment operations (it is usually better
            to write an extraction transform than to transform the data during load in case there is a mistake or a researcher wants uncorrupted original data).</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.DataLoadUIs.LoadMetadataUIs.ProcessTasks.PluginProcessTaskUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.DataLoadUIs.LoadMetadataUIs.ProcessTasks.PluginProcessTaskUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.DataLoadUIs.LoadMetadataUIs.ProcessTasks.PluginProcessTaskUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.DataLoadUIs.LoadMetadataUIs.ProcessTasks.SqlProcessTaskUI">
            <summary>
            Lets you view/edit a single SQL file execution load task.  This SQL script will be run at the appropriate time in the data load (depending on which stage it is at and the order in the
            stage.  The SQL will be executed on the database/server that corresponds to the stage.  So an Adjust RAW script cannot modify STAGING since those tables won't even exist at the time of
            execution and might even be on a different server.  
            
            <para>You should avoid modifying Live tables directly with SQL since it circumvents the 'no duplication', 'RAW->STAGING->LIVE super transaction' model of RDMP.</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.DataLoadUIs.LoadMetadataUIs.ProcessTasks.SqlProcessTaskUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.DataLoadUIs.LoadMetadataUIs.ProcessTasks.SqlProcessTaskUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.DataLoadUIs.LoadMetadataUIs.ProcessTasks.SqlProcessTaskUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Rdmp.UI.DataLoadUIs.ModuleUIs.AdjustColumnDataTypesUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.DataLoadUIs.ModuleUIs.AdjustColumnDataTypesUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.DataLoadUIs.ModuleUIs.AdjustColumnDataTypesUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Rdmp.UI.DataLoadUIs.ModuleUIs.DatabaseColumnRequestUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.DataLoadUIs.ModuleUIs.DatabaseColumnRequestUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.DataLoadUIs.ModuleUIs.DatabaseColumnRequestUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.DataLoadUIs.ModuleUIs.DataFlowSources.ExplicitColumnTypeUI">
            <summary>
            Allows you to specify an explicit C# datatype for an RDMP data flow component to use for a given named column.  For example if you are trying to load a CSV file with values 
            like "291","195" but they know that some codes have leading zeros "012" and wish to preserve this leading 0s so they can explicitly define the column as being a string. 
            </summary>
        </member>
        <member name="F:Rdmp.UI.DataLoadUIs.ModuleUIs.DataFlowSources.ExplicitColumnTypeUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.DataLoadUIs.ModuleUIs.DataFlowSources.ExplicitColumnTypeUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.DataLoadUIs.ModuleUIs.DataFlowSources.ExplicitColumnTypeUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.DataLoadUIs.ModuleUIs.DataFlowSources.ExplicitTypingCollectionUI">
            <summary>
            ExplicitlyTypedColumns are an expectation that a column of a given name will appear in the data flow pipeline DataTable and a notification to the RDMP that it must be given the
            supplied C# Type instead of RDMP infering Types or leaving it as the default DataColumn Type as usually happens.  You should only explicitly type a few columns and usually only 
            where they are likely to be confused e.g. if you have a column with important leading zeroes that should be treated as a string despite looking like an int.  If you have too
            many explicitly typed columns it can limit your Pipelines reusability with novel files you might receive in the future.
            
            <para>For a use case of when this is useful see ExplicitColumnTypeUI (this form hosts a collection of these controls).</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.DataLoadUIs.ModuleUIs.DataFlowSources.ExplicitTypingCollectionUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.DataLoadUIs.ModuleUIs.DataFlowSources.ExplicitTypingCollectionUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.DataLoadUIs.ModuleUIs.DataFlowSources.ExplicitTypingCollectionUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.DataLoadUIs.ModuleUIs.DataProvider.WebServiceConfigurationUI">
             <summary>
             Allows you to specify and store an encrypted set of credentials in the Catalogue database for a web service endpoint.  The exact interpretation of Endpoint, MaxBufferSize and 
             MaxReceivedMessageSize are up to the specific use case of the dialog.  The dialog allows [DemandsInitialization] arguments of plugin classes to securely store the location of 
             a web service in the Catalogue database.
            </summary>
        </member>
        <member name="F:Rdmp.UI.DataLoadUIs.ModuleUIs.DataProvider.WebServiceConfigurationUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.DataLoadUIs.ModuleUIs.DataProvider.WebServiceConfigurationUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.DataLoadUIs.ModuleUIs.DataProvider.WebServiceConfigurationUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.DataLoadUIs.ModuleUIs.LoadProgressUpdating.DataLoadProgressUpdateInfoUI">
            <summary>
            A LoadProgress object can be used as part of a LoadMetadata to record how far through a longitudinal loading task a load is (See LoadProgressUI).  This dialog lets you specify 
            how to update that LoadProgress after a succesful data load.  By default the data load engine will identify a window of days it wants to load (always in the past) e.g. 2001-01-01 to 
            2001-01-29 and the load will execute with that window available to load components.  However sometimes a load component will only find part of that date range is available e.g. the
            dataset fetched only contains data up until 2001-01-15.  In this case the component needs to update the progress (on success of data load) to the 2001-01-15 date instead.  This 
            dialog lets you do that by specifying one of 4 update strategies:
            
            <para> UseMaxRequestedDay - uses the upper limit of the load window i.e. 2001-01-29 
             ExecuteScalarSQLInRAW - allows you to execute an SQL query in RAW bubble to determine the max date e.g. 'Select MAX(dtCreated) from MyTable'.  In the above example this would be 2001-01-15
             ExecuteScalarSQLInLIVE - same as above except the SQL query is executed against the LIVE dataset post load (this is the super set of all existing dataset records + the records loaded in the data load)
             DoNothing - The load progress is not updated, use this only if you have multiple components that share the same LoadProgress and you only want the last one to register for the progress update</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.DataLoadUIs.ModuleUIs.LoadProgressUpdating.DataLoadProgressUpdateInfoUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.DataLoadUIs.ModuleUIs.LoadProgressUpdating.DataLoadProgressUpdateInfoUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.DataLoadUIs.ModuleUIs.LoadProgressUpdating.DataLoadProgressUpdateInfoUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.DataQualityUIs.DQEExecutionControlUI">
            <summary>
            Form for performing Data Quality Engine executions on a chosen Catalogue. Opening the form will trigger a series of pre run checks and once these have successfully completed you
            can then begin the execution by clicking the Start Execution button.
            
            <para>While the execution is happening you can view the progress on the right hand side.</para>
            
            <para>To view the results of the execution Right Click on the relevant catalogue and select View DQE Results.</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.DataQualityUIs.DQEExecutionControlUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.DataQualityUIs.DQEExecutionControlUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.DataQualityUIs.DQEExecutionControlUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.DataRelease.DataReleaseUI">
            <summary>
            The ultimate end point of the Data Export Manager is the provision of a packaged up Release of all the anonymised datasets for all the cohort(s) (e.g. 'Cases' and 'Controls') in
            a research project.  There is no going back once you have sent the package to the researcher, if you have accidentally included the wrong datasets or supplied identifiable data
            (e.g. in a free text field) then you are in big trouble.  For this reason the 'Release' process is a tightly controlled sequence which the RDMP undertakes to try to reduce error.
            
            <para>In this control you will see all the currently selected datasets in a project's configuration(s) and the state of the dataset extraction (from the RDMP's perspective) as well 
            as the status of the 'Environment' (Ticketing System).  Right clicking on a dataset will give you options appropriate to its state.</para>
            
            <para>Extraction of large datasets can take days or weeks and a project extraction is an ongoing exercise.  It is possible that by the time you come to release a project some of the
            early datasets have been changed or the files deleted etc.  The status of each extracted dataset is shown in the list box.  You can only do an extraction once all the datasets in
            the configuration are releasable.</para>
            
            <para>In addition to verifying the datasets you can tie the RDMP into your ticketing system.  For example if you have tickets for each project extraction with stages for validation
            (so that data analysts can log time against validation and sign off on it etc) then you can setup Data Export Manager when the 'Release' Ticket is at a certain state (e.g. validated).
            To configure a ticketing system see TicketingSystemConfigurationUI.</para>
            
            <para>If you haven't configured a Ticketing System then you shouldn't have to worry about the Environment State.</para>
            
            <para> Once you have selected all the configurations you want to release click Release.</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.DataRelease.DataReleaseUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.DataRelease.DataReleaseUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.DataRelease.DataReleaseUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.DataViewing.ViewSQLAndResultsWithDataGridUI">
            <summary>
            Allows you to view and execute an SQL query generated by RDMP, this could be a preview of the top 100 records of a TableInfo or an extract from an Aggregate Configuration graph
            The purpose is to give you a quick view as to the content of the table/column without having to launch 'Sql Management Studio' or whatever other tool you use to query your data
            repository.  You can edit the SQL as you need but only a single DataTable return is supported, this form is not a replacement for an SQL IDE.
            
            <para>The query is sent using DataAccessContext.InternalDataProcessing</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.DataViewing.ViewSQLAndResultsWithDataGridUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.DataViewing.ViewSQLAndResultsWithDataGridUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.DataViewing.ViewSQLAndResultsWithDataGridUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.DoTransparencyProperly">
            <summary>
            Helper for positioning controls on top of one another (with transparent backgrounds)
            </summary>
        </member>
        <member name="M:Rdmp.UI.DoTransparencyProperly.ThisHoversOver(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Positions <paramref name="controlThatHovers"/> on top of <paramref name="whatItHoversOver"/> and
            sets the background colour of the controlThatHovers to Transparent.
            </summary>
            <param name="controlThatHovers"></param>
            <param name="whatItHoversOver"></param>
        </member>
        <member name="T:Rdmp.UI.ExceptionCounterUI">
            <summary>
            Small UI control for capturing and displaying Exceptions that should not be directly brought directly to the users attention
            but which should none the less be visible.
            </summary>
        </member>
        <member name="T:Rdmp.UI.ExtractionUIs.ExtractionInformationUI">
             <summary>
             The RDMP is intended to curate research datasets, including which recording which columns in a given dataset are extractable and the Governance level for those columns (e.g. can
             anyone get the column or are special approvals required).  This window lets you decide whether a CatalogueItem is extractable, optionally provide a transform (e.g. UPPER() etc),
             curate filter logic, flag it as the datasets extraction identifier (e.g. PatientId).
             
             <para>Start by deciding whether a given Column is extractable by ticking Yes or No.  Then choose an extraction category, a column will only appear in DataExportManager as extractable if
             it is Core, Supplemental or SpecialApprovalRequired (Internal and Deprecated columns cannot be extracted).  </para>
             
             <para>You should have a single field across all your datasets which identifies your cohorts (patients) e.g. PatientId.  If this column contains PatientIds then tick 'Is Extraction 
             Identifier', very occasionally you might have multiple columns containing PatientIds e.g. Birth records might have a column for MotherId and a column for BabyId both of which contain
             PatientIds (if this is the case then just tick both as 'Is Extraction Identifier'.  </para>
             
             <para>You can edit the Extraction Code which is a single line of SELECT SQL.  If you change this to include a function or something else make sure to include an alias 
             (e.g. 'UPPER(MyTable.MyColumn) as MyColumn')</para>
             
             <para>You can also view the Filters that are associated with this column.  These are centrally curated and validated (Make sure to validate your filters!!!) pieces of WHERE logic which
             can be used in Data Extraction and Cohort Identification with the dataset.  For example the Prescribing.DrugCode column could have 2 filters 'Prescription Painkillers' and 
             'Diabetes Drugs'.  Filters should be adequately documented with name and description such that a data analyst can use them without necessarily understanding the SQL implementation.
             For more information on configuring Filters see ExtractionFilterUI.</para>
             
             <para>If you tick the HashOnDataRelease column then the transform/column will be wrapped by the Hashing Algorithm (if any - See ConfigureHashingAlgorithm) when it comes to data extraction.
             Use this only if you have a hashing system implemented.  Hashing is separate from identifier allocation such as ANO (See ANOTable) in that its done at extraction
             time in SQL only and the exact implementation is up to you.</para>
            
             <para></para>
             </summary>
        </member>
        <member name="M:Rdmp.UI.ExtractionUIs.ExtractionInformationUI.SubstituteQueryEditorTextIfContainsLineComments">
            <summary>
            Scans the query text for line comments and replaces any with block comments so the query will still work when flattened to a single line
            </summary>
        </member>
        <member name="F:Rdmp.UI.ExtractionUIs.ExtractionInformationUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.ExtractionUIs.ExtractionInformationUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.ExtractionUIs.ExtractionInformationUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.ExtractionUIs.FilterUIs.ExtractionFilterUI">
            <summary>
            One major problem with research data curation/provision is that data analysts who routinely work with datasets build up an in-depth knowledge of the data and how to identify 
            interesting subsets (e.g. 'How to identify all lab test codes for Creatinine').  This can involve complicated SQL which can end up buried in undocumented extraction scripts 
            or kept in the head of the data analyst and lost if he ever leaves the organisation.
            
            <para>RDMP Filters are an attempt to reduce this risk by centralising SQL 'WHERE' logic into clearly defined and documented reusable blocks (called Filters).  These named filters can
            then be combined/used by new data analyst who don't necessarily understand the exact implementation.  For this to work it is vital that you accurately name and describe what each
            filter does, including any peculiarities and that you robustly test the SQL in the implementation to make sure it actually works.</para>
            
            <para>To write the actual implementation type into the SQL prompt (omitting the 'WHERE' keyword).  For example you could create a Filter called 'Active Records Only' with a description
            'This filter throws out all records which have expired because a clinician has deleted them or the patient has withdrawn consent' and implmenetation SQL of 'MyTable.IActive=1'. Make
            sure to fully specify the names of columns in your WHERE SQL incase the filter is used as part of a join across multiple tables with columns that contain the same name (e.g. it might
            be that many other tables also include a field called IsActive).  Make sure you fully explore your dataset before finalising your filter and consider edge cases e.g. what does it mean
            when IsActive is null? are there any values above 1? and if so what does that mean?</para>
            
            <para>If you want to parameterise your query (e.g. a filter for 'Approved name of drug like X') then just type a parameter like you normally would e.g. 'Prescription.DrugName like @drugName'
            and save. This will automatically create an empty parameter (See ParameterCollectionUI).</para>
            </summary>
        </member>
        <member name="M:Rdmp.UI.ExtractionUIs.FilterUIs.ExtractionFilterUI.SubstituteQueryEditorTextIfContainsLineComments">
            <summary>
            Scans the query text for line comments and replaces any with block comments so the query will still work when flattened to a single line
            </summary>
        </member>
        <member name="P:Rdmp.UI.ExtractionUIs.FilterUIs.ExtractionFilterUI.Catalogue">
            <summary>
            Used for publishing IFilters created here back to the main Catalogue
            </summary>
        </member>
        <member name="F:Rdmp.UI.ExtractionUIs.FilterUIs.ExtractionFilterUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.ExtractionUIs.FilterUIs.ExtractionFilterUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.ExtractionUIs.FilterUIs.ExtractionFilterUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.ExtractionUIs.FilterUIs.FilterGraphObjectCollection">
            <summary>
            Builds a query to fetch data that matches a given <see cref="T:Rdmp.Core.Curation.Data.IFilter"/>
            </summary>
        </member>
        <member name="T:Rdmp.UI.ExtractionUIs.FilterUIs.FilterGraphUI">
            <summary>
            Shows a given Aggregate Graph with an additional IFilter applied.  This can be used for checking that a filter SQL is working how you intend by giving you a view you are already 
            familiar with (the graph you created) but with the addition of the filter.  You can also launch the graph normally (See AggregateGraph) to see a side by side comparison
            </summary>
        </member>
        <member name="F:Rdmp.UI.ExtractionUIs.FilterUIs.FilterGraphUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.ExtractionUIs.FilterUIs.FilterGraphUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.ExtractionUIs.FilterUIs.FilterGraphUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.ExtractionUIs.FilterUIs.ParameterUIs.ExtractionFilterParameterSetUI">
            <summary>
            Extraction Filter Parameter Sets are 'known good values' of 1 or more parameters of an extraction filter.  For example you might have a filter 'Hospitalised with conditions'
            with a parameter @listOfConditionCodes, then you can have multiple ExtractionFilterParameterSets 'Dementia Conditions', 'High Blood Pressure', 'Coronary Heart Disease' which
            are currated lists of codes that are effectively just a 'good value' for the main filter.
            
            <para>This user interface lets you edit one of these.</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.ExtractionUIs.FilterUIs.ParameterUIs.ExtractionFilterParameterSetUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.ExtractionUIs.FilterUIs.ParameterUIs.ExtractionFilterParameterSetUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.ExtractionUIs.FilterUIs.ParameterUIs.ExtractionFilterParameterSetUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.ExtractionUIs.FilterUIs.ParameterUIs.ParameterCollectionUI">
            <summary>
            Filters, Aggregates, Extractions etc can all make use of SQL parameters (e.g. @drugName).  This dialog appears any time you are viewing/editing the parameters associated with a
            given parameter use case.  If you do not understand what SQL parameters (aka variables) are then you should read up on this before using this control.
            
            <para>The following help instructions will relate to the context of editing a Filter and configuring some parameters but is equally applicable to configuring global parameters on an 
            extraction or in a cohort identification configuration etc.</para>
            
            <para>The first time you use a parameter in your filter (e.g. @drugName), a template SQL Parameter will be created (probably as a varchar(50)).  You should adjust the Declare SQL such
            that it is the correct data type for your filter and give it a default value which illustrates how it should be used when deployed as part of cohort identification or data extraction.
            Finally provide a description of what the parameter is supposed to do in the Comment section.  </para>
            
            <para>Parameters exist at multiple levels within the system and it is possible that you are editing parameters that are not at the top level.  For example, you are configuring an extract
            in which the global parameter @drugCodesOfInterest is declared for all datasets in the project and you have just opened a Filter.  In this context you will see some greyed out
            'Overriding' parameters, these are available for use at lower levels but cannot be changed (because the new Value would be applied to all users of the global i.e. all datasets in the
            extraction, not just the one you are editing).</para>
            
            <para>So to return to the above example, if you create a filter 'Prescriptions collected after date X' with the SQL 'dateCollected > @dateOfCollection'.  When you save the Filter the 
            parameter @dateOfCollection will be created (unless there is already a global with the same name/type).</para>
            
            <para>Sometimes the Globals are explicit fixed value parameters for example the @ProjectNumber in a data extraction, in this case the Parameter cannot be modified period.</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.ExtractionUIs.FilterUIs.ParameterUIs.ParameterCollectionUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.ExtractionUIs.FilterUIs.ParameterUIs.ParameterCollectionUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.ExtractionUIs.FilterUIs.ParameterUIs.ParameterCollectionUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.ExtractionUIs.FilterUIs.ParameterUIs.ParameterEditorScintillaControlUI">
            <summary>
            Part of ParameterCollectionUI, this control shows the SQL generated by the current configuration of SQL parameters.  You can edit the SQL in areas that do not have a grey background
            (these reflect locked parameters - see ParameterCollectionUI).  editing the SQL changes the corresponding SQL parameter in ParameterCollectionUI.  You cannot add new Parameters by
            directly typing in new SQL or change the line number of in the control (basically you should stick to editing the name/declaration and the value text.
            </summary>
        </member>
        <member name="M:Rdmp.UI.ExtractionUIs.FilterUIs.ParameterUIs.ParameterEditorScintillaControlUI.RegenerateSQL">
            <summary>
            Updates the Sql code for the current state of the <see cref="P:Rdmp.UI.ExtractionUIs.FilterUIs.ParameterUIs.ParameterEditorScintillaControlUI.Options"/> 
            </summary>
        </member>
        <member name="F:Rdmp.UI.ExtractionUIs.FilterUIs.ParameterUIs.ParameterEditorScintillaControlUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.ExtractionUIs.FilterUIs.ParameterUIs.ParameterEditorScintillaControlUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.ExtractionUIs.FilterUIs.ParameterUIs.ParameterEditorScintillaControlUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.ExtractionUIs.FilterUIs.ParameterUIs.ParameterEditorScintillaSection">
            <summary>
            Models a <see cref="T:Rdmp.Core.Curation.Data.ISqlParameter"/> being edited in a <see cref="T:Rdmp.UI.ExtractionUIs.FilterUIs.ParameterUIs.ParameterEditorScintillaControlUI"/>.  Includes the location whether it
            should be editable etc.  Also handles reconciling user edits to the SQL into the <see cref="T:Rdmp.Core.Curation.Data.ISqlParameter"/> (if edit is legal).
            </summary>
        </member>
        <member name="T:Rdmp.UI.ExtractionUIs.JoinsAndLookups.JoinConfigurationUI">
            <summary>
            Many researchers like flat tables they can load into SPSS or STATA or Excel and thus would prefer not to deal with multiple tables if possible.  Storing datasets as flat
            tables however is often suboptimal in terms of performance and storage space.  Therefore it is possible to configure a dataset (Catalogue) which includes columns from 
            multiple tables.  For example if you have a Header and Results table in which Header tells you when a test was done and by whom including sample volume etc and each test
            gives multiple results (white blood cell count, red blood cell count etc) then you will obviously want to store it as two separate tables.
            
            <para>Configuring join logic in RDMP enables the QueryBuilder to write an SQL SELECT query including a LEFT JOIN / RIGHT JOIN / INNER JOIN over two or more tables.  If you don't
            understand what an SQL Join is then you should research this before using this window.  Unlike a Lookup (See LookupConfiguration) it doesn't really matter which table contains
            the ForeignKey and which contains the PrimaryKey since changing the Join direction effectively inverts this logic anyway (i.e. Header RIGHT JOIN Results is the same as Results
            LEFT JOIN Header).  Configuring join logic in the RDMP database does not affect your data repository in any way (i.e. it doesn't mean we will suddenly start putting referential
            integrity constraints into your database!).</para>
             
            <para>You might wonder why you have to configure JoinInfo information into RDMP when it is possibly already implemented in your data model (e.g. with foreign key constraints).  The
            explicit record in the RDMP database allows you to hold corrupt/unlinkable data (which would violate a foreign key constraint) and still know that the tables must be joined. 
            Additionally it lets you configure joins between tables in different databases and to specify an explicit direction (LEFT / RIGHT / INNER) which is always the same when it comes
            time to extract your data for researchers.</para>
            
            <para>If you need to join on more than 1 column then just create a JoinInfo for each pair of columns (making sure the direction - LEFT/RIGHT/INNER matches).  For example if the join is
            Header.LabNumber = Results.LabNumber AND Header.Hospital = Results.Hospital (because of crossover in LabNumber between hospitals) then you would configure a JoinInfo for 
            Header.LabNumber = Results.LabNumber and another for Header.Hospital = Results.Hospital.</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.ExtractionUIs.JoinsAndLookups.JoinConfigurationUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.ExtractionUIs.JoinsAndLookups.JoinConfigurationUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.ExtractionUIs.JoinsAndLookups.JoinConfigurationUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.ExtractionUIs.JoinsAndLookups.KeyDropLocationUI">
            <summary>
            Part of JoinConfiguration and LookupConfiguration, allows you to drop a ColumnInfo into it to declare it as a key in a relationship being built (either a Lookup or a JoinInfo). Clicking
            the garbage can will clear the control.
            </summary>
        </member>
        <member name="P:Rdmp.UI.ExtractionUIs.JoinsAndLookups.KeyDropLocationUI.IsValidGetter">
            <summary>
            Set this to allow dragging only certain items onto the control.  Return true to allow drop and false to prevent it.
            </summary>
        </member>
        <member name="F:Rdmp.UI.ExtractionUIs.JoinsAndLookups.KeyDropLocationUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.ExtractionUIs.JoinsAndLookups.KeyDropLocationUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.ExtractionUIs.JoinsAndLookups.KeyDropLocationUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Rdmp.UI.ExtractionUIs.JoinsAndLookups.LookupBrowserUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.ExtractionUIs.JoinsAndLookups.LookupBrowserUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.ExtractionUIs.JoinsAndLookups.LookupBrowserUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.ExtractionUIs.JoinsAndLookups.LookupConfigurationUI">
             <summary>
             A Lookup in RDMP is a relationship between three columns.  The 'Foreign Key' column must come from a normal dataset table e.g. 'Prescribing.DrugCode', the 'Primary Key' must come
             from a different table (usually prefixed z_ to indicate it is a lookup table) e.g. 'z_DrugsLookup.DrugCode' and then a 'Description' column from the same table e.g. 
             'z_DrugsLookup.DrugName'.  This is maintained in the RDMP Catalogue database and does not result in any changes / constraints on your actual data repository.  
             
             <para>While it might seem redundant to have to configure this logic in the RDMP as well as (if you choose to) constraints in your data repository, this approach allows for 
             flexibility when it comes to incomplete/corrupt lookup tables (common in the research data management domain) as well as letting us bundle lookups with data extracts etc.</para>
             
             <para>This window is a low level alternative to LookupConfiguration (the recommended way of creating these Lookup relationships), this form lets you explicitly create a Lookup
             relationship using the supplied columns.  First of all you should make sure that the column you right clicked to activate the Form is the Description column.  Then select the
             'Primary Key' and 'Foreign Key' as described above.  </para>
             
             <para>If you have a particularly insane database design you can configure composite joins (where there are multiple columns that make up a composite 'Foreign Key' / 'Primary Key'.  For 
             example if there was crossover in 'DrugCode' between two countries then the Lookup relationship would need 'Primary Key' Prescribing.DrugCode + Prescribing.Country and the 
             'Foreign Key' would need to be z_DrugsLookup.DrugCode + z_DrugsLookup.Country.</para>
            
             <para>Allows you to rapidly import and configure lookup table relationships into the RDMP.  This has two benefits, firstly lookup tables will be automatically included in project extracts
             of the dataset you are editing.  Secondly lookup columns will be available for inclusion directly into the extraction on a per row basis (for researchers who can't deal with having
             to lookup the meaning of codes in separate files).</para>
             
             <para>Start by identifying a lookup table and click Import Lookup.  Then drag the primary key of the lookup into the PrimaryKey box.  Then drag the description column of the lookup onto the
             Foreign key field in the dataset you are modifying.  If you have multiple foreign keys (e.g. two columns SendingLocation and DischargeLocation both of which are location codes) then 
             join them both up (this will give you two lookup description fields SendingLocation_Desc and DischargeLocation_Desc).  </para>
             
             <para>All Lookups and Lookup column description configurations are artifacts in the RDMP database and no actual changes will take place on your data repository (i.e. no constraints will be added
             to the underlying data database). </para>
             </summary>
        </member>
        <member name="F:Rdmp.UI.ExtractionUIs.JoinsAndLookups.LookupConfigurationUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.ExtractionUIs.JoinsAndLookups.LookupConfigurationUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.ExtractionUIs.JoinsAndLookups.LookupConfigurationUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Rdmp.UI.ExtractionUIs.JoinsAndLookups.LookupUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.ExtractionUIs.JoinsAndLookups.LookupUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.ExtractionUIs.JoinsAndLookups.LookupUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.ExtractionUIs.ReOrderCatalogueItemsUI">
            <summary>
            This form allows partial or complete reordering of a datasets columns based on a list of column names
            pasted into the Desired Order listbox.  All items are cleaned such that the user should be able to paste in
            a list, the middle section of a SELECT statement or pretty much anything else.
            
            <para>Once a desired order is entered the class will attempt to find the first item in the desired order.  Assuming
            this item is found then the location of this field becomes the 'insertion' point for reordering and all fields 
            that the user pasted in are reordered into this point.</para>
            
            <para>At any time you can look at the 'New Order' section to see the new order that columns will be in if you accept the
            reordering.</para>
            
            </summary>
        </member>
        <member name="F:Rdmp.UI.ExtractionUIs.ReOrderCatalogueItemsUI.itemsToReOrderAndOffsetRelativeToFirst">
            <summary>
            This is a collection of all the items found in the desired order and their offset in the desired order relative to the first one
            </summary>
        </member>
        <member name="M:Rdmp.UI.ExtractionUIs.ReOrderCatalogueItemsUI.WorkOutReOrderVariables">
            <summary>
            Figures out what strings in the users desired order are actually in the extraction and computes 
            currentOrderStartReorderAtIndex and itemsToReOrderAndOfsetRelativeToFirst which are used for
            highlighting and to WorkOutNewOrderAndAddToNewOrderListbox
            </summary>
        </member>
        <member name="F:Rdmp.UI.ExtractionUIs.ReOrderCatalogueItemsUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.ExtractionUIs.ReOrderCatalogueItemsUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.ExtractionUIs.ReOrderCatalogueItemsUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.ExtractionUIs.ViewExtractionSqlUI">
            <summary>
            Allows you to view the Extraction SQL that is built by the QueryBuilder when extracting or running data quality engine against a dataset (Catalogue).  Includes options for
            you to display only Core extraction fields or also supplemental / special approval.
            
            <para>If you have an ExtractionFilters configured on your Catalogue then you can tick them to view their SQL implementation.  Because these are master filters and this dialog 
            is for previewing only, no AND/OR container trees are included in the WHERE logic (See ExtractionFilterUI for more info about filters).</para>
            
            <para>If for some reason you see an error instead of your extraction SQL then read the description and take the steps it suggests (e.g. if it is complaining about not knowing
            how to JOIN two tables then configure an appropriate JoinInfo - See JoinConfiguration). </para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.ExtractionUIs.ViewExtractionSqlUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.ExtractionUIs.ViewExtractionSqlUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.ExtractionUIs.ViewExtractionSqlUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.FormsHelper">
            <summary>
            Helper Extension Methods for Control
            </summary>
        </member>
        <member name="M:Rdmp.UI.FormsHelper.GetVisibleArea(System.Windows.Forms.Control)">
            <summary>
            Returns the visible portion of the control in client coordinates of c.  For example if you
            have a control in a scrollable container then this method will return the client rectangle
            that is visible with the current scroll viewport.
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="T:Rdmp.UI.IconFactory">
            <summary>
            Creates <see cref="T:System.Drawing.Icon"/> instances based on provided <see cref="T:System.Drawing.Bitmap"/> (with support for caching).
            </summary>
        </member>
        <member name="M:Rdmp.UI.IconFactory.GetIcon(SixLabors.ImageSharp.Image{SixLabors.ImageSharp.PixelFormats.Rgba32})">
            <summary>
            Returns an <see cref="T:System.Drawing.Icon"/> depicting the provided <paramref name="bmp"/>.  Calling this
            method multiple times with the same <see cref="T:System.Drawing.Icon"/> will return the same <see cref="T:System.Drawing.Icon"/> instance.
            </summary>
            <param name="bmp"></param>
            <returns></returns>
        </member>
        <member name="T:Rdmp.UI.ItemActivation.Arranging.IArrangeWindows">
            <summary>
            Facilitates opening/closing lots of windows at once to achieve a specific goal (e.g. running a data load).  Basically sets up the tabs for a user friendly
            consistent experience for the called user task.
            </summary>
        </member>
        <member name="T:Rdmp.UI.ItemActivation.IActivateItems">
            <summary>
            Central component class for handling all low level RDMP main user interface systems. This includes things like Tree object child provision, Icon provision,
            the publish system for notifying out of date objects etc.  Each function is segregated by a component class property e.g. RefreshBus, FavouritesProvider etc
            
            <para>Also exposes the location of the Catalogue / Data Export repository databases via RepositoryLocator</para>
            </summary>
        </member>
        <member name="P:Rdmp.UI.ItemActivation.IActivateItems.RefreshBus">
            <summary>
            Component for publishing the fact that an object has recently been put out of date by you.
            </summary>
        </member>
        <member name="P:Rdmp.UI.ItemActivation.IActivateItems.WindowArranger">
            <summary>
            Component for closing and opening multiple windows at once for optimal user experience for achieving a given task (e.g. running a data load)
            </summary>
        </member>
        <member name="P:Rdmp.UI.ItemActivation.IActivateItems.CommandFactory">
            <summary>
            Component for starting drag or copy operations
            </summary>
        </member>
        <member name="P:Rdmp.UI.ItemActivation.IActivateItems.CommandExecutionFactory">
            <summary>
            Component for suggesting completion options for an ongoing drag or paste
            </summary>
        </member>
        <member name="P:Rdmp.UI.ItemActivation.IActivateItems.HistoryProvider">
            <summary>
            Records when objects are accessed by the user through the UI to allow navigation to recent objects
            </summary>
        </member>
        <member name="M:Rdmp.UI.ItemActivation.IActivateItems.Activate``2(``1)">
            <summary>
            Launches a new instance of the specified RDMPSingleDatabaseObjectControl Type with the supplied DatabaseEntity.  If you already have
            an ICommandExecutionProposal which facilitates Activation then you can instead use CommandExecutionFactory.Activate
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="databaseObject"></param>
            <returns></returns>
        </member>
        <member name="M:Rdmp.UI.ItemActivation.IActivateItems.Activate``1(Rdmp.Core.Curation.Data.Dashboarding.IPersistableObjectCollection)">
            <summary>
            Launches a new instance of the specified IObjectCollectionControl with the supplied collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:Rdmp.UI.ItemActivation.IActivateItems.GetDocumentation(System.Type)">
            <summary>
            Returns xml doc comments from the CommentStore for the given class (or null if it is undocumented)
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:Rdmp.UI.ItemActivation.IActivateItems.CurrentDirectory">
            <summary>
            Returns the current directory (e.g. <see cref="P:System.Environment.CurrentDirectory"/>).
            </summary>
        </member>
        <member name="M:Rdmp.UI.ItemActivation.IActivateItems.ShowDialog(System.Windows.Forms.Form)">
            <summary>
            Shows the <paramref name="form"/>.  This method exists so tests can suppress the behaviour and to facilitate standardisation
            </summary>
            <param name="form"></param>
            <returns></returns>
        </member>
        <member name="M:Rdmp.UI.ItemActivation.IActivateItems.KillForm(System.Windows.Forms.Form,System.Exception)">
            <summary>
            Closes the Form <paramref name="f"/> and reports the <paramref name="reason"/> to the user
            in a highly visible way
            </summary>
            <param name="f"></param>
            <param name="reason"></param>
        </member>
        <member name="M:Rdmp.UI.ItemActivation.IActivateItems.KillForm(System.Windows.Forms.Form,System.String)">
            <summary>
            Closes the Form <paramref name="f"/> and reports the <paramref name="reason"/> to the user
            in a highly visible way
            </summary>
            <param name="f"></param>
            <param name="reason"></param>
        </member>
        <member name="M:Rdmp.UI.ItemActivation.IActivateItems.OnRuleRegistered(Rdmp.UI.Rules.IBinderRule)">
            <summary>
            Called when an ErrorProvider validation rule is registered
            </summary>
            <param name="rule"></param>
        </member>
        <member name="M:Rdmp.UI.ItemActivation.IActivateItems.ShouldReloadFreshCopy(Rdmp.Core.Curation.Data.DatabaseEntity)">
            <summary>
            Determines system behaviour when an object is found to be out of sync with the remote database.  Typically implementing
            class will ask the user if they want to load up the database copy.
            </summary>
            <param name="databaseEntity"></param>
            <returns></returns>
        </member>
        <member name="M:Rdmp.UI.ItemActivation.IActivateItems.StartSession(System.String,System.Collections.Generic.IEnumerable{Rdmp.Core.MapsDirectlyToDatabaseTable.IMapsDirectlyToDatabaseTable},System.String)">
            <summary>
            Start a new scoped session with a collection of objects
            </summary>
            <param name="sessionName"></param>
            <param name="initialSelectionIfAny">Initial root objects to be in scope (or null if not known)</param>
            <param name="initialSearch">The value to set the search textbox to on load if objects are being selected during this operation, or null.</param>
        </member>
        <member name="M:Rdmp.UI.ItemActivation.IActivateItems.GetSessions">
            <summary>
            Returns all currently open session uis
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rdmp.UI.LinkLabels.PathLinkLabel">
            <summary>
            Label showing a file system path which opens the containing directory in explorer when clicked.
            </summary>
        </member>
        <member name="T:Rdmp.UI.LoadExecutionUIs.ExecuteCacheProgressUI">
            <summary>
            Allows you to execute a Caching pipeline for a series of days.  For example this might download files from a web service by date and store them in a cache directory
            for later loading.  Caching is independent of data loading and only required if you have a long running fetch process which is time based and not suitable for
            execution as part of the load (due to the length of time it takes or the volatility of the load or just because you want to decouple the two processes).
            </summary>
        </member>
        <member name="F:Rdmp.UI.LoadExecutionUIs.ExecuteCacheProgressUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.LoadExecutionUIs.ExecuteCacheProgressUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.LoadExecutionUIs.ExecuteCacheProgressUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.LoadExecutionUIs.ExecuteLoadMetadataUI">
            <summary>
            Runs the Data Load Engine on a single LoadMetadata.  This user interface is intended for manually executing and debugging loads.
            
            <para>You can only attempt to launch a data load if the checks are all passing (or giving Warnings that you understand and are not concerned about).  </para>
            
            <para>Once started the load progress will appear and show as data is loaded into RAW, migrated to STAGING and committed to LIVE (See  'RAW Bubble, STAGING Bubble, LIVE Model'
            in UserManual.md for full implementation details).</para>
            
            <para>There are various options for debugging for example you can override and stop the data load after RAW is populated (in which case the load will crash out early allowing
            you to evaluated the RAW data in a database environment conducive with debugging dataset issues). </para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.LoadExecutionUIs.ExecuteLoadMetadataUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.LoadExecutionUIs.ExecuteLoadMetadataUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.LoadExecutionUIs.ExecuteLoadMetadataUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.LocationsMenu.ChoosePlatformDatabasesUI">
            <summary>
            All metadata in RDMP is stored in one of two main databases.  The Catalogue database records all the technical, descriptive, governance, data load, filtering logic etc about 
            your datasets (including where they are stored etc).  The Data Export Manager database stores all the extraction configurations you have created for releasing to researchers.
            
            <para>This window lets you tell the software where your Catalogue / Data Export Manager databases are or create new ones.  These connection strings are recorded in each users settings file.
            It is strongly advised that you use Integrated Security (Windows Security) for connecting rather than a username/password as this is the only case where Passwords are not encrypted
            (Since the encryption certificate location is stored in the Catalogue! - see PasswordEncryptionKeyLocationUI).</para>
            
            <para>Only the Catalogue database is required, if you do not intend to do data extraction at this time then you can skip creating one.  </para>
            
            <para>It is a good idea to run Check after configuring your connection string to ensure that the database is accessible and that the tables/columns in the database match the softwares
            expectations.  </para>
            
            <para>IMPORTANT: if you configure your connection string wrongly it might take up to 30s for windows to timeout the network connection (e.g. if you specify the wrong server name). This is
            similar to if you type in a dodgy server name in Microsoft Windows Explorer.</para>
            </summary>
        </member>
        <member name="M:Rdmp.UI.LocationsMenu.ChoosePlatformDatabasesUI.CheckRepository(System.Boolean)">
            <summary>
            
            </summary>
            <param name="catalogue">True for catalogue, false for data export</param>
        </member>
        <member name="F:Rdmp.UI.LocationsMenu.ChoosePlatformDatabasesUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.LocationsMenu.ChoosePlatformDatabasesUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.LocationsMenu.ChoosePlatformDatabasesUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.LocationsMenu.PasswordEncryptionKeyLocationUI">
            <summary>
            RDMP supports both Integrated Security (Windows User Account Security) and SQL Authentication.  The later requires the storing of usernames and passwords for sending at query time
            to the destination server.  In order to do this in a secure way RDMP encrypts them using 4096-bit RSA public/private key encryption.  By default this will use a PrivateKey that is
            part of the RDMP codebase but it is recommended that you create your own Private Key.  Without your own private key someone could decompile this software and decrypt the passwords
            stored in your RDMP database if it ever became compromised.
            
            <para>This control lets you create a custom 4096 bit RSA Private Key file.  The location of this file is stored in the RDMP database but the file itself should be held under access 
            control (see UserManual.md).  This ensures that passwords are only compromised if both the RDMP database and the Windows user account file system (where the private key is held)
            are both compromised.</para>
            
            <para>It is only possible to have one key at any one time and once you generate a new one all your previously created passwords will be irretrievable so it is advisable to set this up
            on day one otherwise you will have to reset all the passwords stored in the RDMP database.</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.LocationsMenu.PasswordEncryptionKeyLocationUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.LocationsMenu.PasswordEncryptionKeyLocationUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.LocationsMenu.PasswordEncryptionKeyLocationUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.LocationsMenu.ServerDefaultsUI">
            <summary>
            The RDMP Data Catalogue database is the central resource for storing all information about what is where, what datasets there are, what servers they are on etc.  This includes 
            keeping track of the locations of other servers such as the Logging server/database, Data Quality Engine reporting database, anonymisation databases, query caching databases
            etc. 
            
            <para>This dialog lets you set which server references (ExternalDatabaseServer) are used for each of the defaults that RDMP has (e.g. which logging server should be used by default)</para>
             
            </summary>
        </member>
        <member name="F:Rdmp.UI.LocationsMenu.ServerDefaultsUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.LocationsMenu.ServerDefaultsUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.LocationsMenu.ServerDefaultsUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.LocationsMenu.Ticketing.TicketingControlUI">
            <summary>
            This control lets you reference a ticket in your ticketing system (e.g. JIRA, fogbugz etc).  The control has a location for you to record the ticket identifier (e.g. LINK-123).
            If you don't yet have a ticketing system configured (and you have a plugin that supports the ticketing system) then you can set up the ticketing system configuration by launching
            TicketingSystemConfigurationUI (from Catalogue Manager main menu).
            
            <para>Assuming your ticketing system plugin is working correctly and correctly configured in RDMP then clicking 'Show' should take you directly to your ticketing system (e.g. launch a
            new browser window at the website page of the ticket).</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.LocationsMenu.Ticketing.TicketingControlUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.LocationsMenu.Ticketing.TicketingControlUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.LocationsMenu.Ticketing.TicketingControlUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.LocationsMenu.Ticketing.TicketingSystemConfigurationUI">
            <summary>
            The RDMP recognises that there are a wide array of software systems for tracking time worked, issues,project requests, bug reports etc.  The RDMP is designed to support gated 
            interactions with ticketing systems (which can be skipped entirely if you do not want the functionality).  This window lets you configure which ticketing system you have, the
            credentials needed to access it and where it is located.  You will need to make sure you select the appropriate Type of ticketing system you have.
            
            <para>Because there are many different ticketing systems and they can often be configured in diverse ways, the RDMP uses a 'plugin' approach to interacting with ticketing systems.
            The scope of functionality includes: </para>
            
            <para>1. Validating whether a ticket is valid
            2. Navigating to the ticket when the user clicks 'Show' in a TicketingControlUI (See TicketingControlUI)
            3. Determining whether a given project extraction can go ahead (This lets you drive ethics/approvals process through your normal ticketing system but have RDMP prevent 
            releases of data until the ticketing system says its ok). </para>
            
            <para>Ticketing systems are entirely optional and you can ignore them if you don't have one or don't want to configure it.  If you do not see a Type that corresponds with your 
            ticketing system you might need to write your own Ticketing dll (See ITicketingSystem interface) and upload it as a plugin to the Data Catalogue.</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.LocationsMenu.Ticketing.TicketingSystemConfigurationUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.LocationsMenu.Ticketing.TicketingSystemConfigurationUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.LocationsMenu.Ticketing.TicketingSystemConfigurationUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.Logging.LoggingTabUI">
            <summary>
            <para>Displays all the activity going on within the RDMP that has been recorded in the logging database.  This includes data extractions, data loads, data quality runs etc.  This 
            information is stored in a relational database format including:</para>
            
            <para>Task - The overarching type of task e.g. 'Data Extraction', 'Loading Biochemistry' etc</para>
            <para>Run - Each time data has flown from one set of locations to another, this encapsulates one execution e.g. An attempt to load 3 Biochemistry files on 2016-02-05 at 5AM</para>
            <para>Table Loads - Each run will have 0 or more Table Loads, these are destinations for the data being handled and may include flat file locations such as during data export to csv</para>
            <para>Data Sources - Each table can have an explicit source which might be a flat file being loaded or an SQL query in the case of data extraction.</para>
            <para>Fatal Errors - Any crash that happened during a run should appear in this view</para>
            <para>Progress Messages - A log of every progress message generated during the run will appear here</para>
            
            </summary>
        </member>
        <member name="T:Rdmp.UI.MainFormUITabs.CatalogueItemUI">
            <summary>
            Each dataset (Catalogue) includes one or more virtual columns called CatalogueItems.  Each CatalogueItem is powered by an underlying columns in your data repository but there
            can be multiple CatalogueItems per column (for example if the DateOfBirth column is extractable either rounded to the nearest quarter or verbatim).  Thus CatalogueItems are both
            an extraction transform/rule set (See ExtractionInformationUI) and a descriptive entity which describes what the researcher will receive if they are given the column in an extract.
            This helpfully also lets you delete/restructure your data tables underneath without losing the descriptive data, validation rules, logging history etc of your datasets.
            
            <para>This control lets you view/edit the descriptive metadata of a CatalogueItem in a dataset (Catalogue).</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.MainFormUITabs.CatalogueItemUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.MainFormUITabs.CatalogueItemUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.MainFormUITabs.CatalogueItemUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.MainFormUITabs.CatalogueUI">
            <summary>
            Allows you to modify the descriptive data stored in the RDMP database about the selected Catalogue (dataset).  Pressing Ctrl+S will save any changes.  You should make sure that you
            provide as much background about your datasets as possible since this is the information that will be given to researchers when you extract the dataset (as well as being a great 
            reference for when you find a dataset and you're not quite sure about what it contains or how it got there or who supplied it etc).
            
            <para>The collection of fields for documentation were chosen by committee and based on the 'Dublin Core'.  Realistically though just entering all the information into 'Resource 
            Description' is probably a more realistic goal.  Documentation may be boring but it is absolutely vital for handling providence of research datasets especially if you frequently
            get given small datasets from researchers (e.g. questionnaire data they have collected) for use in cohort generation etc).</para>
            
            <para>There is also a box for storing a ticket number, this will let you reference a ticket in your ticketing system (e.g. Jira, Fogbugz etc).  This requires selecting/writing a compatible
            plugin for your ticketing system and configuring it (see TicketingSystemConfigurationUI)</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.MainFormUITabs.CatalogueUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.MainFormUITabs.CatalogueUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.MainFormUITabs.CatalogueUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.MainFormUITabs.ConnectionStringKeywordUI">
            <summary>
            Allows you to set up a <see cref="T:Rdmp.Core.Curation.Data.ConnectionStringKeyword"/> which will be used with all connections made against databases of the given <see cref="T:FAnsi.DatabaseType"/>.
            Take great care when doing this as you can easily render your datasources unreachable by all system users.
            </summary>
        </member>
        <member name="F:Rdmp.UI.MainFormUITabs.ConnectionStringKeywordUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.MainFormUITabs.ConnectionStringKeywordUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.MainFormUITabs.ConnectionStringKeywordUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.MainFormUITabs.DitaExtractorUI">
            <summary>
            RDMP supports extracting all your metadata into DITA format (http://dita.xml.org/ - DITA OASIS Standard).  This is an XML standard with good tool support.  This form lets you
            export your entire metadata descriptive database into a collection of DITA files.  This might be useful to you for some reason (e.g. to produce offline PDFs etc) but really 
            the recommended route is to use the built in metadata reports (e.g. MetadataReportUI).  Alternatively you can run queries directly on the RDMP Data Catalogue database
            which is a super relational database with many tables (Catalogue, CatalogueItem, SupportingDocument etc etc).
            
            <para>NOTE: Make sure that you have set a Resource Acronym for each of your datasets (Catalogues) before attempting to extract in DITA format.</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.MainFormUITabs.DitaExtractorUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.MainFormUITabs.DitaExtractorUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.MainFormUITabs.DitaExtractorUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Rdmp.UI.MainFormUITabs.ExtractionProgressUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.MainFormUITabs.ExtractionProgressUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.MainFormUITabs.ExtractionProgressUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.MainFormUITabs.SubComponents.ExternalDatabaseServerUI">
            <summary>
            Allows you to change the connection strings of a known ExternalDatabaseServer.
            
            <para>ExternalDatabaseServers are references to existing servers.  They have a logistical name (what you want to call it) and servername.  Optionally you can
            specify a database (required in the case of references to specific databases e.g. Logging Database), if you omit it then the 'master' database will be used.
            If you do not specify a username/password then Integrated Security will be used when connecting (the preferred method).  Usernames and passwords are stored
            in encrypted form (See PasswordEncryptionKeyLocationUI).</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.MainFormUITabs.SubComponents.ExternalDatabaseServerUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.MainFormUITabs.SubComponents.ExternalDatabaseServerUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.MainFormUITabs.SubComponents.ExternalDatabaseServerUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.MainFormUITabs.SubComponents.ImportSQLTableUI">
            <summary>
            This control offers the preferred method of telling RDMP about your existing datasets.  It lets you select a table on your server and then forward engineer an RDMP Catalogue
            which lets you build a data load for the table, document its columns, configure extraction logic etc.  
            
            <para>Start by entering the details of your table (server, database, table etc).  If you specify username/password then SQL Authentication will be used and the credentials will be
            stored along with the table (See PasswordEncryptionKeyLocationUI for details), if you do not enter username/password then Windows Authentication will be used (preferred).  </para>
            
            <para>Clicking Import will create TableInfo / ColumnInfo objects in your Data Catalogue database and then ConfigureCatalogueExtractabilityUI will be launched which lets you pick which 
            columns are extractable and which contains the Patient Identifier (e.g. CHI number / NHS number etc).  See ConfigureCatalogueExtractabilityUI for full details. </para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.MainFormUITabs.SubComponents.ImportSQLTableUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.MainFormUITabs.SubComponents.ImportSQLTableUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.MainFormUITabs.SubComponents.ImportSQLTableUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.MainFormUITabs.SubComponents.TableInfoUI">
            <summary>
            Allows you to change a table reference (TableInfo) to point at a new location.  This should only be used when you have moved a dataset to a new database or server and you should select
            'Synchronize' after you make this change. 
            
            <para>The 'Synchronize' button will connect to the referenced server/database and check that it exists and that the columns in the database match the ColumnInfo collection in the Catalogue 
            database.  Synchronization happens automatically within the RDMP at some points (e.g. data load) but it is useful to manually do it sometimes if you know you have made a change to your
            database schema and want to update the Catalogue.</para>
            
            <para>If your TableInfo is pointed at a Table-valued Function then you can select 'Default Table Valued Function Parameters...' to launch a ParameterCollectionUI which contains all the defaults
            that the Catalogue will use when invoking your SQL function.  The RDMP requires (and will automatically create) an SQL parameter (e.g. @myExcitingParameter) for each argument taken by
            your Table-valued function of a matching datatype and name to the argument as declared in your database.  In practice these default parameter values will usually be overridden at a higher
            level (e.g. during cohort identification).</para>
            
            <para>This interface also allows you to mark a TableInfo 'Is Primary Extraction Table' which means that the QueryBuilder will start JOIN statements with this table where it is part of a complex
            multi table query.</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.MainFormUITabs.SubComponents.TableInfoUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.MainFormUITabs.SubComponents.TableInfoUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.MainFormUITabs.SubComponents.TableInfoUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.Menus.MenuItems.AtomicCommandMenuItem">
            <summary>
            <see cref="T:System.Windows.Forms.ToolStripMenuItem"/> depicting a single <see cref="T:Rdmp.Core.CommandExecution.AtomicCommands.IAtomicCommand"/>
            </summary>
        </member>
        <member name="T:Rdmp.UI.Menus.MenuItems.AtomicCommandToolStripItem">
            <summary>
            <see cref="T:System.Windows.Forms.ToolStripButton"/> depicting a single <see cref="T:Rdmp.Core.CommandExecution.AtomicCommands.IAtomicCommand"/>
            </summary>
        </member>
        <member name="M:Rdmp.UI.Menus.MenuItems.RDMPToolStripMenuItem.Add(Rdmp.Core.CommandExecution.AtomicCommands.IAtomicCommand,System.Windows.Forms.Keys)">
            <summary>
            Adds the given command to the drop down item list of this tool strip menu item
            </summary>
            <param name="cmd"></param>
            <param name="shortcutKey"></param>
            <returns></returns>
        </member>
        <member name="T:Rdmp.UI.Menus.MenuItems.SaveMenuItem">
            <summary>
            Provides a shortcut to save the currently selected ISaveableUI.  This class requires that you track and regularly update the Saveable property to match
            the currently selected saveable tab
            </summary>
        </member>
        <member name="T:Rdmp.UI.Menus.RDMPContextMenuStrip">
            <summary>
            Base class for all right click context menus in <see cref="T:Rdmp.UI.Collections.RDMPCollectionUI"/> controls.  These menus are built by reflection
            when the selected object is changed.
            </summary>
        </member>
        <member name="M:Rdmp.UI.Menus.RDMPContextMenuStrip.RegisterFetchGoToObjecstCallback(System.Windows.Forms.ToolStripMenuItem)">
            <summary>
            Register an event for opening the supplied dropdown that fetches all lazy objects and updates command viability of subitems (see <see cref="M:Rdmp.Core.CommandExecution.AtomicCommands.ExecuteCommandShow.FetchDestinationObjects"/>
            </summary>
            <param name="gotoMenu"></param>
        </member>
        <member name="M:Rdmp.UI.Menus.RDMPContextMenuStrip.Add(Rdmp.Core.CommandExecution.AtomicCommands.IAtomicCommand,System.Windows.Forms.Keys,System.String,System.Drawing.Image)">
            <summary>
            Creates a new command under a submenu named <paramref name="submenu"/> (if this doesn't exist yet it will be created).
            </summary>
            <param name="cmd"></param>
            <param name="shortcutKey"></param>
            <param name="submenu"></param>
            <param name="image"></param>
        </member>
        <member name="T:Rdmp.UI.Menus.RDMPContextMenuStripArgs">
            <summary>
            Constructor arguments for <see cref="T:Rdmp.UI.Menus.RDMPContextMenuStrip"/>
            </summary>
        </member>
        <member name="M:Rdmp.UI.Menus.RDMPContextMenuStripArgs.SkipCommand``1">
            <summary>
            Notifies the menu builder that we do not want to show a given Type of command for this menu e.g. because we have a better UI we plan to make available instead
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Rdmp.UI.Menus.RDMPContextMenuStripArgs.ShouldSkipCommand(Rdmp.Core.CommandExecution.AtomicCommands.IAtomicCommand)">
            <summary>
            Returns true if <see cref="M:Rdmp.UI.Menus.RDMPContextMenuStripArgs.SkipCommand``1"/> has been called for this command type
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:Rdmp.UI.Menus.RDMPContextMenuStripArgs.GetTreeParentControlOfType``1">
            <summary>
            Returns the first Parent control of <see cref="P:Rdmp.UI.Menus.RDMPContextMenuStripArgs.Tree"/> in the Windows Forms Controls Parent hierarchy which is Type T
            
            <para>returns null if no Parent is found of the supplied Type </para>
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Rdmp.UI.NativeMethods">
            <summary>
            Static class for DllImport methods.
            </summary>
        </member>
        <member name="T:Rdmp.UI.NavigationTrack`1">
            <summary>
            Handles tracking which where the user navigates to for Forward / Backward purposes.
            </summary>
        </member>
        <member name="E:Rdmp.UI.NavigationTrack`1.Changed">
            <summary>
            Called when changes are detected, includes Clear, Append etc. Does not include <see cref="M:Rdmp.UI.NavigationTrack`1.Prune"/> which is often called as part of internal operations.
            </summary>
        </member>
        <member name="P:Rdmp.UI.NavigationTrack`1.Current">
            <summary>
            The last T navigated to or null if no T are alive / pushed
            </summary>
        </member>
        <member name="M:Rdmp.UI.NavigationTrack`1.#ctor(System.Func{`0,System.Boolean},System.Action{`0})">
            <summary>
            Creates a new Forward/Backward navigation stack supporting pruning.
            </summary>
            <param name="aliveDelegate">Delegate for pruning dead items from the stack (e.g. closed forms).  Return true if your <typeparamref name="T"/> should survive filter.</param>
            <param name="activate">Delegate to execute when Forward/Backward happens (e.g. bring to focus).</param>
        </member>
        <member name="M:Rdmp.UI.NavigationTrack`1.Prune">
            <summary>
            Removes all dead objects in the history (forward and backwards).  This is based on the alive delegate used to construct the <see cref="T:Rdmp.UI.NavigationTrack`1"/>
            </summary>
        </member>
        <member name="M:Rdmp.UI.NavigationTrack`1.Back(System.Int32,System.Boolean)">
            <summary>
            Calls <see cref="M:Rdmp.UI.NavigationTrack`1.Back(System.Boolean)"/> <paramref name="i"/> times.  If this results in a valid <see cref="P:Rdmp.UI.NavigationTrack`1.Current"/> then the activate delegate will be triggered
            </summary>
            <param name="i"></param>
            <param name="show"></param>
            <returns></returns>
        </member>
        <member name="M:Rdmp.UI.NavigationTrack`1.Activate(`0)">
            <summary>
            Activates the given <typeparamref name="T"/> without adding it to the history stack
            </summary>
            <param name="toShow"></param>
        </member>
        <member name="M:Rdmp.UI.NavigationTrack`1.Back(System.Boolean)">
            <summary>
            Returns and optionally Activates the last entry in the history.  This changes the location history
            </summary>
            <param name="show">True to launch the activation delegate</param>
            <returns></returns>
        </member>
        <member name="M:Rdmp.UI.NavigationTrack`1.Forward(System.Boolean)">
            <summary>
            Returns and optionally Activates the next object in the history.  This changes the location history
            
            <para>Does nothing if you have not already gone <see cref="M:Rdmp.UI.NavigationTrack`1.Back(System.Boolean)"/></para>
            </summary>
            <param name="show"></param>
            <returns></returns>
        </member>
        <member name="M:Rdmp.UI.NavigationTrack`1.CanBack">
            <summary>
            Returns true if there is a history that can be navigated back to
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rdmp.UI.NavigationTrack`1.CanForward">
            <summary>
            Returns true if the current state is an exploration of the past history and therefore the user can navigate Forwards again
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rdmp.UI.NavigationTrack`1.GetHistory(System.Int32)">
            <summary>
            Returns x history objects that <see cref="M:Rdmp.UI.NavigationTrack`1.Back(System.Boolean)"/> would go to if called.  This does not affect the state of the history.  Result does not include <see cref="P:Rdmp.UI.NavigationTrack`1.Current"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rdmp.UI.NavigationTrack`1.Append(`0)">
            <summary>
            Records that the user has made a new navigation to a fresh page.  This will invalidate any Forward history
            </summary>
            <param name="newHead"></param>
        </member>
        <member name="M:Rdmp.UI.NavigationTrack`1.Suspend">
            <summary>
            Changes the behaviour of <see cref="M:Rdmp.UI.NavigationTrack`1.Append(`0)"/> to do nothing, use this if you want to activate something or load a layout without populating the history / affecting the current history.
            </summary>
        </member>
        <member name="M:Rdmp.UI.NavigationTrack`1.Resume">
            <summary>
            Ends the suspended state created by <see cref="M:Rdmp.UI.NavigationTrack`1.Suspend"/>
            </summary>
        </member>
        <member name="T:Rdmp.UI.Overview.DataLoadsGraph">
            <summary>
            Displays a graph showing how many of your data loads passed the last time they were run and which data loads are currently failing.  If you have
            not configured any data loads yet then this control will be blank.
            </summary>
        </member>
        <member name="F:Rdmp.UI.Overview.DataLoadsGraph.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.Overview.DataLoadsGraph.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.Overview.DataLoadsGraph.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.Overview.DataLoadsGraphObjectCollection">
            <summary>
            Input/persistence object for <see cref="T:Rdmp.UI.Overview.DataLoadsGraph"/> (no objects get persisted).
            </summary>
        </member>
        <member name="F:Rdmp.UI.Performance.LastCommandUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.Performance.LastCommandUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.Performance.LastCommandUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.Performance.PerformanceCounterResultsUI">
            <summary>
            Displays detailed breakdown of database queries sent by the RDMP during Performance Logging (See PerformanceCounterUI).  The colour of the row indicates the number of times a database
            query was sent from that point in the call stack.  Note that this is the number of calls not the time taken to execute the call so you could see poor performance in UI interaction and
            see lots of red calls but the actual slow query might only be called once. 
            
            </summary>
        </member>
        <member name="F:Rdmp.UI.Performance.PerformanceCounterResultsUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.Performance.PerformanceCounterResultsUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.Performance.PerformanceCounterResultsUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.PieCharts.GoodBadCataloguePieChart">
            <summary>
            Part of OverviewScreen, shows a pie chart showing ow many extractable columns are there which do not yet have descriptions in the Data Catalogue Database (See CatalogueItemUI)
            
            <para>Each of these can either be displayed for a single catalogue or as a combined total across all active catalogues (not deprecated / internal etc)</para>
            
            </summary>
        </member>
        <member name="F:Rdmp.UI.PieCharts.GoodBadCataloguePieChart.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.PieCharts.GoodBadCataloguePieChart.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.PieCharts.GoodBadCataloguePieChart.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.PieCharts.GoodBadCataloguePieChartObjectCollection">
            <summary>
            Input object for <see cref="T:Rdmp.UI.PieCharts.GoodBadCataloguePieChart"/> Records whether it is showing all/single <see cref="T:Rdmp.Core.Curation.Data.Catalogue"/> and which is being shown.
            </summary>
        </member>
        <member name="M:Rdmp.UI.PieCharts.GoodBadCataloguePieChartObjectCollection.Include(Rdmp.Core.Curation.Data.Catalogue,Rdmp.Core.Repositories.IDataExportRepository)">
            <summary>
            Returns true if the Catalogue <paramref name="c"/> should be included in the good/bad counts
            based on the flags e.g. <see cref="P:Rdmp.UI.PieCharts.GoodBadCataloguePieChartObjectCollection.IncludeDeprecatedCatalogues"/>
            </summary>
            <param name="c"></param>
            <param name="repo"></param>
            <returns></returns>
        </member>
        <member name="M:Rdmp.UI.PieCharts.GoodBadCataloguePieChartObjectCollection.Include(Rdmp.Core.Curation.Data.CatalogueItem)">
            <summary>
            Returns true if the <see cref="T:Rdmp.Core.Curation.Data.CatalogueItem"/> <paramref name="ci"/> should be included in the good/bad
            counts based on the flags e.g. <see cref="P:Rdmp.UI.PieCharts.GoodBadCataloguePieChartObjectCollection.IncludeDeprecatedCatalogueItems"/>
            </summary>
            <param name="ci"></param>
            <returns></returns>
        </member>
        <member name="T:Rdmp.UI.PipelineUIs.DataObjects.DataFlowComponentVisualisation">
            <summary>
            TECHNICAL: Base class for PipelineComponentVisualisation but can also include empty components (no type selected yet)
            </summary>
        </member>
        <member name="F:Rdmp.UI.PipelineUIs.DataObjects.DataFlowComponentVisualisation.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.PipelineUIs.DataObjects.DataFlowComponentVisualisation.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.PipelineUIs.DataObjects.DataFlowComponentVisualisation.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.PipelineUIs.DataObjects.PipelineComponentVisualisation">
            <summary>
            Shows the state of a single pipeline component within a data flow pipeline (See 'Pipelines' in UserManual.md).  This includes the Type of the pipeline
            component, whether the software was able to create an instance of the type and whether it passed checking.  Components can be either a Source, Middle (of which there can be any 
            number) or Destination.  Objects (usually DataTables) flow through the pipeline and are processed by each component in turn.
            
            <para>But first the pipeline must be constructed, this component is used as part of <see cref="T:Rdmp.UI.PipelineUIs.Pipelines.PipelineDiagramUI"/> to let you adjust the order / add new components etc into your pipeline.  The pipeline
            itself is stored as a reusable resource in the Catalogue Database. </para>
            </summary>
        </member>
        <member name="T:Rdmp.UI.PipelineUIs.DemandsInitializationUIs.ArgumentCollectionUI">
            <summary>
            Allows you to specify values for any IArgumentHost class.  This control is used by the user at 'design time' (e.g. when they are building a data load configuration) and the values
            are then populated into instantiated runtime instances (not that this control cares about how that happens).  You will see a list of all properties marked with [DemandsInitialization]
            on the argument host class.  Selecting the Argument will display the help text associated with the argument (user friendly message telling them what they are supposed to put in for that
            property) and an appropriate user control for providing a value (for example an enum will show a dropdown while a string property will show a text box - See ArgumentUI).  
            </summary>
        </member>
        <member name="M:Rdmp.UI.PipelineUIs.DemandsInitializationUIs.ArgumentCollectionUI.Setup(Rdmp.UI.ItemActivation.IActivateItems,Rdmp.Core.Curation.Data.DataLoad.IArgumentHost,System.Type,Rdmp.Core.Repositories.ICatalogueRepository)">
            <summary>
            Reconfigures this UI (can be called multiple times throughout controls lifetime) to facilitate the population of DemandsInitialization
            properties on an underlying type (e.g. if your collection is ProcessTask and your argument type is ProcessTaskArgument then your underlying type could
            be AnySeparatorFileAttacher or MDFAttacher).  Note that while T is IArgumentHost, it also should be tied to one or more interfaces (e.g. IAttacher) and able to host
            any child of that interface of which argumentsAreForUnderlyingType is the currently configured concrete class (e.g. AnySeparatorFileAttacher).
            </summary>
            <param name="activator"></param>
            <param name="parent"></param>
            <param name="argumentsAreForUnderlyingType"></param>
            <param name="catalogueRepository"></param>
        </member>
        <member name="F:Rdmp.UI.PipelineUIs.DemandsInitializationUIs.ArgumentCollectionUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.PipelineUIs.DemandsInitializationUIs.ArgumentCollectionUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.PipelineUIs.DemandsInitializationUIs.ArgumentCollectionUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.PipelineUIs.DemandsInitializationUIs.ArgumentValueControls.ArgumentValueArrayUI">
            <summary>
            Allows you to specify the value of an IArugment (the database persistence value of a [DemandsInitialization] decorated Property on a MEF class e.g. a Pipeline components public property that the user can set)
            
            <para>This Control is for setting Properties that are of Array types TableInfo[], Catalogue[] etc</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.PipelineUIs.DemandsInitializationUIs.ArgumentValueControls.ArgumentValueArrayUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.PipelineUIs.DemandsInitializationUIs.ArgumentValueControls.ArgumentValueArrayUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.PipelineUIs.DemandsInitializationUIs.ArgumentValueControls.ArgumentValueArrayUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.PipelineUIs.DemandsInitializationUIs.ArgumentValueControls.ArgumentValueBoolUI">
            <summary>
            Allows you to specify the value of an IArugment (the database persistence value of a [DemandsInitialization] decorated Property on a MEF class e.g. a Pipeline components public property that the user can set)
            
            <para>This Control is for setting Properties that are of Type bool (true/false)</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.PipelineUIs.DemandsInitializationUIs.ArgumentValueControls.ArgumentValueBoolUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.PipelineUIs.DemandsInitializationUIs.ArgumentValueControls.ArgumentValueBoolUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.PipelineUIs.DemandsInitializationUIs.ArgumentValueControls.ArgumentValueBoolUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.PipelineUIs.DemandsInitializationUIs.ArgumentValueControls.ArgumentValueComboBoxUI">
            <summary>
            Allows you to specify the value of an IArugment (the database persistence value of a [DemandsInitialization] decorated Property on a MEF class e.g. a Pipeline components public property that the user can set)
            
            <para>This Control is for setting Properties that are of of a known colleciton type e.g. TableInfo (from all TableInfos in a dle configuration).</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.PipelineUIs.DemandsInitializationUIs.ArgumentValueControls.ArgumentValueComboBoxUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.PipelineUIs.DemandsInitializationUIs.ArgumentValueControls.ArgumentValueComboBoxUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.PipelineUIs.DemandsInitializationUIs.ArgumentValueControls.ArgumentValueComboBoxUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.PipelineUIs.DemandsInitializationUIs.ArgumentValueControls.ArgumentValueCustomUIDrivenClassUI">
            <summary>
            Allows you to specify the value of an IArugment (the database persistence value of a [DemandsInitialization] decorated Property on a MEF class e.g. a Pipeline components public property that the user can set)
            
            <para>This Control is for setting Properties that are of Type derrived from ICustomUIDrivenClass and require a specific plugin user interface to be displayed in order to let the user edit
            the value he wants (e.g. configure a web service endpoint with many properties that should be serialised / configured through a specific UI you have written).</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.PipelineUIs.DemandsInitializationUIs.ArgumentValueControls.ArgumentValueCustomUIDrivenClassUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.PipelineUIs.DemandsInitializationUIs.ArgumentValueControls.ArgumentValueCustomUIDrivenClassUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.PipelineUIs.DemandsInitializationUIs.ArgumentValueControls.ArgumentValueCustomUIDrivenClassUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.PipelineUIs.DemandsInitializationUIs.ArgumentValueControls.ArgumentValueDictionaryUI">
            <summary>
            Allows you to specify the value of an IArugment (the database persistence value of a [DemandsInitialization] decorated Property on a MEF class e.g. a Pipeline components public property that the user can set)
            
            <para>This Control is for setting Properties that are of Array types TableInfo[], Catalogue[] etc</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.PipelineUIs.DemandsInitializationUIs.ArgumentValueControls.ArgumentValueDictionaryUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.PipelineUIs.DemandsInitializationUIs.ArgumentValueControls.ArgumentValueDictionaryUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.PipelineUIs.DemandsInitializationUIs.ArgumentValueControls.ArgumentValueDictionaryUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.PipelineUIs.DemandsInitializationUIs.ArgumentValueControls.ArgumentValueLabelUI">
            <summary>
            Normally IArgumentValueUIs allows you to specify the value of an IArugment (the database persistence value of a [DemandsInitialization] decorated Property on a MEF class e.g. a Pipeline components public property that the user can set)
            
            <para>But in the case of this control the Type is not user editable but will be populated (hopefully) by the RDMP automatically e.g. CatalogueRepository.  In this case this control
            will display to the user some information about why he cannot specify a value for the IArgument.</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.PipelineUIs.DemandsInitializationUIs.ArgumentValueControls.ArgumentValueLabelUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.PipelineUIs.DemandsInitializationUIs.ArgumentValueControls.ArgumentValueLabelUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.PipelineUIs.DemandsInitializationUIs.ArgumentValueControls.ArgumentValueLabelUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.PipelineUIs.DemandsInitializationUIs.ArgumentValueControls.ArgumentValuePipelineUI">
            <summary>
            Allows you to specify the value of an IArugment (the database persistence value of a [DemandsInitialization] decorated Property on a MEF class e.g. a Pipeline components public property that the user can set)
            
            <para>This Control is for setting Properties that are Pipeline, (Requires the class to implement <see cref="T:Rdmp.Core.Curation.Data.Pipelines.IDemandToUseAPipeline"/>).</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.PipelineUIs.DemandsInitializationUIs.ArgumentValueControls.ArgumentValuePipelineUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.PipelineUIs.DemandsInitializationUIs.ArgumentValueControls.ArgumentValuePipelineUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.PipelineUIs.DemandsInitializationUIs.ArgumentValueControls.ArgumentValuePipelineUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.PipelineUIs.DemandsInitializationUIs.ArgumentValueControls.ArgumentValueSqlUI">
            <summary>
            Allows you to specify the value of an IArugment (the database persistence value of a [DemandsInitialization] decorated Property on a MEF class e.g. a Pipeline components public property that the user can set)
            
            <para>This Control is for setting Properties that are of Type string but expect SQL code.  Clicking the button will launch an SQL editor with syntax highlighting.</para>
            </summary>
        </member>
        <member name="M:Rdmp.UI.PipelineUIs.DemandsInitializationUIs.ArgumentValueControls.ArgumentValueSqlUI.FormatSqlForTextbox(System.Object)">
            <summary>
            Helper function to remove extra whitespace in SQL query so it looks nicer in a single line textbox
            </summary>
            <param name="sqlText"></param>
            <returns></returns>
        </member>
        <member name="F:Rdmp.UI.PipelineUIs.DemandsInitializationUIs.ArgumentValueControls.ArgumentValueSqlUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.PipelineUIs.DemandsInitializationUIs.ArgumentValueControls.ArgumentValueSqlUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.PipelineUIs.DemandsInitializationUIs.ArgumentValueControls.ArgumentValueSqlUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.PipelineUIs.DemandsInitializationUIs.ArgumentValueControls.ArgumentValueTextUI">
            <summary>
            Allows you to specify the value of an IArugment (the database persistence value of a [DemandsInitialization] decorated Property on a MEF class e.g. a Pipeline components public property that the user can set)
            
            <para>This Control is for setting Properties that can be represented as textual strings (this includes parsed types like int, Regex etc).</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.PipelineUIs.DemandsInitializationUIs.ArgumentValueControls.ArgumentValueTextUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.PipelineUIs.DemandsInitializationUIs.ArgumentValueControls.ArgumentValueTextUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.PipelineUIs.DemandsInitializationUIs.ArgumentValueControls.ArgumentValueTextUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.PipelineUIs.DemandsInitializationUIs.ArgumentValueControls.ArgumentValueUIArgs">
            <summary>
            Constructor arguments for <see cref="T:Rdmp.UI.PipelineUIs.DemandsInitializationUIs.ArgumentValueControls.IArgumentValueUI"/> implementations.  Records what property the control
            should allow editing (See <see cref="T:Rdmp.Core.Curation.Data.DataLoad.RequiredPropertyInfo"/>) and on what <see cref="T:Rdmp.Core.Curation.Data.DataLoad.IArgumentHost"/>.
            </summary>
        </member>
        <member name="P:Rdmp.UI.PipelineUIs.DemandsInitializationUIs.ArgumentValueControls.ArgumentValueUIArgs.Setter">
            <summary>
            Call this when the value populated in the user interface is changed
            </summary>
        </member>
        <member name="P:Rdmp.UI.PipelineUIs.DemandsInitializationUIs.ArgumentValueControls.ArgumentValueUIArgs.Fatal">
            <summary>
            Call this when the value populated in the user interface is illegal
            </summary>
        </member>
        <member name="T:Rdmp.UI.PipelineUIs.DemandsInitializationUIs.ArgumentValueControls.ArgumentValueUIFactory">
            <summary>
            Handles creating instances of the correct implementation of <see cref="T:Rdmp.UI.PipelineUIs.DemandsInitializationUIs.ArgumentValueControls.IArgumentValueUI"/> based on the Type
            of property being edited <see cref="T:Rdmp.UI.PipelineUIs.DemandsInitializationUIs.ArgumentValueControls.ArgumentValueUIArgs"/>
            </summary>
        </member>
        <member name="M:Rdmp.UI.PipelineUIs.DemandsInitializationUIs.ArgumentValueControls.ArgumentValueUIFactory.CanHandleInvalidStringData(System.Type)">
            <summary>
            Returns true if the <see cref="T:Rdmp.UI.PipelineUIs.DemandsInitializationUIs.ArgumentValueControls.IArgumentValueUI"/> for the given <paramref name="argsType"/> supports being
            sent illegal string values (e.g. "fish" for typeof(int)).
            </summary>
            <param name="argsType"></param>
            <returns></returns>
        </member>
        <member name="T:Rdmp.UI.PipelineUIs.DemandsInitializationUIs.ArgumentValueControls.IArgumentValueUI">
             <summary>
             Interface for controls that allow the user to edit a single property of a class (Marked with <see cref="T:Rdmp.Core.Curation.Data.DemandsInitializationAttribute"/>).
             Each implementation class should only handle a specific Property Type (e.g. TextBox for string).
            
             <para>When adding a new implementation make sure the system is aware of it in <see cref="T:Rdmp.UI.PipelineUIs.DemandsInitializationUIs.ArgumentValueControls.ArgumentValueUIFactory"/></para>
             </summary>
        </member>
        <member name="T:Rdmp.UI.PipelineUIs.Pipelines.ConfigureAndExecutePipelineUI">
            <summary>
            Reusable component shown by the RDMP whenever it wants you to select a pipeline to achieve a task (See 'Pipelines' is UserManual.md).  The task will
            be clearly described at the top of the form, this might be 'loading a flat file into the database to create a new cohort' (the actual description will be more verbose and clear 
            though).
            
            <para>You should read the task description and select an appropriate pipeline (which will appear in the pipeline diagram along with the input objects this window was launched with).  If
            you don't have a pipeline yet you can create a new one (See ConfigurePipelineUI).</para>
            
            <para>Input objects are the objects that are provided to accomplish the task (for example a file you are trying to load).  You can usually double click input objects to learn more about
            them (e.g. open a file, view a cohort etc).  </para>
            
            <para>This may seem like a complicated approach to user interface design but it allows for maximum plugin architecture and freedom to build your own business practices into routine tasks
            like cohort committing, data extraction etc.</para>
            
            </summary>
        </member>
        <member name="E:Rdmp.UI.PipelineUIs.Pipelines.ConfigureAndExecutePipelineUI.PipelineExecutionStarted">
            <summary>
            Fired when the user executes the pipeline (this can happen multiple times if it crashes).
            </summary>
        </member>
        <member name="E:Rdmp.UI.PipelineUIs.Pipelines.ConfigureAndExecutePipelineUI.PipelineExecutionFinishedsuccessfully">
            <summary>
            Fired when the pipeline finishes execution without throwing an exception.
            </summary>
        </member>
        <member name="F:Rdmp.UI.PipelineUIs.Pipelines.ConfigureAndExecutePipelineUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.PipelineUIs.Pipelines.ConfigureAndExecutePipelineUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.PipelineUIs.Pipelines.ConfigureAndExecutePipelineUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.PipelineUIs.Pipelines.ConfigurePipelineUI">
            <summary>
            Allows you to name, describe and configure a Data Flow Pipeline (IPipeline).  This is a flow of objects (usually DataTables) from a Source through 0 or more Components to a Destination.
            Depending on the context the source and/or/neither destination may be fixed.  There will also be zero or more initialization objects which components can consume.  For example if you
            are trying to build a pipeline to import a FlatFileToLoad into your database then you might use a DelimitedFlatFileDataFlowSource component to read the file (assuming it wasn't fixed 
            width or a database file or anything wierd) and a DataTableUploadDestination to put it into the endpoint.  
            </summary>
        </member>
        <member name="F:Rdmp.UI.PipelineUIs.Pipelines.ConfigurePipelineUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.PipelineUIs.Pipelines.ConfigurePipelineUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.PipelineUIs.Pipelines.ConfigurePipelineUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.PipelineUIs.Pipelines.IPipelineSelectionUI">
            <summary>
            Allows you to pick an <see cref="T:Rdmp.Core.Curation.Data.Pipelines.IPipeline"/> (or create a new one) to achieve a data flow task (e.g. load a file as a new dataset or attach
            custom data to a cohort etc - See <see cref="T:Rdmp.Core.Curation.Data.Pipelines.IPipelineUseCase"/>).
            
            <para>If you cannot see the pipeline you expected to see then it is possible that the pipeline is broken or somehow otherwise incompatible with the
            current context.  If this is the case then you can untick 'Only Show Compatible Pipelines' which will show all Pipelines of the type T (usually DataTable).
            You should only use this feature to edit Pipelines as there is zero chance they will execute Successfully if they are not compatible with the
            DataFlowPipelineContext.</para>
            </summary>
        </member>
        <member name="T:Rdmp.UI.PipelineUIs.Pipelines.Models.DividerLineControl">
            <summary>
            Used in <see cref="T:Rdmp.UI.PipelineUIs.Pipelines.PipelineDiagramUI"/> to indicate an area you can drag and drop a 'Middle' flow component into your Pipeline.  Also allows you to drag and drop 'Middle' flow components that
            are already in the pipeline to reorder them.
            </summary>
        </member>
        <member name="F:Rdmp.UI.PipelineUIs.Pipelines.Models.DividerLineControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.PipelineUIs.Pipelines.Models.DividerLineControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.PipelineUIs.Pipelines.Models.DividerLineControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.PipelineUIs.Pipelines.PipelineDiagramUI">
            <summary>
            Used to visualise an IPipeline (See ConfigurePipelineUI and ConfigureAndExecutePipelineUI for what these are).  This control has a readonly/editable setting on it.  In dialogs where
            you are selecting an IPipeline you will see the diagram rendered readonly.  If you are editting  (See PipelineWorkAreaUI and ConfigurePipelineUI) then you will be able to select
            and drag and drop in new components to make an IPipeline configuration.  On such a dialog you can also select a component to change the components arguments (See ArgumentCollection).
            </summary>
        </member>
        <member name="F:Rdmp.UI.PipelineUIs.Pipelines.PipelineDiagramUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.PipelineUIs.Pipelines.PipelineDiagramUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.PipelineUIs.Pipelines.PipelineDiagramUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.PipelineUIs.Pipelines.PipelineSelectionUI">
            <inheritdoc cref="T:Rdmp.UI.PipelineUIs.Pipelines.IPipelineSelectionUI" />
        </member>
        <member name="M:Rdmp.UI.PipelineUIs.Pipelines.PipelineSelectionUI.RefreshPipelineList">
            <summary>
            Refresh the list of pipeline components
            </summary>
        </member>
        <member name="M:Rdmp.UI.PipelineUIs.Pipelines.PipelineSelectionUI.CollapseToSingleLineMode">
            <summary>
            Turns the control into a single line ui control
            </summary>
        </member>
        <member name="F:Rdmp.UI.PipelineUIs.Pipelines.PipelineSelectionUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.PipelineUIs.Pipelines.PipelineSelectionUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.PipelineUIs.Pipelines.PipelineSelectionUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.PipelineUIs.Pipelines.PipelineWorkAreaUI">
            <summary>
            Main component control of ConfigurePipelineUI (See ConfigurePipelineUI for details).  Shows you all compatible components on the left including any plugin components.  Components in 
            red are not compatible with the current context for example a DelimitedFlatFileDataFlowSource requires a FlatFileToLoad and is therefore incompatible under any context where that object is
            not available.
            </summary>
        </member>
        <member name="M:Rdmp.UI.PipelineUIs.Pipelines.PipelineWorkAreaUI.RefreshComponentList">
            <summary>
            Refreshes the list of components visible in <see cref="F:Rdmp.UI.PipelineUIs.Pipelines.PipelineWorkAreaUI.olvComponents"/> list view to only those
            that are compatible (unless <see cref="F:Rdmp.UI.PipelineUIs.Pipelines.PipelineWorkAreaUI.cbShowIncompatible"/> is ticked)
            </summary>
        </member>
        <member name="F:Rdmp.UI.PipelineUIs.Pipelines.PipelineWorkAreaUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.PipelineUIs.Pipelines.PipelineWorkAreaUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.PipelineUIs.Pipelines.PipelineWorkAreaUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.PipelineUIs.Pipelines.PluginPipelineUsers.PipelineSelectionUIFactory">
            <summary>
            Factory for <see cref="T:Rdmp.UI.PipelineUIs.Pipelines.IPipelineSelectionUI"/> instances based on <see cref="T:Rdmp.Core.Curation.Data.Pipelines.PipelineUseCase"/> (what activity the pipelines
            are intended for use in). 
            </summary>
        </member>
        <member name="T:Rdmp.UI.PipelineUIs.Pipelines.PluginPipelineUsers.PluginPipelineUser">
            <summary>
            Turns an IDemandToUseAPipeline plugin class into an IPipelineUser and IPipelineUseCase (both) for use with PipelineSelectionUIFactory
            </summary>
        </member>
        <member name="T:Rdmp.UI.PluginManagement.CodeGeneration.CodeGenerationException">
            <summary>
            Thrown when there is a problem a database table that means <see cref="T:Rdmp.UI.PluginManagement.CodeGeneration.MapsDirectlyToDatabaseTableClassCodeGenerator"/> can not generate
            code for a <see cref="T:Rdmp.Core.MapsDirectlyToDatabaseTable.IMapsDirectlyToDatabaseTable"/> compatible with it (e.g. it doesn't have an ID column).
            </summary>
        </member>
        <member name="T:Rdmp.UI.PluginManagement.CodeGeneration.GenerateClassCodeFromTableUI">
            <summary>
            TECHNICAL: Allows you as a C# programmer to generate RDMP code automatically to help you build plugins and particularly plugin ITableRepository databases more efficiently.
            </summary>
        </member>
        <member name="F:Rdmp.UI.PluginManagement.CodeGeneration.GenerateClassCodeFromTableUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.PluginManagement.CodeGeneration.GenerateClassCodeFromTableUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.PluginManagement.CodeGeneration.GenerateClassCodeFromTableUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.PluginManagement.CodeGeneration.MapsDirectlyToDatabaseTableClassCodeGenerator">
            <summary>
            Generates template code for a <see cref="T:Rdmp.Core.MapsDirectlyToDatabaseTable.IMapsDirectlyToDatabaseTable"/> implementation class which
            models the data in the table (like a budget version of entity framework).
            </summary>
        </member>
        <member name="T:Rdmp.UI.Progress.ProgressBarsUI">
            <summary>
            Cut down version of ProgressUI which shows progress events as bars.  If a progress event has a known target number the bar will indicate progress otherwise
            it will be a Marquee bar (one with a moving unknown progress animation).  All Notify events are displayed under the smiley face (or frowning if the process
            has crashed)
            </summary>
        </member>
        <member name="F:Rdmp.UI.Progress.ProgressBarsUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.Progress.ProgressBarsUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.Progress.ProgressBarsUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.Progress.ProgressUI">
            <summary>
            There are two main event systems in play in the RDMP.  There is Checking and Progress.  Checking activities are tasks that should be supervised and can block asking the user
            whether or not a proposed fix to a problem should be applied (See ChecksUI).  Progress activities are messages only and can also include numerical update messages indicating 
            that progress is made towards a fixed number e.g. you could get 1000 messages over the course of an hour reporting how close towards a goal of 1,000,000 records a given task is.
            
            <para>This control handles progress messages.  For Checks event system see ChecksUI.</para>
            
            <para>ProgressUI handles progress messages of numerical progress (in either records or kilobytes) by updating the datagrid.  Messages appear in the Notifications area and 
            function very similarly to ChecksUI (you can double click them to view the message/copy it / view stack traces etc).  Because classes can be quite enthusiastic about notifying 
            progress this control buffers all messages it receives and only updates the user interface once every 3s (this improves performance).  All date/times come from the buffered messages
            so there is no impact from the 3s refresh rate on those. </para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.Progress.ProgressUI.GlobalRunError">
            <summary>
            Sender for all global errors that should never be filtered out of the <see cref="T:Rdmp.UI.Progress.ProgressUI"/>
            </summary>
        </member>
        <member name="F:Rdmp.UI.Progress.ProgressUI.MaxNumberOfJobsAcceptableFromSenderBeforeThrottlingKicksIn">
            <summary>
            See HandleFloodOfMessagesFromJob, basically if the message in a progress event changes over time we don't want to spam the datagrid so instead we just note that there is a
            flood of distinct messages coming from a specific source component
            </summary>
        </member>
        <member name="M:Rdmp.UI.Progress.ProgressUI.GetWorst">
            <summary>
            Returns the worst message recorded in the UI
            </summary>
            <returns></returns>
        </member>
        <member name="F:Rdmp.UI.Progress.ProgressUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.Progress.ProgressUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.Progress.ProgressUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.Progress.ProgressUIEntry">
            <summary>
            Represents a single <see cref="T:Rdmp.Core.ReusableLibraryCode.Progress.NotifyEventArgs"/> with supplemental data such as the date and sender.  This is the object
            shown in <see cref="T:Rdmp.UI.Progress.ProgressUI"/>.
            </summary>
        </member>
        <member name="T:Rdmp.UI.ProjectUI.Datasets.ConfigureDatasetUI">
            <summary>
            Allows you to choose which columns you want to extract from a given dataset (Catalogue) for a specific research project extraction (ExtractionConfiguration).  For example
            Researcher A wants prescribing dataset including all the Core columns but he also has obtained governance approval to receive Supplemental column 'PrescribingGP' so the
            configuration would need to include this column.
            
            <para>On the left you can see all the available columns and transforms in the selected dataset (see ExtractionConfigurationUI for selecting datasets).  You can add these by selecting them
            and pressing the '>' button.  On the right the QueryBuilder will show you what columns are currently included in the researchers extract. </para>
            
            <para>Depending on which columns you have selected the QueryBuilder may be unable to generate a query (for example if you do not add the IsExtractionIdentifier column - See 
            ExtractionInformationUI).</para>
            </summary>
        </member>
        <member name="M:Rdmp.UI.ProjectUI.Datasets.ConfigureDatasetUI.SetupUserInterface">
            <summary>
            The left list contains ExtractionInformation from the Data Catalogue, this is columns in the database which could be extracted
            The right list contains ExtractableColumn which is a more advanced class that contains runtime configurations such as order to be outputed in etc.
            </summary>
        </member>
        <member name="M:Rdmp.UI.ProjectUI.Datasets.ConfigureDatasetUI.IsAlreadySelected(Rdmp.Core.QueryBuilding.IColumn)">
            <summary>
            Determines whether this potential extractable column (identified by the catalogue) is already selected and configured
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Rdmp.UI.ProjectUI.Datasets.ConfigureDatasetUI.ExcludeAll">
            <summary>
            Removes all currently selected <see cref="T:Rdmp.Core.DataExport.Data.ExtractableColumn"/> from the <see cref="T:Rdmp.Core.DataExport.Data.SelectedDataSets"/> (leaving it empty)
            </summary>
        </member>
        <member name="M:Rdmp.UI.ProjectUI.Datasets.ConfigureDatasetUI.IncludeAll">
            <summary>
            Adds all available source columns in the <see cref="T:Rdmp.Core.Curation.Data.Catalogue"/> into the extraction
            </summary>
        </member>
        <member name="M:Rdmp.UI.ProjectUI.Datasets.ConfigureDatasetUI.Include(Rdmp.Core.QueryBuilding.IColumn[])">
            <summary>
            The user has selected an extractable thing in the catalogue and opted to include it in the extraction
            So we have to convert it to an <see cref="T:Rdmp.Core.DataExport.Data.ExtractableColumn"/> (which has configuration specific stuff - and let's
            data analyst override stuff for this extraction only)
            
            <para>Then add it to the right hand list</para>
            </summary>
            <param name="columns"></param>
        </member>
        <member name="F:Rdmp.UI.ProjectUI.Datasets.ConfigureDatasetUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.ProjectUI.Datasets.ConfigureDatasetUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.ProjectUI.Datasets.ConfigureDatasetUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Rdmp.UI.ProjectUI.Datasets.Node.AvailableForceJoinNode.IsIncludedInQuery">
            <summary>
            The table will be in the query if it IsMandatory (becaues of the columns the user has selected) or is explicitly picked for inclusion by the user (ForcedJoin)
            </summary>
        </member>
        <member name="M:Rdmp.UI.ProjectUI.Datasets.Node.AvailableForceJoinNode.FindJoinsBetween(Rdmp.Core.Providers.ICoreChildProvider,System.Collections.Generic.HashSet{Rdmp.UI.ProjectUI.Datasets.Node.AvailableForceJoinNode})">
            <summary>
            Populates <see cref="P:Rdmp.UI.ProjectUI.Datasets.Node.AvailableForceJoinNode.JoinInfos"/> by finding all potential joins to <paramref name="otherNodes"/>
            </summary>
            <param name="coreChildProvider"></param>
            <param name="otherNodes"></param>
        </member>
        <member name="T:Rdmp.UI.ProjectUI.ExecuteExtractionUI">
            <summary>
            Allows you to execute an extraction of a project configuration (Generate anonymous project data extractions for researchers).  You should make sure that you have already selected 
            the correct datasets, filters, transforms etc to meet the researchers project requirements (and governance approvals) - See ExtractionConfigurationUI and ConfigureDatasetUI.
            
            <para>Start by selecting which datasets you want to execute (this can be an iterative process - you can extract half of them overnight and then come back and extract the other half the 
            next night).</para>
            
            <para>Next you should select/create a new extraction pipeline (See 'Pipelines' in UserManual.md).  This will determine the format of the extracted data
            (e.g. .CSV or .MDB database file or any other file for which you have a plugin implemented for).</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.ProjectUI.ExecuteExtractionUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.ProjectUI.ExecuteExtractionUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.ProjectUI.ExecuteExtractionUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.ProjectUI.ExtractionConfigurationUI">
            <summary>
            Allows you to change high level attributes of an ExtractionConfiguration in a data extraction Project.  Executing an ExtractionConfiguration involves joining the 
            selected datasets against the selected cohort (and substituting the private identifiers for project specific anonymous release identifiers) as well as applying any
            configured filters (See ConfigureDatasetUI).  You can have multiple active configurations in a project, for example you might extract 'Prescribing', 'Biochemistry' and 'Demography' for the cohort 'CasesForProject123' and
            only datasets 'Biochemistry' and 'Demography' for the cohort 'ControlsForProject123'.
            
            <para>The attributes you can change include the name, description, ticketting system tickets etc.</para>
            
            <para>You can also define global SQL parameters which will be available to all Filters in all datasets extracted as part of the configuration.</para>
            
            <para>You can associate a specific CohortIdentificationConfiguration with the ExtractionConfiguration.  This will allow you to do a 'cohort refresh' (replace the current saved cohort 
            identifier list with a new version built by executing the query - helpful if you have new data being loaded regularly and this results in the study cohort changing).</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.ProjectUI.ExtractionConfigurationUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.ProjectUI.ExtractionConfigurationUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.ProjectUI.ExtractionConfigurationUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.ProjectUI.Graphs.ExtractionAggregateGraphUI">
            <summary>
            As part of the ongoing effort to ensure extracted project data is correct (releasing incorrect data to a researcher is about the worst mistake you can make as a data analyst) a 
            feature was added which allows execution of aggregate graphs (See AggregateGraph) on the project extraction SQL.
            
            <para>This control lets you execute a dataset aggregate graph but restricted to the dataset extraction configuration you are working on (only including the records which will be extracted
            when you execute the project extraction).  This is achieved by adjusting the WHERE statement in the Aggregate SQL built by the AggregateBuilder to include the Cohort joins and any 
            data extraction filters.  Because of this transformation, depending on your indexes the graphs may take a long time to run (especially if the basic dataset aggregate graph takes a 
            long time to execute).</para>
            
            <para>You can speed up these graphs by viewing the SQL generated by the system and running it in SQL Management Studio with the Query Analyser turned on and creating appropriate indexes.</para>
            </summary>
        </member>
        <member name="T:Rdmp.UI.ProjectUI.Graphs.ExtractionAggregateGraphObjectCollection">
            <summary>
            Persistence/instantiation collection for <see cref="T:Rdmp.UI.ProjectUI.Graphs.ExtractionAggregateGraphUI"/>.  Records which <see cref="P:Rdmp.UI.ProjectUI.Graphs.ExtractionAggregateGraphObjectCollection.Graph"/> is being
            visualized (e.g. healthboards over time) with which extractable dataset in which extraction (<see cref="P:Rdmp.UI.ProjectUI.Graphs.ExtractionAggregateGraphObjectCollection.SelectedDataSets"/>)
            </summary>
        </member>
        <member name="P:Rdmp.UI.ProjectUI.Graphs.ExtractionAggregateGraphObjectCollection.SelectedDataSets">
            <summary>
            The extraction dataset (in a given <see cref="T:Rdmp.Core.DataExport.Data.ExtractionConfiguration"/>) to which the <see cref="P:Rdmp.UI.ProjectUI.Graphs.ExtractionAggregateGraphObjectCollection.Graph"/> results
            should be limited.  The graph should only depict records appearing in this extract.
            </summary>
        </member>
        <member name="P:Rdmp.UI.ProjectUI.Graphs.ExtractionAggregateGraphObjectCollection.Graph">
            <summary>
            The graph to be shown
            </summary>
        </member>
        <member name="M:Rdmp.UI.ProjectUI.Graphs.ExtractionAggregateGraphObjectCollection.#ctor">
            <summary>
            Constructor used for persistence
            </summary>
        </member>
        <member name="M:Rdmp.UI.ProjectUI.Graphs.ExtractionAggregateGraphObjectCollection.#ctor(Rdmp.Core.DataExport.Data.SelectedDataSets,Rdmp.Core.Curation.Data.Aggregation.AggregateConfiguration)">
            <summary>
            Use this constructor at runtime
            </summary>
            <param name="selectedDataSet"></param>
            <param name="graph"></param>
        </member>
        <member name="M:Rdmp.UI.ProjectUI.Graphs.ExtractionAggregateGraphObjectCollection.IsImpossible(System.String@)">
            <summary>
            Returns true if the collection is not in a fit state to generate the graph.  Note that
            the graph may still fail later in the query generation/execution phase.  This is just
            fast checks that can be quickly performed e.g. is there a cohort on the ExtractionConfiguration
            </summary>
            <param name="reason"></param>
            <returns></returns>
        </member>
        <member name="T:Rdmp.UI.ProjectUI.ProjectUI">
            <summary>
            Allows you to view/edit a data extraction project including the extraction configurations that make it up (See ExtractionConfigurationUI).  
            
            <para>First make sure your Project has a nice unique name that lets you rapidly identify it.  Next choose the 'Extraction Directory', this is the location where extracted data will be
            generated (See ExecuteExtractionUI).  Make sure that the extraction directory is accessible to every data analyst who is using the software / working on the project (e.g. it could
            be a shared network drive).</para>
            
            <para>Optionally you can specify a Ticket for logging time/issues against (See TicketingSystemConfigurationUI)</para>
            
            <para>Add a ProjectNumber, this number must be unique.  This number must match the project number of the cohorts you intend to use with the project in the Cohort Database (you only need
            to worry about a mismatch here if you are manually hacking your cohort database or if you change the project number halfway through its lifecycle).</para>
             
            <para>Right clicking in the datagrid will allow you to create new Extraction Configurations for the project or edit existing ones.  An extraction configuration is a collection of 
            datasets linked against a cohort private identifier and released against an anonymous project specific identifier (See ExtractableCohortUI and ExtractionConfigurationUI).  Once 
            you have a few Extraction Configurations, they will appear in the datagrid too.</para>
            
            <para>Selecting 'Check Project' will check all current and released extraction configurations in the project for problems (empty result sets, broken extraction SQL etc).</para>
             
            </summary>
        </member>
        <member name="F:Rdmp.UI.ProjectUI.ProjectUI._rightClickedRowExtractionConfigurationID">
            <summary>
            Set when the user right clicks a row, so that we can reference the row in the handlers of the ToolStripMenuItems
            </summary>
        </member>
        <member name="F:Rdmp.UI.ProjectUI.ProjectUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.ProjectUI.ProjectUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.ProjectUI.ProjectUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Rdmp.UI.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Rdmp.UI.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:Rdmp.UI.Raceway.DatasetRaceway">
            <summary>
            Allows you to quickly view the timespan of each of your datasets, which sections of your datasets are failing validation (e.g. 'Prescribing' 2001-2002 records are all failing
            validation but 2003 onwards are fine) and identify any gaps in your record coverage.
            
            <para>Each dataset appears as a green/red bar along a shared axis (See RacewayRenderAreaUI).  You can switch from viewing all months for which you have data, only
            the last decade, year or last 6 months.</para>
            
            <para>By default the row height of each bar in a dataset indicates the proportion of records in that month relative to the average number of records per month, this allows you to see for
            example the gradual increase in volume of records per month in a dataset and identify any periods where it doubles (may indicate duplication) or a hole appears.  If you tick 'Ignore
            Row Counts' then full bars will appear only, this lets you identify which datasets are responsible for sparse errors (e.g. if 'Biochemistry' has 1,00,000,000 and some records have
            dates sprinkled between 1900-01-01 and 2000-01-01 then these will appear on the axis but won't be visible due to how sparse the number of error records are).</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.Raceway.DatasetRaceway.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.Raceway.DatasetRaceway.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.Raceway.DatasetRaceway.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.Raceway.DatasetRacewayObjectCollection">
            <summary>
            Input/Persistence collection for <see cref="T:Rdmp.UI.Raceway.DatasetRaceway"/>
            </summary>
        </member>
        <member name="T:Rdmp.UI.Raceway.RacewayRenderAreaUI">
            <summary>
            Part of DatasetRaceway, this control shows a miniature bar chart with 1 bar per month of data held within the dataset.  Bar colour indicates the proportion of records in that month
            which are passing/failing validation (green = passing, red = failing).  The month axis is shared across all datasets in the DatasetRaceway meaning that you see a continuous axis
            that spans the whole length of time you have been holding data for in any of your datasets.  The data for this graph comes from the Data Quality Engine evaluations database so if
            you have never run the DQE on a given dataset it will not appear in the DatasetRaceway.
            
            <para>In DatasetRaceway you can adjust the scope of the axis down from 'All Time' to 'Last Decade',  'Last Year' or 'Last 6 months' if you just want to see how up-to-date each dataset
            is in finer detail.</para>
            
            <para>The overall effect of this control is to allow you to rapidly identify any datasets that you host which have suddenly started failing validation, see where each dataset starts and
            if there are any gaps or periods of duplication (e.g. where the bars double in height for a period).</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.Raceway.RacewayRenderAreaUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.Raceway.RacewayRenderAreaUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.Raceway.RacewayRenderAreaUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.RecentHistoryOfControls">
            <summary>
            Maintains lists of recently typed things into text boxes etc, use HostControl to have this class setup all the autocomplete and monitor .Leave events for self population
            Once you call HostControl then that is you done, this class does the rest.
            </summary>
        </member>
        <member name="T:Rdmp.UI.Refreshing.ILifetimeSubscriber">
             <summary>
             <see cref="T:Rdmp.UI.Refreshing.IRefreshBusSubscriber"/> for <see cref="T:System.Windows.Forms.Control"/> classes which want their lifetime to be linked to a single
             <see cref="T:Rdmp.Core.MapsDirectlyToDatabaseTable.IMapsDirectlyToDatabaseTable"/> object.  This grants notifications of publish events about the object and ensures
             your <see cref="T:System.Windows.Forms.Control"/> is closed when/if the object is deleted.
            
             <para>See <see cref="M:Rdmp.UI.Refreshing.RefreshBus.EstablishLifetimeSubscription(Rdmp.UI.Refreshing.ILifetimeSubscriber)"/></para>
             </summary>
        </member>
        <member name="T:Rdmp.UI.Refreshing.IRefreshBusSubscriber">
            <summary>
            Interface for any class that wants to subscribe to publish events in the <see cref="T:Rdmp.UI.Refreshing.RefreshBus"/>. You
            should consider using <see cref="T:Rdmp.UI.Refreshing.ILifetimeSubscriber"/> if you are a UI or inherit from <see cref="T:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPSingleDatabaseObjectControl`1"/>
            directly.
            </summary>
        </member>
        <member name="M:Rdmp.UI.Refreshing.IRefreshBusSubscriber.RefreshBus_RefreshObject(System.Object,Rdmp.UI.Refreshing.RefreshObjectEventArgs)">
            <summary>
            Called when 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Rdmp.UI.Refreshing.RefreshBus">
            <summary>
            Dispatcher class for publish events (<see cref="T:Rdmp.UI.CommandExecution.AtomicCommands.ExecuteCommandRefreshObject"/>)
            </summary>
        </member>
        <member name="E:Rdmp.UI.Refreshing.RefreshBus.BeforePublish">
            <summary>
            This event exists so that the IActivateItems can precache data for use by subscribers during publishing refresh events.  Do not subscribe to this event if you just want to
            know when stuff has changed, instead use the Subscribe and Unsubscribe methods 
            </summary>
        </member>
        <member name="M:Rdmp.UI.Refreshing.RefreshBus.EstablishSelfDestructProtocol``1(Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPSingleDatabaseObjectControl{``0},Rdmp.UI.ItemActivation.IActivateItems,``0)">
            <summary>
            Registers your control as a lifetime user of RefreshBus without you having to implement ILifetimeSubscriber.  The implementation instead is the following:
            1. If the RefreshBus sees a refresh for any object that was not Published by yourself
                1.1 Refreshbus will check your originalObject still Exists
                1.2 If not then your ParentForm will be .Closed
            2. If the RefreshBus sees a refresh for your object specifically (that was not published by yourself)
                2.1 SetDatabaseObject will be called with the new state (in memory as it was passed to Publish) of the object
            
            <para>Note: you can subscribe to EstablishSelfDestructProtocol in your SetDatabaseObject method if you want without worrying about repeat subscriptions but know that only
            the first subscription is respected therefore you should NOT change the database object to a different one</para>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="user"></param>
            <param name="activator"></param>
            <param name="originalObject"></param>
        </member>
        <member name="T:Rdmp.UI.Refreshing.RefreshObjectEventArgs">
            <summary>
            EventArgs describing a refresh event being broadcast by a <see cref="T:Rdmp.UI.Refreshing.RefreshBus"/>.  Includes the <see cref="P:Rdmp.UI.Refreshing.RefreshObjectEventArgs.Object"/> that is in a new state,
            whether it still <see cref="P:Rdmp.UI.Refreshing.RefreshObjectEventArgs.Exists"/> etc.
            </summary>
        </member>
        <member name="T:Rdmp.UI.Refreshing.SubscriptionException">
            <summary>
            Thrown when a <see cref="T:Rdmp.UI.Refreshing.IRefreshBusSubscriber"/> performs an illegal activity (e.g. subscribing twice or attempting to trigger a new publish
            while in a event handler responding to an ongoing publish).
            </summary>
        </member>
        <member name="T:Rdmp.UI.ResearchDataManagementPlatformOptions">
            <summary>
            Defines the command line arguments of ResearchDataManagementPlatform.exe when run from the command line / shortcut
            </summary>
        </member>
        <member name="T:Rdmp.UI.RichTextBoxEx">
            <summary>
            Text box with support for hyperlinks.
            </summary>
        </member>
        <member name="M:Rdmp.UI.RichTextBoxEx.InsertLink(System.String)">
            <summary>
            Insert a given text as a link into the RichTextBox at the current insert position.
            </summary>
            <param name="text">Text to be inserted</param>
        </member>
        <member name="M:Rdmp.UI.RichTextBoxEx.InsertLink(System.String,System.Int32)">
            <summary>
            Insert a given text at a given position as a link. 
            </summary>
            <param name="text">Text to be inserted</param>
            <param name="position">Insert position</param>
        </member>
        <member name="M:Rdmp.UI.RichTextBoxEx.InsertLink(System.String,System.String)">
            <summary>
            Insert a given text at at the current input position as a link.
            The link text is followed by a hash (#) and the given hyperlink text, both of
            them invisible.
            When clicked on, the whole link text and hyperlink string are given in the
            LinkClickedEventArgs.
            </summary>
            <param name="text">Text to be inserted</param>
            <param name="hyperlink">Invisible hyperlink string to be inserted</param>
        </member>
        <member name="M:Rdmp.UI.RichTextBoxEx.InsertLink(System.String,System.String,System.Int32)">
            <summary>
            Insert a given text at a given position as a link. The link text is followed by
            a hash (#) and the given hyperlink text, both of them invisible.
            When clicked on, the whole link text and hyperlink string are given in the
            LinkClickedEventArgs.
            </summary>
            <param name="text">Text to be inserted</param>
            <param name="hyperlink">Invisible hyperlink string to be inserted</param>
            <param name="position">Insert position</param>
        </member>
        <member name="M:Rdmp.UI.RichTextBoxEx.SetSelectionLink(System.Boolean)">
            <summary>
            Set the current selection's link style
            </summary>
            <param name="link">true: set link style, false: clear link style</param>
        </member>
        <member name="M:Rdmp.UI.RichTextBoxEx.GetSelectionLink">
            <summary>
            Get the link style for the current selection
            </summary>
            <returns>0: link style not set, 1: link style set, -1: mixed</returns>
        </member>
        <member name="F:Rdmp.UI.Rules.BinderRule`1.PropertyToCheckName">
            <summary>
            The member on <see cref="F:Rdmp.UI.Rules.BinderRule`1.ToTest"/> that 
            </summary>
        </member>
        <member name="M:Rdmp.UI.Rules.BinderRule`1.IsValid(System.Object,System.Type)">
            <summary>
            Return null if the <paramref name="currentValue"/> is valid or a message describing the problem
            if it is not.
            </summary>
            <param name="currentValue"></param>
            <param name="typeToTest"></param>
            <returns></returns>
        </member>
        <member name="T:Rdmp.UI.Rules.BinderWithErrorProviderFactory">
            <summary>
            Factory for generating <see cref="T:System.Windows.Forms.Binding"/>s for a <see cref="T:System.Windows.Forms.Control"/> and automatically configuring error providers based on
            whether the bound property has relevant attributes (e.g. <see cref="T:Rdmp.Core.MapsDirectlyToDatabaseTable.Attributes.UniqueAttribute"/>, <see cref="T:Rdmp.Core.ReusableLibraryCode.Annotations.NotNullAttribute"/>).
            </summary>
        </member>
        <member name="T:Rdmp.UI.Rules.IBinderRule">
            <summary>
            Interface for implementations of <see cref="T:System.Windows.Forms.Binding"/> validation based upon a relevant attribute (e.g. <see cref="T:Rdmp.Core.ReusableLibraryCode.Annotations.NotNullAttribute"/>)
            </summary>
        </member>
        <member name="T:Rdmp.UI.Rules.MaxLengthRule`1">
            <summary>
            Checks the database for the column that backs the given property and then
            reports an error if it is too long to fit
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Rdmp.UI.ScintillaHelper.CSharpLexer">
            <summary>
            Syntax highlighter for <see cref="T:ScintillaNET.Scintilla"/>
            </summary>
        </member>
        <member name="T:Rdmp.UI.ScintillaHelper.ScintillaLineHighlightingHelper">
            <summary>
            Helper for highlighting specific lines of a <see cref="T:ScintillaNET.Scintilla"/> text editor.
            </summary>
        </member>
        <member name="P:Rdmp.UI.ScintillaHelper.ScintillaMenu.Hunspell">
            <summary>
            Spell checker for the hosted control.  If set then right clicks will spell check the word
            under the caret and show suggestions
            </summary>
        </member>
        <member name="T:Rdmp.UI.ScintillaHelper.ScintillaTextEditorFactory">
            <summary>
            Factory for creating instances of <see cref="T:ScintillaNET.Scintilla"/> with a consistent look and feel and behaviour (e.g. drag and drop).
            </summary>
        </member>
        <member name="M:Rdmp.UI.ScintillaHelper.ScintillaTextEditorFactory.Create(Rdmp.UI.CommandExecution.ICombineableFactory,Rdmp.UI.ScintillaHelper.SyntaxLanguage,FAnsi.Discovery.QuerySyntax.IQuerySyntaxHelper,System.Boolean,System.Boolean,System.String)">
            <summary>
            Creates a new SQL (default) Scintilla editor with highlighting
            </summary>
            <param name="commandFactory">Unless your control is going to be 100% ReadOnly then you should supply an <see cref="T:Rdmp.UI.CommandExecution.ICombineableFactory"/> to allow dragging and  
            dropping components into the window.  The <see cref="T:Rdmp.UI.CommandExecution.ICombineableFactory"/> will decide whether the given object can be translated into an <see cref="T:Rdmp.Core.CommandExecution.ICombineToMakeCommand"/> and hence into a unique bit of SQL
            to add to the editor</param>
            <param name="language">Determines highlighting, options include mssql,csharp or null</param>
            <param name="syntaxHelper"></param>
            <param name="spellCheck"></param>
            <param name="lineNumbers"></param>
            <param name="currentDirectory"></param>
            <returns></returns>
        </member>
        <member name="T:Rdmp.UI.SimpleControls.CheckAndExecuteUI">
            <summary>
            Enables the launching of one of the core RDMP engines (<see cref="T:Rdmp.Core.CommandLine.Options.RDMPCommandLineOptions"/>) either as a detatched process or as a hosted process (where the 
            UI will show the checking/executing progress messages).  This class ensures that the behaviour is the same between console run rdmp and the UI applications.
            </summary>
        </member>
        <member name="E:Rdmp.UI.SimpleControls.CheckAndExecuteUI.ExecutionFinished">
            <summary>
            Called every time the execution of the runner completes (does not get called if the runner was detached - running 
            in a seperate process).
            </summary>
        </member>
        <member name="F:Rdmp.UI.SimpleControls.CheckAndExecuteUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.SimpleControls.CheckAndExecuteUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.SimpleControls.CheckAndExecuteUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.SimpleControls.ConnectionStringTextBox">
            <summary>
            Text box for entering Sql Server connection strings, includes autocomplete support for keywords (e.g. Database)
            </summary>
        </member>
        <member name="F:Rdmp.UI.SimpleControls.DatabaseTypeUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.SimpleControls.DatabaseTypeUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.SimpleControls.DatabaseTypeUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.SimpleControls.ExecutionEventArgs">
            <summary>
            EventArgs describing the final exit code of an <see cref="T:Rdmp.Core.CommandLine.Runners.IRunner"/> running in <see cref="T:Rdmp.UI.SimpleControls.CheckAndExecuteUI"/> (this will be the exit code that
            would have been returned had the <see cref="T:Rdmp.Core.CommandLine.Runners.IRunner"/> been running on the command line rdmp.exe).
            </summary>
        </member>
        <member name="T:Rdmp.UI.SimpleControls.HeatmapUI">
            <summary>
            Displays complicated many dimension pivot Aggregate graphs in an understandable format.  Requires a result data table that contains an axis in the first column of hte data table
            followed by any number (usually high e.g. 500+) additional columns which contain values that correspond to the axis.  A typical usage of this control would be to display drug 
            prescriptions by month where there are thousands of different prescribeable drugs.  
            
            <para>The HeatmapUI renders each column as a row of heat map with each cell in the column as a 'pixel' (where the pixel width depends on the number of increments in the axis).  The color
            of each pixel ranges from blue to red (with 0 appearing as black).  The effect of this is to show the distribution of popular vs rare pivot values across time (or whatever the axis is).</para>
            
            <para>You can use this to visualise high dimensionality data that is otherwise incomprehensible in AggregateGraph</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.SimpleControls.HeatmapUI._rainbow">
            Table is interpreted in the following way: 
             - First column is the axis in direction X (horizontally) containing (in order) the axis label values that will be each pixel in each heat lane
             - Each subsequent column (HeatLine1, HeatLine2 etc above) is a horizontal line of the heatmap with each pixel intensity being determined by the value on the corresponding date (in the first column)
        </member>
        <member name="M:Rdmp.UI.SimpleControls.HeatmapUI.GetHeatPixelHeight">
            <summary>
            Gets a suitable size to render each heat line respecting the controls Height and the number of dimensions in the DataTable.  Bounded by MinPixelHeight and MaxPixelHeight
            (see consts)
            </summary>
            <returns></returns>
        </member>
        <member name="F:Rdmp.UI.SimpleControls.HeatmapUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.SimpleControls.HeatmapUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.SimpleControls.HeatmapUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.SimpleControls.HelpIcon">
            <summary>
            Hovering over this control displays helpful information that relates to a nearby control.
            </summary>
        </member>
        <member name="P:Rdmp.UI.SimpleControls.HelpIcon.HoverText">
            <summary>
            Returns the text that will be displayed when the user hovers over the control (this may be truncated if the text provided to <see cref="M:Rdmp.UI.SimpleControls.HelpIcon.SetHelpText(System.String,System.String,Rdmp.UI.TransparentHelpSystem.HelpWorkflow)"/> was very long)
            </summary>
        </member>
        <member name="F:Rdmp.UI.SimpleControls.HelpIcon.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.SimpleControls.HelpIcon.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.SimpleControls.HelpIcon.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.SimpleControls.ISaveableUI">
             <summary>
             Indicates that the control hosts a <see cref="T:Rdmp.UI.SimpleControls.ObjectSaverButton"/> and that Ctr+S should result in saving.
            
             <para>This interface is used in reflection to automatically add saving support if you are a <see cref="T:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPSingleDatabaseObjectControl`1"/>. </para>
             </summary>
        </member>
        <member name="T:Rdmp.UI.SimpleControls.ObjectSaverButton">
            <summary>
            Allows saving of any DatabaseEntity.  When public properties are changed on the object the control automatically lights up and tracks the changes.  Clicking
            the Undo button will reset the DatabaseEntity to the state before the changes were made / when it was last saved.  Undo is a toggle from last saved state to 
            current user edit state and back again (i.e. not a tracked history).  In order to use an object saver button you should add it to an RDMPSingleDatabaseObjectControl
            and call SetupFor on the DatabaseObject.  You should also mark your control as ISaveableUI and implement the single method on that interface so that shortcuts
            are correctly routed to this control.
            </summary>
        </member>
        <member name="E:Rdmp.UI.SimpleControls.ObjectSaverButton.BeforeSave">
            <summary>
            Function to carry out some kind of proceedure before the object is saved.  Return true if you want the save to carry on and be applied or false to abandon the save attempt.
            </summary>
        </member>
        <member name="T:Rdmp.UI.SimpleControls.RainbowColorPicker">
            <summary>
            Generates colours on the visual spectrum between blue and red using interoplation.
            </summary>
        </member>
        <member name="F:Rdmp.UI.SimpleControls.SelectIMapsDirectlyToDatabaseTableComboBox.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.SimpleControls.SelectIMapsDirectlyToDatabaseTableComboBox.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.SimpleControls.SelectIMapsDirectlyToDatabaseTableComboBox.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.SimpleControls.ServerDatabaseTableSelector">
            <summary>
            Lets you select a server database or table.  Includes auto population of database/table lists.  This is a reusable component.
            </summary>
        </member>
        <member name="F:Rdmp.UI.SimpleControls.ServerDatabaseTableSelector.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.SimpleControls.ServerDatabaseTableSelector.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.SimpleControls.ServerDatabaseTableSelector.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.SimpleCounterButton">
            <summary>
            ToolStripButton with a public Property Count on it which displays a number up to 99 (after which it displays 99+) 
            </summary>
        </member>
        <member name="T:Rdmp.UI.SimpleDialogs.BulkProcessCatalogueItemsUI">
            <summary>
            Sometimes you will be called upon to host datasets that are a mile wide (e.g. 200 columns) from which researchers only ever receive/care about 10 or 20.  In this case it can be
            very useful to be able to bulk process CatalogueItem/ColumnInfo relationships and create/delete ExtractionInformation on mass.  This dialog lets you do that for a given Catalogue
            (dataset).
            
            <para>The starting point is to choose which CatalogueItems are to be bulk processed (Apply Transform To).  Either 'All CatalogueItems' or 'Only those matching paste list'.  If you choose
            to paste in a list this is done in the left hand listbox.  The window is very flexible about what you can paste in such that you can for example 'Script Select Top 1000' in Microsoft
            Sql Management Studio and paste the entire query in and it will work out the columns (it looks for the last bit of text on each line.</para>
            
            <para>Once you have configured the bulk process target you can choose what operation to do.  These include:</para>
            
            <para>Making all fields Extractable (with the given ExtractionCategory e.g. Core / Supplemental etc)</para>
            
            <para>Make all fields Unextractable (Delete Extraction Information)</para>
            
            <para>Delete all underlying ColumnInfos (useful if you are trying to migrate your descriptive metadata to a new underlying table in your database e.g. MyDb.Biochemistry to 
            MyDb.NewBiochemistry without losing CatalogueItem column descriptions and validation rules etc).</para>
            
            <para>Guess New Associated Columns from a given TableInfo (stage 2 in the above example), which will try to match up descriptive CatalogueItems by name to a new underlying TableInfo</para>
            
            <para> Delete All CatalogueItems (If you really want to nuke the lot of them!) </para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.SimpleDialogs.BulkProcessCatalogueItemsUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.BulkProcessCatalogueItemsUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.BulkProcessCatalogueItemsUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.SimpleDialogs.ChooseLoggingTaskUI">
            <summary>
            Every dataset (Catalogue) can have its own Logging task and Logging server.  If you have multiple logging servers (e.g. a test logging server and a live logging server). You 
            can configure each of these independently.  If you only have one logging server then just set the live logging server. 
            
            <para>Once you have set the logging server you should create or select an existing task (e.g. 'Loading Biochemistry' might be a good logging task for Biochemistry dataset).  All datasets
            in a given load (see LoadMetadataUI) must share the same logging task so it is worth considering the naming for example you might call the task 'Loading Hospital Data' and another
            'Loading Primary Care Data'.</para>
            
            <para>Data Extraction always gets logged under a task called 'Data Extraction' but the server you select here will be the one that it is logged against when the dataset is extracted.</para>
            
            <para>You can configure defaults for the logging servers of new datasets through ManageExternalServers dialog (See ManageExternalServers)</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.SimpleDialogs.ChooseLoggingTaskUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.ChooseLoggingTaskUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.ChooseLoggingTaskUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.CommitsUI.#ctor(Rdmp.UI.ItemActivation.IActivateItems)">
            <summary>
            Creates a new instance showing all <see cref="T:Rdmp.Core.Curation.Data.Commit"/> ever made regardless of what object
            they were working on.
            </summary>
            <param name="activator"></param>
        </member>
        <member name="F:Rdmp.UI.SimpleDialogs.CommitsUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.CommitsUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.CommitsUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.SimpleDialogs.ConfigureDisclaimerUI">
            <summary>
            As part of a data extraction, a ReleaseDocument is generated.  This is a Microsoft Word document which lists in tabular format the datasets released, the filters applied, the number
            of rows extracted, distinct patient identifiers etc.  This document can optionally include a statement about use of the data / accreditation or a disclaimer or whatever else message
            you want researchers to read.  
            
            <para>You can only have one message at a time and it is constant, we suggest something like "this data was supplied by blah, please accredit us and the NHS as the data provider... etc"</para>
            </summary> 
        </member>
        <member name="F:Rdmp.UI.SimpleDialogs.ConfigureDisclaimerUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.ConfigureDisclaimerUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.ConfigureDisclaimerUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.SimpleDialogs.ConfigureHashingAlgorithmUI">
            <summary>
            Any column in a data extraction which is marked with 'Hash On Data Release' (See ExtractionInformationUI) will be wrapped with this SQL string.  Use this to call a scalar valued
            function which generates hash strings based on the column value and the project number (salt).
            
            <para>For example Work.dbo.HicHash({0},{1}) would wrap column names such that the column name appeared in the {0} and the project number appeared in {1}.  For this to work you must have
            a database Work and a scalar function called HicHash (this is just an example, you can call the function whatever you want and adjust it accordingly).  You don't have to use the
            salt if you don't want to either, if you don't add a {1} then you won't get a salt argument into your scalar function.</para>
            
            <para>This is quite technical if you don't know what a Scalar Function is in SQL then you probably don't want to do hashing and instead you might want to just not extract these columns
            or configure them with the RDMP ANO system (See ANOTable).</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.SimpleDialogs.ConfigureHashingAlgorithmUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.ConfigureHashingAlgorithmUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.ConfigureHashingAlgorithmUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.SimpleDialogs.ConfigurePrimaryKeyCollisionResolverUI">
            <summary>
            One big potential sources of data error in clinical datasets is duplication.  In the worst examples this is exact 100% duplication! for example a data provider loads the same data
            twice, a data entry clerk hits the submit button twice in a poorly written piece of clinical software etc.  The RDMP attempts to eliminate/reduce the potential for duplication by
            requiring that data loaded through the Data Load Engine (DLE) require that all tables being loaded have a Primary Key which comes from the source data (no autonums!).
            
            <para>Because primary keys cannot contain NULL values you are forced to create sensible primary keys (for example a Hospital Admissions dataset might have a primary key 
            'PatientIdentifier' and 'AdmissionDateTime').  By putting a primary key on the dataset we ensure that there cannot be duplicate data load replication (loading same record twice)
              and also ensure that there cannot be unlinkable records in the database (records where no 'Patient Identifier' exists or when we don't know what date the admission was on).</para>
            
            <para>When primary key collisions occur in a data load it becomes necessary to evaluate the cause (Done by evaluating RAW - see UserManual.md Load Bubbles).  For example we might 
            determine that the data provider is sending us 2 records for the same patient on the same day, the records are identical except for a field 'DataAge'.  Rather than adding this 
            to the primary key it would make sense instead to discard the older record on load.</para>
            
            <para>This dialog (in combination with PrimaryKeyCollisionResolverMutilation - See UserManual.md) lets you delete records out of RAW such that the remaining data matches the datasets
             primary key (obviously this is incredibly dangerous!).  This is done by applying a column order (with a direction for each column).  The dataset is subsetted by primary key with 
            each set ordered by the resolution order of the columns and the top record taken.</para>
            
            <para>In the above example we would put 'DataAge' as the first column in the resolution order and set it to descending (prefer records with a larger date i.e. newer records).  Direction
            is obvious in the case of dates/numbers (ascending = prefer the lowest, descending = prefer the highest) but in the case of strings the length of the string is used with (DBNull 
            being 0 length).</para>
            
            <para>Only use PrimaryKeyCollisionResolverMutilation (and this dialog) if you are CERTAIN you have the right primary key for the data/your researchers.</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.SimpleDialogs.ConfigurePrimaryKeyCollisionResolverUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.ConfigurePrimaryKeyCollisionResolverUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.ConfigurePrimaryKeyCollisionResolverUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.SimpleDialogs.DataTableViewerUI">
            <summary>
            Allows you to view the results of a query sent by the RDMP.  This is a reusable component.
            </summary>
        </member>
        <member name="F:Rdmp.UI.SimpleDialogs.DataTableViewerUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.DataTableViewerUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.DataTableViewerUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.SimpleDialogs.ExceptionViewer">
            <summary>
            Used by the RDMP to tell you about something that went wrong.  You can select bits of the message text and copy them with Ctrl+C or select 'Copy to Clipboard' to copy all the
            message text in one go.  Clicking 'View Exception' will launch a ExceptionViewerStackTraceWithHyperlinks for viewing the location of the error in the codebase (including viewing
            the source code at the point of the error).
            </summary>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.ExceptionViewer.GetStackTrace(System.Exception,System.String)">
            <summary>
            Returns the first stack trace from the <paramref name="exception"/> (including examining inner exceptions where stack trace is missing).
            Otherwise returns <paramref name="ifNotFound"/>. 
            </summary>
            <param name="exception"></param>
            <param name="ifNotFound"></param>
            <returns></returns>
        </member>
        <member name="T:Rdmp.UI.SimpleDialogs.ExceptionViewerStackTraceWithHyperlinks">
            <summary>
            Displays an in-depth technical report about an error that occurred during a task.  The error messages and the location in each class file in the stack is displayed including line 
            numbers if a .pdb is available.  The pdb files for all RDMP code is shipped with the RDMP installer.
            
            <para>Additionally as part of the build process of RDMP applications the built codebase is zipped into a file called SourceCodeForSelfAwareness.zip clicking one of the hyperlinks in
            the stack trace will launch a small popup viewer showing you the codebase at that point with a highlight of the line that threw the Exception.</para>
            
            </summary>
        </member>
        <member name="F:Rdmp.UI.SimpleDialogs.ExceptionViewerStackTraceWithHyperlinks.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.ExceptionViewerStackTraceWithHyperlinks.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.ExceptionViewerStackTraceWithHyperlinks.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.SimpleDialogs.FindAndReplaceUI">
            <summary>
            Allows you to perform database wide find and replace operations.  This is a useful but very dangerous feature, it is possible to very easily break your Catalogue.  The 
            feature is primarily intended for system wide operations such as when you change a network UNC folder location or mapped network drive and you need to change ALL references
            to the root path to the new location.
            
            <para>Sql properties are also exposed but this is even more dangerous to modify.  For example if you change a database name and want to perform a system wide rename on all
            references including filters, extractable columns, extracted project definitions etc etc</para>
            
            <para>You should always back up both your Catalogue and DataExport databases before embarking on a Find and Replace</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.SimpleDialogs.FindAndReplaceUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.FindAndReplaceUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.FindAndReplaceUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.SimpleDialogs.ForwardEngineering.ConfigureCatalogueExtractabilityUI">
            <summary>
            This dialog is shown when the RDMP learns about a new data table in your data repository that you want it to curate.  This can be either following a the successful flat file import
            or after selecting an existing table for importing metadata from (See ImportSQLTable).
            
            <para>If you click 'Cancel' then no dataset (Catalogue) will be created and you will only have the TableInfo/ColumnInfo collection stored in your RDMP database, you will need to manually wire
            these up to a Catalogue or delete them if you decied you want to make the dataset extractable later on. </para>
            
            <para>Alternatively you can create a new Catalogue, this will result in a Catalogue (dataset) of the same name as the table and a CatalogueItem being created for each ColumnInfo imported.
            If you choose to you can make these CatalogueItems extractable by creating ExtractionInformation too or you may choose to do this by hand later on (in CatalogueItemUI).  It is likely that
            you don't want to release every column in the dataset to researchers so make sure to review the extractability of the columns created. </para>
            
            <para>You can choose a single extractable column to be the Patient Identifier (e.g. CHI / NHS number etc). This column must be the same (logically/datatype) across all your datasets i.e. 
            you can use either CHI number or NHS Number but you can't mix and match (but you could have fields with different names e.g. PatCHI, PatientCHI, MotherCHI, FatherChiNo etc).</para>
            
            <para>The final alternative is to add the imported Columns to another already existing Catalogue.  Only use this option if you know it is possible to join the new table with the other 
            table(s) that underlie the selected Catalogue (e.g. if you are importing a Results table which joins to a Header table in the dataset Biochemistry on primary/foreign key LabNumber).
            If you choose this option you must configure the JoinInfo logic (See JoinConfiguration)</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.SimpleDialogs.ForwardEngineering.ConfigureCatalogueExtractabilityUI._projectSpecific">
            <summary>
            the Project to associate the Catalogue with to make it ProjectSpecific (probably null)
            </summary>
        </member>
        <member name="F:Rdmp.UI.SimpleDialogs.ForwardEngineering.ConfigureCatalogueExtractabilityUI.isLoading">
            <summary>
            True if we are making programatic changes to values and shouldn't respond to control events (e.g. dropdown changes)
            </summary>
        </member>
        <member name="F:Rdmp.UI.SimpleDialogs.ForwardEngineering.ConfigureCatalogueExtractabilityUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.ForwardEngineering.ConfigureCatalogueExtractabilityUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.ForwardEngineering.ConfigureCatalogueExtractabilityUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.SimpleDialogs.Governance.GovernanceDocumentUI">
            <summary>
            The RDMP is designed to store sensitive clinical datasets and make them available in research ready (anonymous) form.  This usually requires governance approval from the data
            provider.  It is important to store the document trail and schedule (e.g. do you require yearly re-approval) for audit purposes.  The RDMP does this through Governance Periods
            (See GovernancePeriodUI).  
            
            <para>This control allows you to configure/view attachments of a GovernancePeriod (e.g. an email, a scan of a signed approval letter etc). For ease of reference you should describe
            what is in the document (e.g. 'letter to Fife healthboard (Mary Sue) listing the datasets we host and requesting re-approval for 2016.  Letter is signed by Dr Governancer.)'</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.SimpleDialogs.Governance.GovernanceDocumentUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.Governance.GovernanceDocumentUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.Governance.GovernanceDocumentUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.SimpleDialogs.Governance.GovernancePeriodUI">
            <summary>
            The RDMP is designed to store sensitive clinical datasets and make them available in research ready (anonymous) form.  This usually requires governance approval from the data
            provider.  This control lets you configure a period of governance (GovernancePeriod) which can be open ended (never expires).  You must then choose which datasets (Catalogues)
            the governance permission applies to.  Finally you can attach documents that prove the permission (See GovernanceDocumentUI).
            
            <para>You should make sure you name and describe the governance period.  The name should correspond to the period.  For example you might have 3 periods 'Fife approvals 2001-2002', 
            'Fife approvals 2002-2003' and 'Fife open ended approvals 2003-Forever'.  </para>
            
            <para>If you are doing yearly approvals you can import the dataset list from the last year as the basis of governanced datasets.</para>
            
            <para>If a GovernancePeriod expires all datasets (Catalogues) in the period will be assumed to have expired governance and will appear in the Dashboard as expired unless there is a new
            GovernancePeriod that is active.</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.SimpleDialogs.Governance.GovernancePeriodUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.Governance.GovernancePeriodUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.Governance.GovernancePeriodUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.SimpleDialogs.NavigateTo.RunUI">
            <summary>
            Allows you to search through and run any command (<see cref="T:Rdmp.Core.CommandExecution.AtomicCommands.IAtomicCommand"/>) in RDMP and lets you pick which object(s) to apply it to.
            </summary>
        </member>
        <member name="F:Rdmp.UI.SimpleDialogs.NavigateTo.RunUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.NavigateTo.RunUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.NavigateTo.RunUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.SimpleDialogs.PerformanceCounterUI">
            <summary>
            This form is mainly used for diagnostic purposes and lets you track every SQL query sent to the RDMP Data Catalogue and Data Export Manager databases.  This is useful for diagnosing
            the problem with sluggish user interfaces.  Once you select 'Start Command Auditing' it will record each unique SQL query sent to either database and the number of times it is sent
            including a StackTrace for the location in the RMDP software which the query was issued from.
            </summary>
        </member>
        <member name="F:Rdmp.UI.SimpleDialogs.PerformanceCounterUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.PerformanceCounterUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.PerformanceCounterUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.SimpleDialogs.PropagateCatalogueItemChangesToSimilarNamedUI">
            <summary>
            It is highly likely that you will have columns in different datasets which are conceptually the same (e.g. patient identifier).  Maintaining a central description of this concept is
            important, it is no use having 10 slightly different descriptions of 'PatientCareNumber' for example.
            
            <para>This dialog appears any time you save a description of a column/transform (CatalogueItem) and there is another column in any of your other datasets which has the same name.  It shows
            you the other columns that share the same name and lets you view their descriptions and the differences between their descriptions and your new description.  To view the changes
            select one of the properties you changed on the right listbox (e.g. Description) and then scroll through the objects on the left to view the differences in descriptions.</para>
            
            <para>Next you must decide whether your new description applies to all the other objects too or whether the software made a mistake and actually you want to maintain the unique descriptions
            (for example it is likely if you have a column EventDate it might have different descriptions in each dataset).</para>
            
            <para>Select either:
            Cancel - Nothing will be saved and your column description change will be lost
            No (Save only this one) - Only the original column description you were modifying will be saved
            Yes (Copy over changes) - The original column and ALL OTHER TICKED columns will all be set to have the same description (that you originally saved).</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.SimpleDialogs.PropagateCatalogueItemChangesToSimilarNamedUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.PropagateCatalogueItemChangesToSimilarNamedUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.PropagateCatalogueItemChangesToSimilarNamedUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.SimpleDialogs.Remoting.RemoteRDMPUI">
            <summary>
            Lets you change the settings for a RemoteRDMP which is a set of web credentials / url to reach another RDMP instance across the network/internet via a web service.
            </summary>
        </member>
        <member name="F:Rdmp.UI.SimpleDialogs.Remoting.RemoteRDMPUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.Remoting.RemoteRDMPUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.Remoting.RemoteRDMPUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.SimpleDialogs.Reports.DataGeneratorUI">
            <summary>
            Part of GenerateTestDataUI  (See GenerateTestDataUI).  This control lets you decide how many records in the dataset to create.  This data is fictional although it is designed to look
            semi real and exhibit peculiarities common to medical records.  The slider is exponential so if you drag it all the way to the top expect to wait for a weekend for it to generate
            all the data.
            </summary>
        </member>
        <member name="F:Rdmp.UI.SimpleDialogs.Reports.DataGeneratorUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.Reports.DataGeneratorUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.Reports.DataGeneratorUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.SimpleDialogs.Reports.GenerateTestDataUI">
             <summary>
             Lets you generate interesting test data in which to practice tasks such as importing data, generating cohorts and performing project extractions.  Note that ALL the data 
             generated is completely fictional.  Test data is generated randomly usually around a distribution (e.g. there are more prescriptions for Paracetamol/Aspirin than Morphine) but
             complex relationships are not modelled (e.g. there's no concept of someone being diabetic so just because someone is on INSULIN doesn't mean they will have diabetic blood tests 
             in biochemistry).  Likewise don't be surprised if people change address after they have died.
            
             <para>Identifiers are created from a central random pool and will be unique.  This means if you generate test data and then generate more tomorrow you are likely to only 
             have very minimal intersection of patient identifiers.  For this reason it is important not to generate and load Prescribing one day and then generate and load Biochemistry the 
             next day (instead you should generate all the data at once and use that as a reusable asset).</para>
             
             <para>Make sure to put a PopulationSize that is lower than the number of records you want to create in each dataset so that there are multiple records per person (will make analysis more
             interesting/realistic).</para>
             </summary>
        </member>
        <member name="F:Rdmp.UI.SimpleDialogs.Reports.GenerateTestDataUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.Reports.GenerateTestDataUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.Reports.GenerateTestDataUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.SimpleDialogs.Reports.MetadataReportUI">
            <summary>
            This dialog is the preferred way of extracting per dataset documentation for users.  It will generate a report for each (or a single) dataset (Catalogue) including:
            
            <para>- The dataset description</para>
            
            <para>- Descriptions of all extractable columns / extraction transforms</para>
            
            <para>- Counts of the number of records and unique patient identifiers (See ExtractionInformationUI and the IsExtractionIdentifier flag)</para>
            
            <para>- Complete extract of the lookup tables configured for the dataset (See LookupConfiguration)</para>
            
            <para>- Graphs of each IsExtractable aggregate on the dataset (See AggregateGraph)</para>
            
            <para>You can untick any of the above options if desired.  If any aspect times out then you can either fix the underlying problem (maybe you need an index that helps an 
            Aggregate run faster) or just increase the Query Timeout (default is 30s).</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.SimpleDialogs.Reports.MetadataReportUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.Reports.MetadataReportUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.Reports.MetadataReportUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.SimpleDialogs.Revertable.OfferChanceToSaveDialogUI">
            <summary>
            The RDMP uses a database (Catalogue Manager Database / Data Export Manager Database) to store all information about your datasets (Technical, descriptive, validation, attachments 
            etc).  Because the system is designed to run with multiple users accessing this database the same time (or by you having multiple applications running at once - like running
            CatalogueManager and Data Export Manager at the same time) it is possible that two users/applications will attempt to modify the same record at the same time.
            
            <para>This dialog is shown any time the software is confused about which version of a database object is correct (the one it has in memory or the one it finds in the database).  The
            form will show you every property which has been changed and you must pick which is the correct version of the record.  Once you have selected the correct one the software will
            update the database (if the one in memory is favoured) or discard its memory copy for a new database copy (if the database copy is preserved).</para>
            
            <para>If the above sounded too complicated, just look at the values of the properties and press the button for which is correct.</para>
            </summary>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.Revertable.OfferChanceToSaveDialogUI.ShowIfRequired(Rdmp.Core.MapsDirectlyToDatabaseTable.Revertable.IRevertable)">
            <summary>
            Shows a yes no to saving and describes differences in an IMapsDirectlyToDatabaseTable object which suports IRevertable
            </summary>
            <param name="revertable"></param>
        </member>
        <member name="F:Rdmp.UI.SimpleDialogs.Revertable.OfferChanceToSaveDialogUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.Revertable.OfferChanceToSaveDialogUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.Revertable.OfferChanceToSaveDialogUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.SimpleDialogs.Revertable.RevertablePropertyDifferenceUI">
            <summary>
            Used by OfferChanceToSaveDialog to tell you about a property difference between an RDMP object that is visible in an RDMP application but which has unaccountably become different
            from the database version (for example because another user has modified the record in the database while we had an older copy of it). See OfferChanceToSaveDialog for full details
            
            </summary>
        </member>
        <member name="F:Rdmp.UI.SimpleDialogs.Revertable.RevertablePropertyDifferenceUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.Revertable.RevertablePropertyDifferenceUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.Revertable.RevertablePropertyDifferenceUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Rdmp.UI.SimpleDialogs.SelectDialog`1._allObjects">
            <summary>
            All the objects when T is not an IMapsDirectlyToDatabaseTable.
            </summary>
        </member>
        <member name="F:Rdmp.UI.SimpleDialogs.SelectDialog`1.Selected">
            <summary>
            The users final selection when not using mutli select mode
            </summary>
        </member>
        <member name="P:Rdmp.UI.SimpleDialogs.SelectDialog`1.AlwaysFilterOn">
            <summary>
            Hides the Type selection toggle buttons and forces results to only appear matching the given Type
            </summary>
        </member>
        <member name="F:Rdmp.UI.SimpleDialogs.SelectDialog`1.EasyFilterTypesAndAssociatedCollections">
            <summary>
            Object types that appear in the task bar as filterable types
            </summary>
        </member>
        <member name="F:Rdmp.UI.SimpleDialogs.SelectDialog`1.StartingEasyFilters">
            <summary>
            Identifies which Types are checked by default when the dialog is shown when the given RDMPCollection has focus
            </summary>
        </member>
        <member name="F:Rdmp.UI.SimpleDialogs.SelectDialog`1.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.SelectDialog`1.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.SelectDialog`1.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.SimpleDialogs.ServerDatabaseTableSelectorDialog">
            <summary>
            Modal dialog that prompts you to pick a database or table (<see cref="T:Rdmp.UI.SimpleControls.ServerDatabaseTableSelector"/>)
            </summary>
        </member>
        <member name="F:Rdmp.UI.SimpleDialogs.ServerDatabaseTableSelectorDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.ServerDatabaseTableSelectorDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.ServerDatabaseTableSelectorDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.SimpleDialogs.ShowSQLUI">
            <summary>
            Allows you to view a given piece of SQL.  This dialog is used whenever the RDMP wants to show you some SQL and includes syntax highlighting.  It may be readonly or editable
            depending on the context in which the dialog was launched.
            </summary>
        </member>
        <member name="F:Rdmp.UI.SimpleDialogs.ShowSQLUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.ShowSQLUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.ShowSQLUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.SimpleDialogs.SimpleFileImporting.CreateNewCatalogueByImportingFileUI">
            <summary>
            Allows you to import a flat file into your database with appropriate column data types based on the values read from the file.  This data table will then be referenced by an RDMP
            Catalogue which can be used to interact with it through RDMP.  
            </summary>
        </member>
        <member name="F:Rdmp.UI.SimpleDialogs.SimpleFileImporting.CreateNewCatalogueByImportingFileUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.SimpleFileImporting.CreateNewCatalogueByImportingFileUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.SimpleFileImporting.CreateNewCatalogueByImportingFileUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.SimpleDialogs.SimpleFileImporting.CreateNewCatalogueByImportingFileUI_Advanced">
            <summary>
            Allows you to take data in a single data table and bulk insert it into a database (which you pick at the top of the screen).  You must select or create an appropriate pipeline.
            This will consist of a source that is capable of reading your file (e.g. if the file is CSV use DelimitedFlatFileDataFlowSource) and zero or more middle components e.g. CleanStrings. 
            For destination your pipeline can have any destination that inherits from DataTableUploadDestination (this allows you to have custom plugin behaviour if you have some kind of
             weird database repository).  After the pipeline has executed and your database has been populated with the data table then the ForwardEngineerCatalogue dialog will appear which 
            will let you create a Catalogue reference in the DataCatalogue database for the new table.  Note that this dialog should only be used for 'one off' or 'getting started' style 
            loads, if you plan to routinely load this data table then give it a LoadMetadata (See LoadMetadataUI).
            </summary>
        </member>
        <member name="F:Rdmp.UI.SimpleDialogs.SimpleFileImporting.CreateNewCatalogueByImportingFileUI_Advanced.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.SimpleFileImporting.CreateNewCatalogueByImportingFileUI_Advanced.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.SimpleFileImporting.CreateNewCatalogueByImportingFileUI_Advanced.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.SimpleDialogs.SqlDialogs.SetSQLDialog">
            <summary>
            Allows the user to view and edit some SQL they have written.  Basically the same as ShowSQL but this window expects you to have populated some meaningful SQL that the
            caller will store/use somehow.
            </summary>
        </member>
        <member name="F:Rdmp.UI.SimpleDialogs.SqlDialogs.SetSQLDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.SqlDialogs.SetSQLDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.SqlDialogs.SetSQLDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.SimpleDialogs.SqlDialogs.SQLBeforeAndAfterViewer">
            <summary>
            Shows two pieces of SQL and the differences between them.  This is used by the RDMP for example to show you what the audited extraction SQL for a dataset was and what you 
            last extracted it (e.g. before the weekend) and what the active configuration looks like today (e.g. if somebody snuck in a couple of extra columns into a data extraction
            after the extract file had already been generated).
            </summary>
        </member>
        <member name="F:Rdmp.UI.SimpleDialogs.SqlDialogs.SQLBeforeAndAfterViewer.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.SqlDialogs.SQLBeforeAndAfterViewer.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.SqlDialogs.SQLBeforeAndAfterViewer.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.SimpleDialogs.SqlDialogs.SQLPreviewWindow">
            <summary>
            Shows you some SQL the system is about to execute with a description of what it is trying to achieve.  You can choose either 'Ok' to execute the SQL and carry on with the rest
            of the ongoing procedure or Cancel (the SQL will not run and the procedure will be abandoned).
            </summary>
        </member>
        <member name="F:Rdmp.UI.SimpleDialogs.SqlDialogs.SQLPreviewWindow.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.SqlDialogs.SQLPreviewWindow.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.SqlDialogs.SQLPreviewWindow.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.SimpleDialogs.SupportingDocumentUI">
            <summary>
            The RDMP allows you at attach both documents and auxiliary tables (SupportingSQLTable) to your datasets (Catalogue).  These artifacts are then available to data analysts who
            want to understand the dataset better.  Also if you tick IsExtractable then whenever the Catalogue is extracted the table/document is automatically copied and extracted into 
            project extraction directory for provision to the researcher.
            
            <para>Enter the name, description and file path to the file you want attached to your dataset.  Make sure the path is on a network drive or otherwise available to all system users
            otherwise other data analysts will not be able to view the file.</para>
            
            <para>Tick Extractable if you want a copy of the document to be automatically created whenever the dataset is extracted and supplied to a researcher as part of a project extraction.</para>
            
            <para>If you tick IsGlobal then the table will be extracted regardless of what dataset is selected in a researchers data request (useful for global documents e.g. terms of use of 
            data).</para>
            
            </summary>
        </member>
        <member name="F:Rdmp.UI.SimpleDialogs.SupportingDocumentUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.SupportingDocumentUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.SupportingDocumentUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.SimpleDialogs.SupportingSQLTableUI">
            <summary>
            The RDMP allows you at attach both documents and auxiliary tables (SupportingSQLTable) to your datasets (Catalogue).  These artifacts are then available to data analysts who
            want to understand the dataset better.  Also if you tick IsExtractable then whenever the Catalogue is extracted the table/document is automatically copied and extracted into 
            project extraction directory for provision to the researcher.
            
            <para>If you have Lookup tables (that you don't want to configure as Lookup objects, see LookupConfiguration) or complex dictionary tables etc which are required/helpful in understanding or
            processing the data in your dataset then you should configure it as a SupportingSQLTable.  Make sure to put in an appropriate name and description of what is in the table.  You
            must select the server on which the SQL should be run (See ManageExternalServers), if you setup a single reference to your data repository with Database='master' and then ensure
            that all your SupportingSQLTables are fully qualified (e.g. [MyDb].dbo.[MyTable]) then you can avoid having to create an ExternalDatabaseServer for each different database.</para>
            
            <para>If you tick IsGlobal then the table will be extracted regardless of what dataset is selected in a researchers data request (useful for global lookups that contain cross dataset 
            codes).  </para>
            
            <para>IMPORTANT: Make sure your SQL query DOES NOT return any identifiable data if it is marked as IsExtractable as this SQL is executed 'as is' and does not undergo any project level
            anonymisation.</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.SimpleDialogs.SupportingSQLTableUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.SupportingSQLTableUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.SupportingSQLTableUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Rdmp.UI.SimpleDialogs.TaskDescriptionLabel.PreferredWidth">
            <summary>
            Returns the width this control would ideally like to take up
            </summary>
        </member>
        <member name="F:Rdmp.UI.SimpleDialogs.TaskDescriptionLabel.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.TaskDescriptionLabel.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.TaskDescriptionLabel.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.SimpleDialogs.TypeTextOrCancelDialog">
            <summary>
            Prompts the user to type in some text.  There will be a title text telling you what the system expects you to type (e.g. some DQE annotation text).
            </summary>
        </member>
        <member name="P:Rdmp.UI.SimpleDialogs.TypeTextOrCancelDialog.RequireSaneHeaderText">
            <summary>
            True to require that text typed be sane for usage as a column name, table name etc e.g. "bob" but not "bob::bbbbb".
            </summary>
        </member>
        <member name="F:Rdmp.UI.SimpleDialogs.TypeTextOrCancelDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.TypeTextOrCancelDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.TypeTextOrCancelDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.SimpleDialogs.UserSettingsFileUI">
            <summary>
            Allows you to change settings in the application that are optional e.g. whether to load the Home screen on startup or to load the state of the application when you last closed it.
            
            <para>Settings are stored in AppData in a folder called RDMP in a file called UserSettings.txt</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.SimpleDialogs.UserSettingsFileUI.MaxTooltipWidth">
            <summary>
            The maximum number of characters to allow per line in a tooltip before
            wrapping to next line
            </summary>
        </member>
        <member name="F:Rdmp.UI.SimpleDialogs.UserSettingsFileUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.UserSettingsFileUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.UserSettingsFileUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.SimpleDialogs.ViewSourceCodeDialog">
            <summary>
            Allows you to view a class file from the RDMP codebase.  See ExceptionViewerStackTraceWithHyperlinks for the mechanics of how this works (or UserManual.md).  A green line will
            highlight the line on which the message or error occurred.
            </summary>
        </member>
        <member name="F:Rdmp.UI.SimpleDialogs.ViewSourceCodeDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.ViewSourceCodeDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.ViewSourceCodeDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Rdmp.UI.SimpleDialogs.WaitUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.WaitUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.WaitUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.SimpleDialogs.WideMessageBox">
            <summary>
            Used to display a message to the user including selectable text and resizing.  Basically improves on System.Windows.Forms.MessageBox
            </summary>
        </member>
        <member name="F:Rdmp.UI.SimpleDialogs.WideMessageBox.MAX_LENGTH_TITLE">
            <summary>
            The maximum number of characters displayed in the title
            </summary>
        </member>
        <member name="F:Rdmp.UI.SimpleDialogs.WideMessageBox.MAX_LENGTH_BODY">
            <summary>
            The maximum number of characters displayed in the body
            </summary>
        </member>
        <member name="P:Rdmp.UI.SimpleDialogs.WideMessageBox.Args">
            <summary>
            The currently displayed message
            </summary>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.WideMessageBox.GetDocumentationKeyword(System.String,System.String)">
            <summary>
            Returns <paramref name="word"/> if <see cref="F:Rdmp.UI.SimpleDialogs.WideMessageBox.CommentStore"/> contains an entry for it.
            </summary>
            <param name="keywordNotToAdd"></param>
            <param name="word"></param>
            <returns></returns>
        </member>
        <member name="F:Rdmp.UI.SimpleDialogs.WideMessageBox.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.WideMessageBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.SimpleDialogs.WideMessageBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.SimpleDialogs.WideMessageBoxArgs">
            <summary>
            Initialization object for <see cref="T:Rdmp.UI.SimpleDialogs.WideMessageBox"/> (controls look and feel, content etc)
            </summary>
        </member>
        <member name="T:Rdmp.UI.SimpleDialogs.YesNoYesToAllDialog">
            <summary>
            Asks you if you want to carry out a particular activity with the option to say Yes to this activity or 'Yes to All' (activities that are similar to this one).
            </summary>
        </member>
        <member name="F:Rdmp.UI.SimpleDialogs.YesNoYesToAllDialog.ButtonXPadding">
            <summary>
            The number of pixels to allow outside of the text width when auto sizing buttons
            </summary>
        </member>
        <member name="T:Rdmp.UI.SingleControlForms.IConsultableBeforeClosing">
            <summary>
            Interface for UIs which want to respond to their hosting ParentForm being closed
            </summary>
        </member>
        <member name="T:Rdmp.UI.SingleControlForms.SingleControlForm">
            <summary>
            TECHNICAL: Helper class that turns a Control into a Form by mounting it.  Also wires up IConsultableBeforeClosing to the Form Closing event if the hosted Control implements it.
            </summary>
        </member>
        <member name="T:Rdmp.UI.SubComponents.CohortIdentificationConfigurationUI">
            <summary>
            Allows you to view/edit a CohortIdentificationConfiguration.  You should start by giving it a meaningful name e.g. 'Project 132 Cases - Deaths caused by diabetic medication' 
            and a comprehensive description e.g. 'All patients in Tayside and Fife who are over 16 at the time of their first prescription of a diabetic medication (BNF chapter 6.1) 
            and died within 6 months'.  An accurate up-to-date description will help future data analysts to understand the configuration.
            
            <para>If you have a large data repository or plan to use lots of different datasets or complex filters in your CohortIdentificationCriteria you should configure a caching database
            from the dropdown menu.</para>
            
            <para>Next you should add datasets and set operations (<see cref="T:Rdmp.Core.Curation.Data.Cohort.CohortAggregateContainer"/>) either by right clicking or dragging and dropping into the tree view</para>
            
            <para>In the above example you might have </para>
            
            <para>Set 1 - Prescribing</para>
            
            <para>    Filter 1 - Prescription is for a diabetic medication</para>
            
            <para>    Filter 2 - Prescription is the first prescription of its type for the patient</para>
            
            <para>    Filter 3 - Patient died within 6 months of prescription</para>
            
            <para>INTERSECT</para>
            
            <para>Set 2 - Demography</para>
                
            <para>    Filter 1 - Latest known healthboard is Tayside or Fife</para>
            
            <para>    Filter 2 - Date of Death - Date of Birth > 16 years</para>
             
            </summary>
        </member>
        <member name="M:Rdmp.UI.SubComponents.CohortIdentificationConfigurationUI.RebuildClearCacheCommand">
            <summary>
            Resets the state of <see cref="F:Rdmp.UI.SubComponents.CohortIdentificationConfigurationUI.btnClearCache"/> to reflect any changes in cached status
            </summary>
        </member>
        <member name="F:Rdmp.UI.SubComponents.CohortIdentificationConfigurationUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.SubComponents.CohortIdentificationConfigurationUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.SubComponents.CohortIdentificationConfigurationUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.SubComponents.Graphs.CohortSummaryAggregateGraphObjectCollection">
            <summary>
            Input/Persistence object for <see cref="T:Rdmp.UI.SubComponents.Graphs.CohortSummaryAggregateGraphUI"/> which records which filter (if any) should be shown for patients
            matching the <see cref="P:Rdmp.UI.SubComponents.Graphs.CohortSummaryAggregateGraphObjectCollection.CohortContainerIfAny"/> or <see cref="P:Rdmp.UI.SubComponents.Graphs.CohortSummaryAggregateGraphObjectCollection.CohortIfAny"/> in the graph.
            </summary>
        </member>
        <member name="M:Rdmp.UI.SubComponents.Graphs.CohortSummaryAggregateGraphObjectCollection.#ctor">
            <summary>
            Do not use this constructor, it is used only for deserialization during persistence on form loading after application closing
            </summary>
        </member>
        <member name="M:Rdmp.UI.SubComponents.Graphs.CohortSummaryAggregateGraphObjectCollection.#ctor(Rdmp.Core.Curation.Data.Aggregation.AggregateConfiguration,Rdmp.Core.Curation.Data.Aggregation.AggregateConfiguration,Rdmp.Core.QueryBuilding.CohortSummaryAdjustment)">
            <summary>
            Use this constructor at runtime
            </summary>
            <param name="cohort"></param>
            <param name="graph"></param>
            <param name="adjustment"></param>
        </member>
        <member name="M:Rdmp.UI.SubComponents.Graphs.CohortSummaryAggregateGraphObjectCollection.#ctor(Rdmp.Core.Curation.Data.Cohort.CohortAggregateContainer,Rdmp.Core.Curation.Data.Aggregation.AggregateConfiguration)">
            <summary>
            Overload that does the operation on a container with (WhereExtractionIdentifiersIn - the only permissable option)
            </summary>
            <param name="container"></param>
            <param name="graph"></param>
        </member>
        <member name="T:Rdmp.UI.SubComponents.Graphs.CohortSummaryAggregateGraphUI">
            <summary>
            Allows you to execute a Frankenstein AggregateGraph that combines the dimensions, pivots, joins etc of a regular Aggregate Chart with the results of a 'Cohort Set'.  This allows you
            to compare live vs cohort and easily visualise cohorts you are building in a CohortIdentificationConfiguration.  For example if you have an 'Aggregate Chart' which shows demography
            records for 5 healthboards over time then you combine it with a 'cohort set' "People who have lived in Tayside or Fife for at least 5 years" you should expect to see the graph only
            show Tayside and Fife records.
            
            <para>There are 2 ways of combining the two queries (cohort and original graph):
            WhereExtractionIdentifiersIn - provides an identical query to the original graph with an extra restriction that the patient identifier must appear in the 'Cohort Set'.  This lets you
            have a 'Cohort Set' "Prescriptions for Morphine" but generate a graph of "All drug prescriptions over time" and have it show all the drugs that those patients are on over time (this
            should show a high favouritism for Morphine but also show other drugs Morphine users also take).</para>
            
            <para>WhereRecordsIn - provides an identical query to the original graph but also applies the Filters that are on the 'Cohort Set'.  This means that the same 'Cohort Set' "Prescriptions for
            Morphine" combined with the 'Aggregate Chart' "All drug prescriptions over time" would show ONLY Morphine prescriptions (since that is what the records that are returned by the cohort
            query).</para>
             
            </summary>
        </member>
        <member name="T:Rdmp.UI.SuggestComboBox">
            <summary>
            ComboBox with support for autocomplete (based on substring)
            </summary>
        </member>
        <member name="P:Rdmp.UI.SuggestComboBox.PropertySelector">
            <summary>
            If the item-type of the ComboBox is not string,
            you can set here which property should be used
            </summary>
        </member>
        <member name="P:Rdmp.UI.SuggestComboBox.FilterRule">
            <summary>
             Lambda-Expression to determine the suggested items
             (as Expression here because simple lamda (func) is not serializable)
             <para>default: case-insensitive contains search</para>
             <para>1st string: list item</para>
             <para>2nd string: typed text</para>
            </summary>
        </member>
        <member name="P:Rdmp.UI.SuggestComboBox.SuggestListOrderRule">
            <summary>
             Lambda-Expression to order the suggested items
             (as Expression here because simple lamda (func) is not serializable)
             <para>default: alphabetic ordering</para>
            </summary>
        </member>
        <member name="M:Rdmp.UI.SuggestComboBox.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Rdmp.UI.SuggestComboBox.OnTextChanged(System.EventArgs)">
            <summary>
            the magic happens here ;-)
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rdmp.UI.SuggestComboBox.OnParentChanged(System.Object,System.EventArgs)">
            <summary>
            suggest-ListBox is added to parent control
            (in ctor parent isn't already assigned)
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Rdmp.UI.SuggestComboBox.OnPreviewKeyDown(System.Windows.Forms.PreviewKeyDownEventArgs)">
            <summary>
            if the suggest-ListBox is visible some keystrokes
            should behave in a custom way
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Rdmp.UI.TechnicalUI">
            <summary>
            Used to indicate when a property does not map to an underlying data table
            </summary>
        </member>
        <member name="T:Rdmp.UI.TestsAndSetup.GlobalExceptionHandler">
            <summary>
            Global singleton for registering/changing how global application errors are handled.
            </summary>
        </member>
        <member name="P:Rdmp.UI.TestsAndSetup.GlobalExceptionHandler.Handler">
            <summary>
            What to do when errors occur, changing this discards the old action and sets a new one.  Defaults to launching a non modal <see cref="T:Rdmp.UI.SimpleDialogs.ExceptionViewer"/>
            </summary>
        </member>
        <member name="F:Rdmp.UI.TestsAndSetup.RDMPBootStrapper`1.ApplicationArguments">
            <summary>
            The last used connection string arguments when launching using this factory class.  Typically the boot strapper
            should only ever be used once so you can safely query this field but best to check that it is not null anyway.
            </summary>
        </member>
        <member name="P:Rdmp.UI.TestsAndSetup.ServicePropogation.BeforeCheckingEventArgs.Cancel">
            <summary>
            True to cancel the checking process
            </summary>
        </member>
        <member name="M:Rdmp.UI.TestsAndSetup.ServicePropogation.INamedTab.GetTabName">
            <summary>
            Provide a name for when your control is presented on a tab control, this should only be called after SetCollection/SetDatabaseObject etc has previously been called
            </summary>
        </member>
        <member name="M:Rdmp.UI.TestsAndSetup.ServicePropogation.INamedTab.GetTabToolTip">
            <summary>
            Provide an optional format for the tab tool tip on a tab control. Return NULL to use default tab tooltip behaviour and display the ToolTipText if too long for the tab box.
            </summary>
        </member>
        <member name="T:Rdmp.UI.TestsAndSetup.ServicePropogation.IObjectCollectionControl">
            <summary>
            Only use if you know what you are doing.  What you are doing is anouncing that you cannot function on a single root database object alone (e.g. Project / ExtractionConfiguration etc).
            and that you require a combination of objects and/or custom settings to be persisted/refreshed.  If you can manage with only one object (which you really should be able to) then use
            RDMPSingleDatabaseObjectControl instead which is much easier to implement
            
            <para>IObjectCollectionControls are controls driven by 0 or more database objects and optional persistence string (stored in an IPersistableObjectCollection).  The lifecycle of the control
            is that it is Activated (probably by an IActivateItems control class) with a fully hydrated IPersistableObjectCollection.  This collection should be pretty immutable and will be saved
            into the persistence text file when the application is exited (via PersistableObjectCollectionDockContent)</para>
            
            </summary>
        </member>
        <member name="M:Rdmp.UI.TestsAndSetup.ServicePropogation.IObjectCollectionControl.SetCollection(Rdmp.UI.ItemActivation.IActivateItems,Rdmp.Core.Curation.Data.Dashboarding.IPersistableObjectCollection)">
            <summary>
            Provides a fully hydrated collection either created by a user action or by deserializing a persistence string in PersistableObjectCollectionDockContent.  Either way the
            collection will be fully hydrated.
            </summary>
            <param name="activator"></param>
            <param name="collection"></param>
        </member>
        <member name="M:Rdmp.UI.TestsAndSetup.ServicePropogation.IObjectCollectionControl.GetCollection">
            <summary>
            Used to serialize the control for later use e.g. on application exit, you must only return your collection, the rest is handled by the IPersistableObjectCollection itself or
            the PersistableObjectCollectionDockContent
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPControlCommonFunctionality.ToolStrip">
            <summary>
            This is the strip of buttons and labels for all controls commonly used for interacting with the content of the tab.  The 
            bar should start with <see cref="F:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPControlCommonFunctionality._menuDropDown"/>.
            </summary>
        </member>
        <member name="E:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPControlCommonFunctionality.BeforeChecking">
            <summary>
            Occurs before checking the <see cref="T:Rdmp.Core.ReusableLibraryCode.Checks.ICheckable"/> (see  <see cref="M:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPControlCommonFunctionality.StartChecking"/>
            </summary>
        </member>
        <member name="E:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPControlCommonFunctionality.OnFatal">
            <summary>
            Occurs when a call to <see cref="M:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPControlCommonFunctionality.Fatal(System.String,System.Exception)"/> is made.  This will result in the form showing an error
            icon (but not closing itself).
            </summary>
        </member>
        <member name="E:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPControlCommonFunctionality.ToolStripAddedToHost">
            <summary>
            Event occurs when the <see cref="P:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPControlCommonFunctionality.ToolStrip"/> is added to the hosting Control
            </summary>
        </member>
        <member name="F:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPControlCommonFunctionality._menuDropDown">
            <summary>
            This is the button with 3 horizontal lines which exposes all menu options which are seldom pressed or navigate you somewhere
            </summary>
        </member>
        <member name="M:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPControlCommonFunctionality.Add(Rdmp.Core.CommandExecution.AtomicCommands.IAtomicCommand,System.String,SixLabors.ImageSharp.Image{SixLabors.ImageSharp.PixelFormats.Rgba32},System.String)">
            <summary>
            Adds the given <paramref name="cmd"/> to the top bar at the top of the control.  This will be always
            visible at the top of the form
            </summary>
            <param name="cmd"></param>
            <param name="overrideCommandName"></param>
            <param name="overrideImage"></param>
            <param name="underMenu">If the command should appear under a submenu dropdown then this should be the name of that root button</param>
        </member>
        <member name="M:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPControlCommonFunctionality.Add(System.Windows.Forms.ToolStripItem,System.String)">
            <summary>
            Adds the given <paramref name="item"/> to the top bar at the top of the control.  This will be always
            visible at the top of the form
            </summary>
            <param name="item"></param>
            <param name="underMenu">If the command should appear under a submenu dropdown then this should be the name of that root button</param>
        </member>
        <member name="M:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPControlCommonFunctionality.AddChecks(Rdmp.Core.ReusableLibraryCode.Checks.ICheckable)">
            <summary>
            Adds check buttons to the tool strip and sets up <see cref="M:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPControlCommonFunctionality.StartChecking"/> to target <paramref name="checkable"/>.
            </summary>
            <param name="checkable"></param>
        </member>
        <member name="M:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPControlCommonFunctionality.AddChecks(System.Func{Rdmp.Core.ReusableLibraryCode.Checks.ICheckable})">
            <summary>
            Adds check buttons to the tool strip and sets up <see cref="M:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPControlCommonFunctionality.StartChecking"/> to target the return value of <paramref name="checkableFunc"/>.  If the method throws the
            Exception will be exposed in the checking system. 
            
            <para>Only use this method if there is a reasonable chance the <paramref name="checkableFunc"/> will crash otherwise use the normal overload</para>
            </summary>
            <param name="checkableFunc"></param>
        </member>
        <member name="M:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPControlCommonFunctionality.StartChecking">
            <summary>
            Runs checks on the last variable passed in <see cref="M:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPControlCommonFunctionality.AddChecks(Rdmp.Core.ReusableLibraryCode.Checks.ICheckable)"/>.  Do not call this method unless you have first
            called <see cref="M:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPControlCommonFunctionality.AddChecks(Rdmp.Core.ReusableLibraryCode.Checks.ICheckable)"/>.
            </summary>
        </member>
        <member name="M:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPControlCommonFunctionality.Fatal(System.String,System.Exception)">
            <summary>
            Reports the supplied exception in the RAG checks smiley on the top toolbar.  This will result in rag checks becomming 
            visible if it was not visible before.
            </summary>
            <param name="s"></param>
            <param name="exception"></param>
        </member>
        <member name="F:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPControlCommonFunctionality._helpAdded">
            <summary>
            All keywords added via <see cref="M:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPControlCommonFunctionality.AddHelp(System.Windows.Forms.Control,System.String,System.String,System.Windows.Forms.AnchorStyles)"/>
            </summary>
        </member>
        <member name="M:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPControlCommonFunctionality.AddHelpStringToToolStrip(System.String,System.String)">
            <summary>
            Adds a <see cref="T:Rdmp.UI.SimpleControls.HelpIcon"/> to the task bar at the top of the control
            </summary>
            <param name="title"></param>
            <param name="body"></param>
        </member>
        <member name="M:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPControlCommonFunctionality.AddHelp(System.Windows.Forms.Control,System.String,System.String,System.Windows.Forms.AnchorStyles)">
            <summary>
            Adds a <see cref="T:Rdmp.UI.SimpleControls.HelpIcon"/> on the right of the control with documentation for the listed property
            </summary>
            <param name="c">The control you want the help to appear beside</param>
            <param name="propertyName">The xml-doc property you want e.g. "ICatalogue.Name"</param>
            <param name="title"></param>
            <param name="anchor">Explicit anchor style to apply to help icon.  If you pass None (default) then anchor will
             be chosen based on the control <paramref name="c"/></param>
        </member>
        <member name="M:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPControlCommonFunctionality.AddHelpString(System.Windows.Forms.Control,System.String,System.String,System.Windows.Forms.AnchorStyles)">
            <summary>
            Adds a <see cref="T:Rdmp.UI.SimpleControls.HelpIcon"/> on the right of the control with the pvorided help text
            </summary>
            <param name="c">The control you want the help to appear beside</param>
            <param name="title">The textual header you want shown</param>
            <param name="body">The text you want displayed on hover (under the title)</param>
            <param name="anchor">Explicit anchor style to apply to help icon.  If you pass None (default) then anchor will
             be chosen based on the control <paramref name="c"/></param>
        </member>
        <member name="M:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPControlCommonFunctionality.AddToMenu(Rdmp.Core.CommandExecution.AtomicCommands.IAtomicCommand,System.String,SixLabors.ImageSharp.Image{SixLabors.ImageSharp.PixelFormats.Rgba32},System.String)">
            <summary>
            Adds the given <paramref name="cmd"/> to the drop down menu button bar at the top of the control.  This
            will be visible only when you click on the menu button.
            </summary>
            <param name="cmd"></param>
            <param name="overrideCommandName"></param>
            <param name="overrideImage"></param>
            <param name="underMenu"></param>
        </member>
        <member name="M:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPControlCommonFunctionality.AddToMenu(System.Windows.Forms.ToolStripItem,System.String)">
            <summary>
            Adds the given <paramref name="menuItem"/> to the drop down menu button bar at the top of the control.  This
            will be visible only when you click on the menu button.
            </summary>
        </member>
        <member name="M:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPControlCommonFunctionality.Add(System.String,System.Boolean)">
            <summary>
            Adds a new ToolStripLabel with the supplied <paramref name="label"/> text to the menu bar at the top of the control
            </summary>
            <param name="label"></param>
            <param name="showIcon">True to add the text icon next to the text</param>
        </member>
        <member name="M:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPControlCommonFunctionality.Add(Rdmp.Core.CommandExecution.AtomicCommands.IAtomicCommand,System.String,Rdmp.Core.Icons.IconProvision.RDMPConcept,Rdmp.Core.ReusableLibraryCode.Icons.IconProvision.OverlayKind)">
            <summary>
            Adds the given <paramref name="cmd"/> to the menu bar at the top of the control
            </summary>
            <param name="cmd"></param>
            <param name="overrideCommandName"></param>
            <param name="overrideImage"></param>
            <param name="overlayKind"></param>
        </member>
        <member name="M:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPControlCommonFunctionality.ResetChecks">
            <summary>
            Resets the RAG checker (smiley) if there is one to empty
            </summary>
        </member>
        <member name="M:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPControlCommonFunctionality.DoActionAndRedIfThrows(System.Windows.Forms.TextBox,System.Action)">
            <summary>
            Performs the given <paramref name="action"/>.  If an Exception is thrown then
            the <paramref name="tb"/> will be turned Red (otherwise it will be set to Black).
            </summary>
            <param name="tb"></param>
            <param name="action"></param>
        </member>
        <member name="M:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPControlCommonFunctionality.ScintillaGoRed(ScintillaNET.Scintilla,System.Boolean)">
            <summary>
            Sets the text color in the <paramref name="queryEditor"/> to red (or back to normal if <paramref name="red"/> is false).
            </summary>
            <param name="queryEditor"></param>
            <param name="red"></param>
        </member>
        <member name="M:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPControlCommonFunctionality.DisableMouseWheel(System.Windows.Forms.ComboBox)">
            <summary>
            Disables mouse wheel scrolling on the given <paramref name="cb"/>
            </summary>
            <param name="cb"></param>
        </member>
        <member name="T:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPForm">
            <summary>
            TECHNICAL: Base class for all Forms in all RDMP applications which require to know where the DataCatalogue Repository and/or DataExportManager Repository databases are stored.
            IMPORTANT: You MUST set RepositoryLocator = X after calling the constructor on any RDMPForm before showing it (see RDMPFormInitializationTests) this will ensure that OnLoad is 
            able to propagate the locator to all child controls (RDMPUserControl).  
            </summary>
        </member>
        <member name="P:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPForm.CloseOnEscape">
            <summary>
            Whether escape keystrokes should trigger form closing (defaults to true).
            </summary>
        </member>
        <member name="M:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPForm.#ctor">
            <summary>
            Constructs the form without initializing the activator.  If you use this method you must call SetItemActivator manually later
            </summary>
        </member>
        <member name="M:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPForm.#ctor(Rdmp.UI.ItemActivation.IActivateItems)">
            <summary>
            Constructs the form and initializes the activator
            </summary>
            <param name="activator"></param>
        </member>
        <member name="M:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPForm.GetTopmostRDMPUserControl">
            <summary>
            Returns this since RDMPForm is a Form and therefore a top level control
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPSingleDatabaseObjectControl`1">
            <summary>
            TECHNICAL: base abstract class for all Controls which are concerned with a single root DatabaseEntity e.g. AggregateGraph is concerned only with an AggregateConfiguration
            and its children.  The reason this class exists is to streamline lifetime publish subscriptions (ensuring multiple tabs editting one anothers database objects happens 
            in a seamless a way as possible). 
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPSingleDatabaseObjectControl`1.UseCommitSystem">
            <summary>
            True to track changes made to the <see cref="P:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPSingleDatabaseObjectControl`1.DatabaseObject"/> hosted by this control
            and create <see cref="T:Rdmp.Core.Curation.Data.Commit"/> when changes are saved.  Using this field requires
            declaring yourself <see cref="T:Rdmp.UI.SimpleControls.ISaveableUI"/>
            </summary>
        </member>
        <member name="F:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPSingleDatabaseObjectControl`1.CurrentCommit">
            <summary>
            Tracks changes to <see cref="P:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPSingleDatabaseObjectControl`1.DatabaseObject"/> since last save.  Note that this is null
            before <see cref="M:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPSingleDatabaseObjectControl`1.SetDatabaseObject(Rdmp.UI.ItemActivation.IActivateItems,Rdmp.Core.Curation.Data.DatabaseEntity)"/> has been called
            or if <see cref="P:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPSingleDatabaseObjectControl`1.UseCommitSystem"/> is false.
            </summary>
        </member>
        <member name="P:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPSingleDatabaseObjectControl`1.ReadOnly">
            <summary>
            True if the hosted <see cref="P:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPSingleDatabaseObjectControl`1.DatabaseObject"/> <see cref="M:Rdmp.Core.Curation.Data.IMightBeReadOnly.ShouldBeReadOnly(System.String@)"/>.  This property is detected and update during SetDatabaseObject so use it only after this call has been made
            </summary>
        </member>
        <member name="M:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPSingleDatabaseObjectControl`1.Bind(System.Windows.Forms.Control,System.String,System.String,System.Func{`0,System.Object},System.Boolean,System.Windows.Forms.DataSourceUpdateMode)">
            <summary>
            Performs data binding using default parameters (OnPropertyChanged), no formatting etc.  Getter must be a
            property of <see cref="P:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPSingleDatabaseObjectControl`1.DatabaseObject"/>
            </summary>
            <param name="c"></param>
            <param name="propertyName"></param>
            <param name="dataMember"></param>
            <param name="getter"></param>
            <param name="formattingEnabled"></param>
            <param name="updateMode"></param>
        </member>
        <member name="M:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPSingleDatabaseObjectControl`1.SetDate(System.Windows.Forms.TextBox,System.Action{System.Nullable{System.DateTime}})">
            <summary>
            Parses the datetime out of the <paramref name="tb"/> with blank being null.  If the string doesn't parse
            then the text will turn red.
            </summary>
            <param name="tb"></param>
            <param name="action">Method to call if a valid DateTime is entered into the text box.  Called with null if text box is blank</param>
        </member>
        <member name="M:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPSingleDatabaseObjectControl`1.SetUrl(System.Windows.Forms.TextBox,System.Action{System.Uri})">
            <summary>
            Parses the Uri out of the <paramref name="tb"/> with blank being null.  If the string doesn't parse
            then the text will turn red.
            </summary>
            <param name="tb"></param>
            <param name="action">Method to call if a valid Uri is entered into the text box.  Called with null if text box is blank</param>
        </member>
        <member name="M:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPSingleDatabaseObjectControl`1.Publish(Rdmp.Core.MapsDirectlyToDatabaseTable.IMapsDirectlyToDatabaseTable)">
            <summary>
            Triggers an application refresh because a change has been made to <paramref name="e"/>
            </summary>
        </member>
        <member name="M:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPSingleDatabaseObjectControl`1.Publish">
            <summary>
            Triggers an application refresh because a change has been made to the forms main <see cref="P:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPSingleDatabaseObjectControl`1.DatabaseObject"/>
            </summary>
        </member>
        <member name="M:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPSingleDatabaseObjectControl`1.PublishToSelfOnly">
            <summary>
            Triggers a refresh only of this form (calls <see cref="M:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPSingleDatabaseObjectControl`1.SetDatabaseObject(Rdmp.UI.ItemActivation.IActivateItems,`0)"/>)
            </summary>
        </member>
        <member name="T:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPUserControl">
            <summary>
            TECHNICAL: Base class for all UserControls in all RDMP applications which require to know where the DataCatalogue Repository and/or DataExportManager Repository databases are stored.
            The class handles propagation of the RepositoryLocator to all Child Controls at OnLoad time.  IMPORTANT: Do not use RepositoryLocator until OnLoad or later (i.e. don't use it
            in the constructor of your class).  Also make sure your RDMPUserControl is hosted on an RDMPForm.
            </summary>
        </member>
        <member name="M:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPUserControl.OnBeforeChecking">
            <summary>
            Called immediately before checking the object set up by the last call to <see cref="M:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPControlCommonFunctionality.AddChecks(Rdmp.Core.ReusableLibraryCode.Checks.ICheckable)"/>
            </summary>
        </member>
        <member name="M:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPUserControl.GetTopmostRDMPUserControl">
            <summary>
            Returns the topmost control which implements <see cref="T:Rdmp.UI.TestsAndSetup.ServicePropogation.RDMPUserControl"/>
            </summary>
        </member>
        <member name="T:Rdmp.UI.TestsAndSetup.StartupUI">
            <summary>
            Shows every when RDMP application is first launched.  Tells you whether there are any problems with your current platform databases.
            If you get an error (Red face) then clicking it will show a log of the startup process.
            </summary>
        </member>
        <member name="P:Rdmp.UI.TestsAndSetup.StartupUI.CouldNotReachTier1Database">
            <summary>
            True if we failed to reach the catalogue database
            </summary>
        </member>
        <member name="F:Rdmp.UI.TestsAndSetup.StartupUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.TestsAndSetup.StartupUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.TestsAndSetup.StartupUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.Theme.BackColorProvider">
            <summary>
            Determines which colour to use for the background on controls relating to this collection concept
            </summary>
        </member>
        <member name="T:Rdmp.UI.Theme.ITheme">
            <summary>
            Interface for classes who can apply a look and feel to tool strips/menus
            </summary>
        </member>
        <member name="T:Rdmp.UI.ToolStripTimeout">
            <summary>
            Factory for generating a consistent representation in a <see cref="T:System.Windows.Forms.ToolStrip"/> of a user configurable timeout period.
            </summary>
        </member>
        <member name="T:Rdmp.UI.TransparentHelpSystem.HelpBox">
            <summary>
            Describes why a given region is highlighted in TransparentHelpForm.  Describes what the user should do next and optionally can give the user alternate options to change the 
            help path being taken.
            </summary>
        </member>
        <member name="F:Rdmp.UI.TransparentHelpSystem.HelpBox.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.TransparentHelpSystem.HelpBox.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.TransparentHelpSystem.HelpBox.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.TransparentHelpSystem.HelpStage">
            <summary>
            Overlay message box which appears next to a given <see cref="F:Rdmp.UI.TransparentHelpSystem.HelpStage.HighlightControl"/> and describes how the user might interact
            with it.
            </summary>
        </member>
        <member name="P:Rdmp.UI.TransparentHelpSystem.HelpStage.UseDefaultPosition">
            <summary>
            If true then HostLocationForStageBox will be ignored and the positioning of hte HelpBox will be decided based on the location of the highlighted control and the
            surrounding available placement space on the host Form.
            </summary>
        </member>
        <member name="M:Rdmp.UI.TransparentHelpSystem.HelpStage.Await(System.Threading.CancellationToken)">
            <summary>
            If there is moveOnWhenConditionMet set up in this HelpStage then this will start polling for the condition.  If the condition is met before cancellation true
            is returned (i.e. show the next stage).  Returns false if there is no moveOnCondition set up or the CancellationToken is cancelled.
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="T:Rdmp.UI.TransparentHelpSystem.HelpWorkflow">
            <summary>
            Collection of ordered <see cref="T:Rdmp.UI.TransparentHelpSystem.HelpStage"/> that guide the user through a sequence of actions.
            </summary>
        </member>
        <member name="M:Rdmp.UI.TransparentHelpSystem.HelpWorkflow.Start(System.Boolean)">
            <summary>
            Restarts the HelpWorkflow
            </summary>
        </member>
        <member name="M:Rdmp.UI.TransparentHelpSystem.HelpWorkflow.Abandon">
            <summary>
            Ends the current help session (cannot be reversed)
            </summary>
        </member>
        <member name="T:Rdmp.UI.TransparentHelpSystem.ProgressTracking.IHelpWorkflowProgressProvider">
            <summary>
            Interface for classes that determine whether a given <see cref="T:Rdmp.UI.TransparentHelpSystem.HelpWorkflow"/> should be shown or not (e.g. based
            on whether the current user has already seen it).
            </summary>
        </member>
        <member name="T:Rdmp.UI.TransparentHelpSystem.ProgressTracking.NullHelpWorkflowProgressProvider">
            <summary>
            Implementation of <see cref="T:Rdmp.UI.TransparentHelpSystem.ProgressTracking.IHelpWorkflowProgressProvider"/> which always returns true (show workflow).
            </summary>
        </member>
        <member name="T:Rdmp.UI.TransparentHelpSystem.TransparentHelpForm">
            <summary>
            Transparent windows Form which allows a pseudo greyout to occur over all controls in a window except for the location you want the users attention focused.  This includes the 
            addition of a temporary HelpBox which describes what the user is expected to do (See HelpBox).
            </summary>
        </member>
        <member name="T:Rdmp.UI.TreeHelper.TreeNodeParentFinder">
            <summary>
            Helper class for finding parents in a <see cref="T:BrightIdeasSoftware.TreeListView"/> that match a given Type.
            </summary>
        </member>
        <member name="T:Rdmp.UI.Tutorials.Tutorial">
             <summary>
             Wrapper for a <see cref="T:Rdmp.Core.CommandExecution.ICommandExecution"/> which should launch a user interaction that guides them through some activity
             (e.g. a <see cref="T:Rdmp.UI.TransparentHelpSystem.HelpWorkflow"/>).  Each <see cref="T:Rdmp.UI.Tutorials.Tutorial"/> is associated with a specific <see cref="P:Rdmp.UI.Tutorials.Tutorial.Guid"/> to ensure
             its completeness can can be tracked.
            
             <para>Instances should only be constructed in <see cref="T:Rdmp.UI.Tutorials.TutorialTracker"/></para>
             </summary>
        </member>
        <member name="T:Rdmp.UI.Tutorials.TutorialTracker">
            <summary>
            Collection of <see cref="T:Rdmp.UI.Tutorials.Tutorial"/>.  Manages marking them complete, launching them etc.
            </summary>
        </member>
        <member name="T:Rdmp.UI.Validation.ResolveMissingTargetPropertiesUI">
            <summary>
            Allows you to recover from a mismatch in columns in a Catalogue when validation rules were originally written for it and the state it is in now.  You will automatically see this 
            form when editting the Validation rules on a Catalogue that has had CatalogueItems that previously had validation removed/renamed.  The Form prompts you to drag and drop matching columns
            to indicate whether any new columns are symantically the same as the old ones that had disapeared (e.g. where a column has changed names).  Also allows you to delete the orphans (validation
            rules for columns that are no longer there/extractable).
            </summary>
        </member>
        <member name="F:Rdmp.UI.Validation.ResolveMissingTargetPropertiesUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.Validation.ResolveMissingTargetPropertiesUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.Validation.ResolveMissingTargetPropertiesUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.Validation.SecondaryConstraintUI">
            <summary>
            Part of <see cref="T:Rdmp.UI.Validation.ValidationSetupUI"/>, this control is for configuring/viewing a single validation rule on a column/transform of a dataset (Catalogue).  For example it might be a NotNull
            validation constraint which means rows with a null value in this field will fail validation.  Why would you do this you ask? when you can have a database constraint in your data
            repository that prevents null values? well sometimes research data is quite dirty and if a problematic field(especially if it is a non-essential column) is sometimes worth allowing
            it through even though it's null and highlighting problem records with the validation rule NotNull.
            
            <para>Other secondary constraints include Regex patterns, standard regexes (See StandardRegexUI), referential integrity constraints etc.</para>
            
            <para>Each constraint has a Consequence (Missing, Wrong, Invalidates Row) these are used to classify the state of each row in the Data Quality Engine when running validation.  For example
            if you have 2 cells in a row that are both failing validation, one with a consequence of Missing and one with a consequence of Wrong then the entire row is classified as 'Wrong' 
            overall.</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.Validation.SecondaryConstraintUI.SecondaryConstriant">
            <summary>
            this UI exists to modify this property, the secondary constraint, it is entirely driven by reflection so should handle any SecondaryConstraint you throw at it
            </summary>
        </member>
        <member name="F:Rdmp.UI.Validation.SecondaryConstraintUI._requiredProperties">
            <summary>
            A record of the writeable properties in the SecondaryConstraint you threw at it
            </summary>
        </member>
        <member name="F:Rdmp.UI.Validation.SecondaryConstraintUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.Validation.SecondaryConstraintUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.Validation.SecondaryConstraintUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.Validation.StandardRegexUI">
            <summary>
            Regular expressions are a great way of validating the content of your datasets.  For example you could have a regex pattern ^[MFU]$ which would force a cells contents to be either
            M, F or U with nothing else allowed.  Rather than having each data analyst type the same regular expression into the validation rules of each column you can create a StandardRegex.
            This StandardRegex will then be available as a validation rule for any column (See <see cref="T:Rdmp.UI.Validation.ValidationSetupUI"/>).
            
            <para>Because regular expressions can get pretty complicated both a concept name and a verbose description that explains what the pattern matches and what it won't match.  You can also 
            test your implementation by typing values into the 'Testing Box' and clicking Test.  For example if you typed in 'Male' with the above pattern it would fail validation because it
            is not either an M or a F or a U.  If your pattern was [MFU] then it would pass because it contains an M! </para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.Validation.StandardRegexUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.Validation.StandardRegexUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.Validation.StandardRegexUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.Validation.ValidationSetupUI">
            <summary>
            Validation is an essential part of hosting research data.  If one month all the new records come in with values in gender of 'Male' and 'Female'  when previously they were 'M' or 
            'F' then you want to know about it (because it will affect filters and end users of the data who now have to include 2 different values in their WHERE statements).  In such a 
            trivial situation the first step would be to confirm if it is a mistake with the data provider, if not then a decision should be made whether to standardise on the old/new 
            categories and adjust the data load accordingly.
            
            <para>But for this to happen at all you need to be able to recognise when such problems occur.  The RDMP handles this by allowing you to specify validation rules on each of the 
            extractable columns / transforms you make available to researchers.  On the left of this form you can see all the columns/transforms.  By selecting one you can view/edit its'
            collection of Secondary Constraints (see SecondaryConstraintUI) and choose a Primary Constraint (Validates the datatype, only use a primary constraint if you have an insane
            schema such as using varchar(max) to store 'dates' and have dirty data that includes values like 'last friday' mixed in with legit values).</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.Validation.ValidationSetupUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.Validation.ValidationSetupUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.Validation.ValidationSetupUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.Versioning.CreatePlatformDatabase">
            <summary>
            Allows you to create a new managed database (e.g. Logging database, Catalogue Manager database etc).
            
            <para>Enter a server and a database (and optionally a username and password).  If you specify a username / password these will be stored either in a user settings file 
            for tier 1 databases (Catalogue Manager / Data Export Manager) or as encrypted strings in the catalogue database for Tier 2-3 databases (See 
            PasswordEncryptionKeyLocationUI).</para>
            
            <para>You will be shown the initial creation script for the database so you can see what is being created and make sure it matches your expectations.  The database
            will then be patched up to date with the current version of the RDMP.</para>
            </summary>
        </member>
        <member name="M:Rdmp.UI.Versioning.CreatePlatformDatabase.#ctor(Rdmp.Core.MapsDirectlyToDatabaseTable.Versioning.IPatcher)">
            <summary>
            Calls the main constructor but passing control of what scripts to extract to the Patch class
            </summary>
        </member>
        <member name="F:Rdmp.UI.Versioning.CreatePlatformDatabase.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.Versioning.CreatePlatformDatabase.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.Versioning.CreatePlatformDatabase.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.Versioning.PatchingUI">
            <summary>
            This window appears whenever the RDMP has detected that there is a version mismatch between your database and the RDMP software (or a plugin you have written - See <see cref="T:Rdmp.Core.MapsDirectlyToDatabaseTable.Versioning.PluginPatcher"/>).
            The RDMP enforces a strict version policy in which the version of the codebase (the software running) must always match that of the databases it is running on.  Each new version of
            the RDMP software will include SQL patches designed to bring your databases up-to-date with the new feature set.
            
            <para>This dialog shows you the version number of the database and the version number of the patching assembly (separate version numbers are maintained for the Catalogue Manager Database,
            Data Export Database, Logging databases etc).</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.Versioning.PatchingUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.Versioning.PatchingUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.Versioning.PatchingUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.Wizard.CreateNewCohortIdentificationConfigurationUI">
            <summary>
            Provides streamlined/simplified access to the cohort creation functionality of RDMP.  The UI lets you pick from existing datasets and existing filters created by your Data Manager for
            interacting with those datasets including specifying values for arguments e.g. TestCode = 'CRE'.  
            
            <para>Initially you are limited to 2 inclusion criteria and 2 exclsuion criteria (datasets).  Upon completing the wizard you will be taken to the execution screen of the Cohort Identification
            Configuration created.  There you can test/refine your configuration as well as add more datasets and deeper nesting of set operations as required.</para>
            
            </summary>
        </member>
        <member name="F:Rdmp.UI.Wizard.CreateNewCohortIdentificationConfigurationUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.Wizard.CreateNewCohortIdentificationConfigurationUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.Wizard.CreateNewCohortIdentificationConfigurationUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.Wizard.CreateNewDataExtractionProjectUI">
            <summary>
            Provides a single screen allowing you to execute a CohortIdentificationConfiguration or load an IdentifierList into the snapshot store, allocate release identifiers and build an 
            extraction project with specific datasets.  Each time you use this user interface you will get a new Project so do not use the wizard if you already have an existing Project e.g.
            if you want to do a project refresh or adjust a cohort etc (In such a case you should use CohortIdentificationCollectionUI to add a new ExtractionConfiguration/Cohort to your existing
            Project).
            </summary>
        </member>
        <member name="F:Rdmp.UI.Wizard.CreateNewDataExtractionProjectUI._selectedDatasets">
            <summary>
            Datasets that should be added to the <see cref="T:Rdmp.Core.DataExport.Data.Project"/> when executed
            </summary>
        </member>
        <member name="M:Rdmp.UI.Wizard.CreateNewDataExtractionProjectUI.UpdateDatasetControlVisibility">
            <summary>
            Updates the enabledness and selected item of (<see cref="F:Rdmp.UI.Wizard.CreateNewDataExtractionProjectUI.cbxDatasets"/> to match the current <see cref="F:Rdmp.UI.Wizard.CreateNewDataExtractionProjectUI._selectedDatasets"/>)
            </summary>
        </member>
        <member name="F:Rdmp.UI.Wizard.CreateNewDataExtractionProjectUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.Wizard.CreateNewDataExtractionProjectUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.Wizard.CreateNewDataExtractionProjectUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.Wizard.SimpleCohortSetUI">
            <summary>
            Part of CreateNewCohortIdentificationConfigurationUI.  Allows you to modify how a dataset Catalogue is filtered to identify patients.  Selecting prescribing will result in a cohort
            set of 'everyone appearing in the prescribing dataset', if you add a filter on drug prescribed to 'Paracetamol' then the set will be 'everyone who has ever been presdcribed Paracetamol'.
            </summary>
        </member>
        <member name="F:Rdmp.UI.Wizard.SimpleCohortSetUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.Wizard.SimpleCohortSetUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.Wizard.SimpleCohortSetUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.Wizard.SimpleFilterUI">
            <summary>
            Part of CreateNewCohortIdentificationConfigurationUI.  Allows you to view and edit the parameters (if any) of a Filter you have added (or was Mandatory) on a dataset.  For example if
            you have a Filter 'Drug Prescribed' on the dataset 'Prescribing' typing "'Paracetamol'" into the parameter will likely restrict the cohort to matching only those patients who have ever
            been prescribed Paracetamol.  
            
            <para>If the control is Readonly (disabled / greyed out) then it is probably a Mandatory filter on your dataset and you will not be able to remove it.</para>
            
            <para>This UI is a simplified version of ExtractionFilterUI</para>
            </summary>
        </member>
        <member name="F:Rdmp.UI.Wizard.SimpleFilterUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.Wizard.SimpleFilterUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.Wizard.SimpleFilterUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.Wizard.SimpleParameterUI">
            <summary>
            Part of SimpleFilterUI.  Allows you to specify the value of a given parameter of the filter.  There can be multiple parameters on a given filter (or none).  For example a filter
            'Drug Prescribed' might have a parameter @drugName and another @amountPrescribed.  
            </summary>
        </member>
        <member name="F:Rdmp.UI.Wizard.SimpleParameterUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.Wizard.SimpleParameterUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.Wizard.SimpleParameterUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rdmp.UI.Wizard.SimpleSetOperation">
            <summary>
            Part of CreateNewCohortIdentificationConfigurationUI.  Allows you to determine how the datasets in the CohortIdentificationConfiguration are combined to identify patients.  The options
            are 'Match All patients regardless of which dataset they appear in' and 'Match only patients who are in both datasets'.  If it is an Exclusion criteria then the result is what is subtracted
            from the matching cohorts (Inclusion criteria).  For example you could have Inclusion Criteria 'Anyone currently Resident in Tayside' and exclude 'Anyone who is dead' and 'Anyone who has
            ever been prescribed Aspirin', in this case the exclusion criteria would be 'Match All patients regardless of which dataset they appear in' since you want to throw out patients in either
            dataset.
            </summary>
        </member>
        <member name="F:Rdmp.UI.Wizard.SimpleSetOperation.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rdmp.UI.Wizard.SimpleSetOperation.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rdmp.UI.Wizard.SimpleSetOperation.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
    </members>
</doc>
